{"version":3,"sources":["webpack://kind-web/./src/apps/Mons.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,aAAa;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbaAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,aAAa;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbaAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,cAAc;AAChE;AACA;AACA;AACA;AACA;AACA,0DAA0D,cAAc;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,cAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,KAAK;AAC5C;AACA;AACA;AACA,uCAAuC,KAAK;AAC5C;AACA;AACA;AACA,uCAAuC,KAAK;AAC5C;AACA;AACA;AACA,uCAAuC,KAAK;AAC5C;AACA;AACA;AACA,uCAAuC,KAAK;AAC5C;AACA;AACA;AACA,uCAAuC,KAAK;AAC5C;AACA;AACA;AACA,uCAAuC,KAAK;AAC5C;AACA;AACA;AACA,uCAAuC,KAAK;AAC5C;AACA;AACA;AACA,uCAAuC,KAAK;AAC5C;AACA;AACA;AACA,uCAAuC,KAAK;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,IAAI,GAAG,IAAI;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjqEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qGAAqG;AACrG;AACA;AACA;AACA;AACA,iGAAiG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjyDAAyD;AACzD;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qGAAqG;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qGAAqG;AACrG;AACA;AACA;AACA;AACA;AACA,yGAAyG;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iGAAiG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yGAAyG;AACzG;AACA;AACA;AACA;AACA;AACA,qGAAqG;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yHAAyH;AACzH;AACA;AACA;AACA;AACA,qHAAqH;AACrH;AACA;AACA;AACA;AACA;AACA,iHAAiH;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iGAAiG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iGAAiG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qGAAqG;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzfile":"191.index.js","sourcesContent":["module.exports = (function() {\n    function word_to_u16(w) {\n        var u = 0;\n        for (var i = 0; i < 16; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u16_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 16; ++i) {\n            w = {\n                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u16_to_bits(x) {\n        var s = '';\n        for (var i = 0; i < 16; ++i) {\n            s = (x & 1 ? '1' : '0') + s;\n            x = x >>> 1;\n        }\n        return s;\n    };\n\n    function word_to_u32(w) {\n        var u = 0;\n        for (var i = 0; i < 32; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u32_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 32; ++i) {\n            w = {\n                _: (u >>> (32 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32_for(state, from, til, func) {\n        for (var i = from; i < til; ++i) {\n            state = func(i)(state);\n        }\n        return state;\n    };\n\n    function word_to_u64(w) {\n        var u = 0n;\n        for (var i = 0n; i < 64n; i += 1n) {\n            u = u | (w._ === 'Word.i' ? 1n << i : 0n);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u64_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0n; i < 64n; i += 1n) {\n            w = {\n                _: (u >> (64n - i - 1n)) & 1n ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32array_to_buffer32(a) {\n        function go(a, buffer) {\n            switch (a._) {\n                case 'Array.tip':\n                    buffer.push(a.value);\n                    break;\n                case 'Array.tie':\n                    go(a.lft, buffer);\n                    go(a.rgt, buffer);\n                    break;\n            }\n            return buffer;\n        };\n        return new Uint32Array(go(a, []));\n    };\n\n    function buffer32_to_u32array(b) {\n        function go(b) {\n            if (b.length === 1) {\n                return {\n                    _: 'Array.tip',\n                    value: b[0]\n                };\n            } else {\n                var lft = go(b.slice(0, b.length / 2));\n                var rgt = go(b.slice(b.length / 2));\n                return {\n                    _: 'Array.tie',\n                    lft,\n                    rgt\n                };\n            };\n        };\n        return go(b);\n    };\n\n    function buffer32_to_depth(b) {\n        return BigInt(Math.log(b.length) / Math.log(2));\n    };\n    var list_for = list => nil => cons => {\n        while (list._ !== 'List.nil') {\n            nil = cons(list.head)(nil);\n            list = list.tail;\n        }\n        return nil;\n    };\n    var list_length = list => {\n        var len = 0;\n        while (list._ === 'List.cons') {\n            len += 1;\n            list = list.tail;\n        };\n        return BigInt(len);\n    };\n    const inst_unit = x => x(1);\n    const elim_unit = (x => {\n        var $1 = (() => c0 => {\n            var self = x;\n            switch (\"unit\") {\n                case 'unit':\n                    var $0 = c0;\n                    return $0;\n            };\n        })();\n        return $1;\n    });\n    const inst_bool = x => x(true)(false);\n    const elim_bool = (x => {\n        var $4 = (() => c0 => c1 => {\n            var self = x;\n            if (self) {\n                var $2 = c2;\n                return $2;\n            } else {\n                var $3 = c2;\n                return $3;\n            };\n        })();\n        return $4;\n    });\n    const inst_nat = x => x(0n)(x0 => 1n + x0);\n    const elim_nat = (x => {\n        var $8 = (() => c0 => c1 => {\n            var self = x;\n            if (self === 0n) {\n                var $5 = c2;\n                return $5;\n            } else {\n                var $6 = (self - 1n);\n                var $7 = c2($6);\n                return $7;\n            };\n        })();\n        return $8;\n    });\n    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');\n    const elim_bits = (x => {\n        var $14 = (() => c0 => c1 => c2 => {\n            var self = x;\n            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                case 'o':\n                    var $9 = self.slice(0, -1);\n                    var $10 = c1($9);\n                    return $10;\n                case 'i':\n                    var $11 = self.slice(0, -1);\n                    var $12 = c2($11);\n                    return $12;\n                case 'e':\n                    var $13 = c0;\n                    return $13;\n            };\n        })();\n        return $14;\n    });\n    const inst_u16 = x => x(x0 => word_to_u16(x0));\n    const elim_u16 = (x => {\n        var $17 = (() => c0 => {\n            var self = x;\n            switch ('u16') {\n                case 'u16':\n                    var $15 = u16_to_word(self);\n                    var $16 = c0($15);\n                    return $16;\n            };\n        })();\n        return $17;\n    });\n    const inst_u32 = x => x(x0 => word_to_u32(x0));\n    const elim_u32 = (x => {\n        var $20 = (() => c0 => {\n            var self = x;\n            switch ('u32') {\n                case 'u32':\n                    var $18 = u32_to_word(self);\n                    var $19 = c0($18);\n                    return $19;\n            };\n        })();\n        return $20;\n    });\n    const inst_u64 = x => x(x0 => word_to_u64(x0));\n    const elim_u64 = (x => {\n        var $23 = (() => c0 => {\n            var self = x;\n            switch ('u64') {\n                case 'u64':\n                    var $21 = u64_to_word(self);\n                    var $22 = c0($21);\n                    return $22;\n            };\n        })();\n        return $23;\n    });\n    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));\n    const elim_string = (x => {\n        var $28 = (() => c0 => c1 => {\n            var self = x;\n            if (self.length === 0) {\n                var $24 = c2;\n                return $24;\n            } else {\n                var $25 = self.charCodeAt(0);\n                var $26 = self.slice(1);\n                var $27 = c2($25)($26);\n                return $27;\n            };\n        })();\n        return $28;\n    });\n    const inst_buffer32 = x => x(x0 => x1 => u32array_to_buffer32(x1));\n    const elim_buffer32 = (x => {\n        var $32 = (() => c0 => {\n            var self = x;\n            switch ('b32') {\n                case 'b32':\n                    var $29 = buffer32_to_depth(self);\n                    var $30 = buffer32_to_u32array(self);\n                    var $31 = c0($29)($30);\n                    return $31;\n            };\n        })();\n        return $32;\n    });\n\n    function Buffer32$new$(_depth$1, _array$2) {\n        var $33 = u32array_to_buffer32(_array$2);\n        return $33;\n    };\n    const Buffer32$new = x0 => x1 => Buffer32$new$(x0, x1);\n\n    function Array$(_A$1, _depth$2) {\n        var $34 = null;\n        return $34;\n    };\n    const Array = x0 => x1 => Array$(x0, x1);\n\n    function Array$tip$(_value$2) {\n        var $35 = ({\n            _: 'Array.tip',\n            'value': _value$2\n        });\n        return $35;\n    };\n    const Array$tip = x0 => Array$tip$(x0);\n\n    function Array$tie$(_lft$3, _rgt$4) {\n        var $36 = ({\n            _: 'Array.tie',\n            'lft': _lft$3,\n            'rgt': _rgt$4\n        });\n        return $36;\n    };\n    const Array$tie = x0 => x1 => Array$tie$(x0, x1);\n\n    function Array$alloc$(_depth$2, _x$3) {\n        var self = _depth$2;\n        if (self === 0n) {\n            var $38 = Array$tip$(_x$3);\n            var $37 = $38;\n        } else {\n            var $39 = (self - 1n);\n            var _half$5 = Array$alloc$($39, _x$3);\n            var $40 = Array$tie$(_half$5, _half$5);\n            var $37 = $40;\n        };\n        return $37;\n    };\n    const Array$alloc = x0 => x1 => Array$alloc$(x0, x1);\n\n    function U32$new$(_value$1) {\n        var $41 = word_to_u32(_value$1);\n        return $41;\n    };\n    const U32$new = x0 => U32$new$(x0);\n\n    function Word$(_size$1) {\n        var $42 = null;\n        return $42;\n    };\n    const Word = x0 => Word$(x0);\n    const Word$e = ({\n        _: 'Word.e'\n    });\n\n    function Word$o$(_pred$2) {\n        var $43 = ({\n            _: 'Word.o',\n            'pred': _pred$2\n        });\n        return $43;\n    };\n    const Word$o = x0 => Word$o$(x0);\n\n    function Word$zero$(_size$1) {\n        var self = _size$1;\n        if (self === 0n) {\n            var $45 = Word$e;\n            var $44 = $45;\n        } else {\n            var $46 = (self - 1n);\n            var $47 = Word$o$(Word$zero$($46));\n            var $44 = $47;\n        };\n        return $44;\n    };\n    const Word$zero = x0 => Word$zero$(x0);\n    const U32$zero = U32$new$(Word$zero$(32n));\n    const Buffer32$alloc = a0 => (new Uint32Array(2 ** Number(a0)));\n    const Bool$false = false;\n    const Bool$true = true;\n\n    function Cmp$as_eql$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.gtn':\n                var $49 = Bool$false;\n                var $48 = $49;\n                break;\n            case 'Cmp.eql':\n                var $50 = Bool$true;\n                var $48 = $50;\n                break;\n        };\n        return $48;\n    };\n    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);\n    const Cmp$ltn = ({\n        _: 'Cmp.ltn'\n    });\n    const Cmp$gtn = ({\n        _: 'Cmp.gtn'\n    });\n\n    function Word$cmp$go$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $52 = self.pred;\n                var $53 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $55 = self.pred;\n                            var $56 = (_a$pred$10 => {\n                                var $57 = Word$cmp$go$(_a$pred$10, $55, _c$4);\n                                return $57;\n                            });\n                            var $54 = $56;\n                            break;\n                        case 'Word.i':\n                            var $58 = self.pred;\n                            var $59 = (_a$pred$10 => {\n                                var $60 = Word$cmp$go$(_a$pred$10, $58, Cmp$ltn);\n                                return $60;\n                            });\n                            var $54 = $59;\n                            break;\n                        case 'Word.e':\n                            var $61 = (_a$pred$8 => {\n                                var $62 = _c$4;\n                                return $62;\n                            });\n                            var $54 = $61;\n                            break;\n                    };\n                    var $54 = $54($52);\n                    return $54;\n                });\n                var $51 = $53;\n                break;\n            case 'Word.i':\n                var $63 = self.pred;\n                var $64 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $66 = self.pred;\n                            var $67 = (_a$pred$10 => {\n                                var $68 = Word$cmp$go$(_a$pred$10, $66, Cmp$gtn);\n                                return $68;\n                            });\n                            var $65 = $67;\n                            break;\n                        case 'Word.i':\n                            var $69 = self.pred;\n                            var $70 = (_a$pred$10 => {\n                                var $71 = Word$cmp$go$(_a$pred$10, $69, _c$4);\n                                return $71;\n                            });\n                            var $65 = $70;\n                            break;\n                        case 'Word.e':\n                            var $72 = (_a$pred$8 => {\n                                var $73 = _c$4;\n                                return $73;\n                            });\n                            var $65 = $72;\n                            break;\n                    };\n                    var $65 = $65($63);\n                    return $65;\n                });\n                var $51 = $64;\n                break;\n            case 'Word.e':\n                var $74 = (_b$5 => {\n                    var $75 = _c$4;\n                    return $75;\n                });\n                var $51 = $74;\n                break;\n        };\n        var $51 = $51(_b$3);\n        return $51;\n    };\n    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);\n    const Cmp$eql = ({\n        _: 'Cmp.eql'\n    });\n\n    function Word$cmp$(_a$2, _b$3) {\n        var $76 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);\n        return $76;\n    };\n    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);\n\n    function Word$eql$(_a$2, _b$3) {\n        var $77 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));\n        return $77;\n    };\n    const Word$eql = x0 => x1 => Word$eql$(x0, x1);\n\n    function Nat$succ$(_pred$1) {\n        var $78 = 1n + _pred$1;\n        return $78;\n    };\n    const Nat$succ = x0 => Nat$succ$(x0);\n    const Nat$zero = 0n;\n    const U32$eql = a0 => a1 => (a0 === a1);\n\n    function Nat$apply$(_n$2, _f$3, _x$4) {\n        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _f$3, _x$4]\n        });\n        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);\n        var arg = [_n$2, _f$3, _x$4];\n        while (true) {\n            let [_n$2, _f$3, _x$4] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $79 = _x$4;\n                    return $79;\n                } else {\n                    var $80 = (self - 1n);\n                    var $81 = Nat$apply$($80, _f$3, _f$3(_x$4));\n                    return $81;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);\n\n    function Word$i$(_pred$2) {\n        var $82 = ({\n            _: 'Word.i',\n            'pred': _pred$2\n        });\n        return $82;\n    };\n    const Word$i = x0 => Word$i$(x0);\n\n    function Word$inc$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $84 = self.pred;\n                var $85 = Word$i$($84);\n                var $83 = $85;\n                break;\n            case 'Word.i':\n                var $86 = self.pred;\n                var $87 = Word$o$(Word$inc$($86));\n                var $83 = $87;\n                break;\n            case 'Word.e':\n                var $88 = Word$e;\n                var $83 = $88;\n                break;\n        };\n        return $83;\n    };\n    const Word$inc = x0 => Word$inc$(x0);\n\n    function U32$inc$(_a$1) {\n        var self = _a$1;\n        switch ('u32') {\n            case 'u32':\n                var $90 = u32_to_word(self);\n                var $91 = U32$new$(Word$inc$($90));\n                var $89 = $91;\n                break;\n        };\n        return $89;\n    };\n    const U32$inc = x0 => U32$inc$(x0);\n    const Nat$to_u32 = a0 => (Number(a0));\n    const U32$shr = a0 => a1 => (a0 >>> a1);\n\n    function U32$needed_depth$go$(_n$1) {\n        var self = (_n$1 === 0);\n        if (self) {\n            var $93 = 0n;\n            var $92 = $93;\n        } else {\n            var $94 = Nat$succ$(U32$needed_depth$go$((_n$1 >>> 1)));\n            var $92 = $94;\n        };\n        return $92;\n    };\n    const U32$needed_depth$go = x0 => U32$needed_depth$go$(x0);\n\n    function Word$subber$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $96 = self.pred;\n                var $97 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $99 = self.pred;\n                            var $100 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $102 = Word$i$(Word$subber$(_a$pred$10, $99, Bool$true));\n                                    var $101 = $102;\n                                } else {\n                                    var $103 = Word$o$(Word$subber$(_a$pred$10, $99, Bool$false));\n                                    var $101 = $103;\n                                };\n                                return $101;\n                            });\n                            var $98 = $100;\n                            break;\n                        case 'Word.i':\n                            var $104 = self.pred;\n                            var $105 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $107 = Word$o$(Word$subber$(_a$pred$10, $104, Bool$true));\n                                    var $106 = $107;\n                                } else {\n                                    var $108 = Word$i$(Word$subber$(_a$pred$10, $104, Bool$true));\n                                    var $106 = $108;\n                                };\n                                return $106;\n                            });\n                            var $98 = $105;\n                            break;\n                        case 'Word.e':\n                            var $109 = (_a$pred$8 => {\n                                var $110 = Word$e;\n                                return $110;\n                            });\n                            var $98 = $109;\n                            break;\n                    };\n                    var $98 = $98($96);\n                    return $98;\n                });\n                var $95 = $97;\n                break;\n            case 'Word.i':\n                var $111 = self.pred;\n                var $112 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $114 = self.pred;\n                            var $115 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $117 = Word$o$(Word$subber$(_a$pred$10, $114, Bool$false));\n                                    var $116 = $117;\n                                } else {\n                                    var $118 = Word$i$(Word$subber$(_a$pred$10, $114, Bool$false));\n                                    var $116 = $118;\n                                };\n                                return $116;\n                            });\n                            var $113 = $115;\n                            break;\n                        case 'Word.i':\n                            var $119 = self.pred;\n                            var $120 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $122 = Word$i$(Word$subber$(_a$pred$10, $119, Bool$true));\n                                    var $121 = $122;\n                                } else {\n                                    var $123 = Word$o$(Word$subber$(_a$pred$10, $119, Bool$false));\n                                    var $121 = $123;\n                                };\n                                return $121;\n                            });\n                            var $113 = $120;\n                            break;\n                        case 'Word.e':\n                            var $124 = (_a$pred$8 => {\n                                var $125 = Word$e;\n                                return $125;\n                            });\n                            var $113 = $124;\n                            break;\n                    };\n                    var $113 = $113($111);\n                    return $113;\n                });\n                var $95 = $112;\n                break;\n            case 'Word.e':\n                var $126 = (_b$5 => {\n                    var $127 = Word$e;\n                    return $127;\n                });\n                var $95 = $126;\n                break;\n        };\n        var $95 = $95(_b$3);\n        return $95;\n    };\n    const Word$subber = x0 => x1 => x2 => Word$subber$(x0, x1, x2);\n\n    function Word$sub$(_a$2, _b$3) {\n        var $128 = Word$subber$(_a$2, _b$3, Bool$false);\n        return $128;\n    };\n    const Word$sub = x0 => x1 => Word$sub$(x0, x1);\n    const U32$sub = a0 => a1 => (Math.max(a0 - a1, 0));\n\n    function U32$needed_depth$(_size$1) {\n        var $129 = U32$needed_depth$go$((Math.max(_size$1 - 1, 0)));\n        return $129;\n    };\n    const U32$needed_depth = x0 => U32$needed_depth$(x0);\n\n    function Word$mul$(_a$2, _b$3) {\n        var Word$mul$ = (_a$2, _b$3) => ({\n            ctr: 'TCO',\n            arg: [_a$2, _b$3]\n        });\n        var Word$mul = _a$2 => _b$3 => Word$mul$(_a$2, _b$3);\n        var arg = [_a$2, _b$3];\n        while (true) {\n            let [_a$2, _b$3] = arg;\n            var R = Word$mul$(_a$2, _b$3);\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$mul = x0 => x1 => Word$mul$(x0, x1);\n    const U32$mul = a0 => a1 => ((a0 * a1) >>> 0);\n\n    function Image3D$new$(_length$1, _capacity$2, _buffer$3) {\n        var $130 = ({\n            _: 'Image3D.new',\n            'length': _length$1,\n            'capacity': _capacity$2,\n            'buffer': _buffer$3\n        });\n        return $130;\n    };\n    const Image3D$new = x0 => x1 => x2 => Image3D$new$(x0, x1, x2);\n\n    function Image3D$alloc_capacity$(_capacity$1) {\n        var _buffer$2 = (new Uint32Array(2 ** Number(U32$needed_depth$(((2 * _capacity$1) >>> 0)))));\n        var $131 = Image3D$new$(0, _capacity$1, _buffer$2);\n        return $131;\n    };\n    const Image3D$alloc_capacity = x0 => Image3D$alloc_capacity$(x0);\n    const Map$new = ({\n        _: 'Map.new'\n    });\n\n    function Word$adder$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $133 = self.pred;\n                var $134 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $136 = self.pred;\n                            var $137 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $139 = Word$i$(Word$adder$(_a$pred$10, $136, Bool$false));\n                                    var $138 = $139;\n                                } else {\n                                    var $140 = Word$o$(Word$adder$(_a$pred$10, $136, Bool$false));\n                                    var $138 = $140;\n                                };\n                                return $138;\n                            });\n                            var $135 = $137;\n                            break;\n                        case 'Word.i':\n                            var $141 = self.pred;\n                            var $142 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $144 = Word$o$(Word$adder$(_a$pred$10, $141, Bool$true));\n                                    var $143 = $144;\n                                } else {\n                                    var $145 = Word$i$(Word$adder$(_a$pred$10, $141, Bool$false));\n                                    var $143 = $145;\n                                };\n                                return $143;\n                            });\n                            var $135 = $142;\n                            break;\n                        case 'Word.e':\n                            var $146 = (_a$pred$8 => {\n                                var $147 = Word$e;\n                                return $147;\n                            });\n                            var $135 = $146;\n                            break;\n                    };\n                    var $135 = $135($133);\n                    return $135;\n                });\n                var $132 = $134;\n                break;\n            case 'Word.i':\n                var $148 = self.pred;\n                var $149 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $151 = self.pred;\n                            var $152 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $154 = Word$o$(Word$adder$(_a$pred$10, $151, Bool$true));\n                                    var $153 = $154;\n                                } else {\n                                    var $155 = Word$i$(Word$adder$(_a$pred$10, $151, Bool$false));\n                                    var $153 = $155;\n                                };\n                                return $153;\n                            });\n                            var $150 = $152;\n                            break;\n                        case 'Word.i':\n                            var $156 = self.pred;\n                            var $157 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $159 = Word$i$(Word$adder$(_a$pred$10, $156, Bool$true));\n                                    var $158 = $159;\n                                } else {\n                                    var $160 = Word$o$(Word$adder$(_a$pred$10, $156, Bool$true));\n                                    var $158 = $160;\n                                };\n                                return $158;\n                            });\n                            var $150 = $157;\n                            break;\n                        case 'Word.e':\n                            var $161 = (_a$pred$8 => {\n                                var $162 = Word$e;\n                                return $162;\n                            });\n                            var $150 = $161;\n                            break;\n                    };\n                    var $150 = $150($148);\n                    return $150;\n                });\n                var $132 = $149;\n                break;\n            case 'Word.e':\n                var $163 = (_b$5 => {\n                    var $164 = Word$e;\n                    return $164;\n                });\n                var $132 = $163;\n                break;\n        };\n        var $132 = $132(_b$3);\n        return $132;\n    };\n    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);\n\n    function Word$add$(_a$2, _b$3) {\n        var $165 = Word$adder$(_a$2, _b$3, Bool$false);\n        return $165;\n    };\n    const Word$add = x0 => x1 => Word$add$(x0, x1);\n    const U32$add = a0 => a1 => ((a0 + a1) >>> 0);\n\n    function List$ifor_u32$(_xs$2, _b$4, _f$5) {\n        var List$ifor_u32$ = (_xs$2, _b$4, _f$5) => ({\n            ctr: 'TCO',\n            arg: [_xs$2, _b$4, _f$5]\n        });\n        var List$ifor_u32 = _xs$2 => _b$4 => _f$5 => List$ifor_u32$(_xs$2, _b$4, _f$5);\n        var arg = [_xs$2, _b$4, _f$5];\n        while (true) {\n            let [_xs$2, _b$4, _f$5] = arg;\n            var R = (() => {\n                var self = _xs$2;\n                switch (self._) {\n                    case 'List.cons':\n                        var $166 = self.head;\n                        var $167 = self.tail;\n                        var $168 = List$ifor_u32$($167, _f$5(0)($166)(_b$4), (_n$8 => {\n                            var $169 = _f$5(((_n$8 + 1) >>> 0));\n                            return $169;\n                        }));\n                        return $168;\n                    case 'List.nil':\n                        var $170 = _b$4;\n                        return $170;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$ifor_u32 = x0 => x1 => x2 => List$ifor_u32$(x0, x1, x2);\n\n    function List$(_A$1) {\n        var $171 = null;\n        return $171;\n    };\n    const List = x0 => List$(x0);\n\n    function Map$(_A$1) {\n        var $172 = null;\n        return $172;\n    };\n    const Map = x0 => Map$(x0);\n    const Mons$Map$new = Map$new;\n\n    function List$length_u32_go$(_xs$2, _n$3) {\n        var List$length_u32_go$ = (_xs$2, _n$3) => ({\n            ctr: 'TCO',\n            arg: [_xs$2, _n$3]\n        });\n        var List$length_u32_go = _xs$2 => _n$3 => List$length_u32_go$(_xs$2, _n$3);\n        var arg = [_xs$2, _n$3];\n        while (true) {\n            let [_xs$2, _n$3] = arg;\n            var R = (() => {\n                var self = _xs$2;\n                switch (self._) {\n                    case 'List.cons':\n                        var $173 = self.tail;\n                        var $174 = List$length_u32_go$($173, ((1 + _n$3) >>> 0));\n                        return $174;\n                    case 'List.nil':\n                        var $175 = _n$3;\n                        return $175;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$length_u32_go = x0 => x1 => List$length_u32_go$(x0, x1);\n\n    function List$length_u32$(_xs$2) {\n        var $176 = List$length_u32_go$(_xs$2, 0);\n        return $176;\n    };\n    const List$length_u32 = x0 => List$length_u32$(x0);\n    const U32$for = a0 => a1 => a2 => a3 => (u32_for(a0, a1, a2, a3));\n\n    function Word$div$(_a$2, _b$3) {\n        var Word$div$ = (_a$2, _b$3) => ({\n            ctr: 'TCO',\n            arg: [_a$2, _b$3]\n        });\n        var Word$div = _a$2 => _b$3 => Word$div$(_a$2, _b$3);\n        var arg = [_a$2, _b$3];\n        while (true) {\n            let [_a$2, _b$3] = arg;\n            var R = Word$div$(_a$2, _b$3);\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$div = x0 => x1 => Word$div$(x0, x1);\n    const U32$div = a0 => a1 => ((a0 / a1) >>> 0);\n\n    function Word$or$(_a$2, _b$3) {\n        var Word$or$ = (_a$2, _b$3) => ({\n            ctr: 'TCO',\n            arg: [_a$2, _b$3]\n        });\n        var Word$or = _a$2 => _b$3 => Word$or$(_a$2, _b$3);\n        var arg = [_a$2, _b$3];\n        while (true) {\n            let [_a$2, _b$3] = arg;\n            var R = Word$or$(_a$2, _b$3);\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$or = x0 => x1 => Word$or$(x0, x1);\n    const U32$or = a0 => a1 => (a0 | a1);\n    const U32$shl = a0 => a1 => (a0 << a1);\n    const Pos32$new = a0 => a1 => a2 => ((0 | a0 | (a1 << 12) | (a2 << 24)));\n\n    function Word$fold$(_nil$3, _w0$4, _w1$5, _word$6) {\n        var self = _word$6;\n        switch (self._) {\n            case 'Word.o':\n                var $178 = self.pred;\n                var $179 = _w0$4(Word$fold$(_nil$3, _w0$4, _w1$5, $178));\n                var $177 = $179;\n                break;\n            case 'Word.i':\n                var $180 = self.pred;\n                var $181 = _w1$5(Word$fold$(_nil$3, _w0$4, _w1$5, $180));\n                var $177 = $181;\n                break;\n            case 'Word.e':\n                var $182 = _nil$3;\n                var $177 = $182;\n                break;\n        };\n        return $177;\n    };\n    const Word$fold = x0 => x1 => x2 => x3 => Word$fold$(x0, x1, x2, x3);\n    const Nat$add = a0 => a1 => (a0 + a1);\n    const Nat$mul = a0 => a1 => (a0 * a1);\n\n    function Word$to_nat$(_word$2) {\n        var $183 = Word$fold$(0n, a1 => (2n * a1), (_x$4 => {\n            var $184 = Nat$succ$((2n * _x$4));\n            return $184;\n        }), _word$2);\n        return $183;\n    };\n    const Word$to_nat = x0 => Word$to_nat$(x0);\n\n    function U32$to_nat$(_a$1) {\n        var self = _a$1;\n        switch ('u32') {\n            case 'u32':\n                var $186 = u32_to_word(self);\n                var $187 = Word$to_nat$($186);\n                var $185 = $187;\n                break;\n        };\n        return $185;\n    };\n    const U32$to_nat = x0 => U32$to_nat$(x0);\n    const String$nil = '';\n\n    function String$cons$(_head$1, _tail$2) {\n        var $188 = (String.fromCharCode(_head$1) + _tail$2);\n        return $188;\n    };\n    const String$cons = x0 => x1 => String$cons$(x0, x1);\n\n    function String$take$(_n$1, _xs$2) {\n        var self = _xs$2;\n        if (self.length === 0) {\n            var $190 = String$nil;\n            var $189 = $190;\n        } else {\n            var $191 = self.charCodeAt(0);\n            var $192 = self.slice(1);\n            var self = _n$1;\n            if (self === 0n) {\n                var $194 = String$nil;\n                var $193 = $194;\n            } else {\n                var $195 = (self - 1n);\n                var $196 = String$cons$($191, String$take$($195, $192));\n                var $193 = $196;\n            };\n            var $189 = $193;\n        };\n        return $189;\n    };\n    const String$take = x0 => x1 => String$take$(x0, x1);\n    const Nat$sub = a0 => a1 => (a0 - a1 <= 0n ? 0n : a0 - a1);\n\n    function String$drop$(_n$1, _xs$2) {\n        var String$drop$ = (_n$1, _xs$2) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _xs$2]\n        });\n        var String$drop = _n$1 => _xs$2 => String$drop$(_n$1, _xs$2);\n        var arg = [_n$1, _xs$2];\n        while (true) {\n            let [_n$1, _xs$2] = arg;\n            var R = (() => {\n                var self = _n$1;\n                if (self === 0n) {\n                    var $197 = _xs$2;\n                    return $197;\n                } else {\n                    var $198 = (self - 1n);\n                    var self = _xs$2;\n                    if (self.length === 0) {\n                        var $200 = String$nil;\n                        var $199 = $200;\n                    } else {\n                        var $201 = self.charCodeAt(0);\n                        var $202 = self.slice(1);\n                        var $203 = String$drop$($198, $202);\n                        var $199 = $203;\n                    };\n                    return $199;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const String$drop = x0 => x1 => String$drop$(x0, x1);\n\n    function String$slice$(_i$1, _j$2, _xs$3) {\n        var $204 = String$take$((_j$2 - _i$1 <= 0n ? 0n : _j$2 - _i$1), String$drop$(_i$1, _xs$3));\n        return $204;\n    };\n    const String$slice = x0 => x1 => x2 => String$slice$(x0, x1, x2);\n\n    function Map$tie$(_val$2, _lft$3, _rgt$4) {\n        var $205 = ({\n            _: 'Map.tie',\n            'val': _val$2,\n            'lft': _lft$3,\n            'rgt': _rgt$4\n        });\n        return $205;\n    };\n    const Map$tie = x0 => x1 => x2 => Map$tie$(x0, x1, x2);\n\n    function Maybe$some$(_value$2) {\n        var $206 = ({\n            _: 'Maybe.some',\n            'value': _value$2\n        });\n        return $206;\n    };\n    const Maybe$some = x0 => Maybe$some$(x0);\n    const Maybe$none = ({\n        _: 'Maybe.none'\n    });\n\n    function Map$set$(_bits$2, _val$3, _map$4) {\n        var self = _bits$2;\n        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n            case 'o':\n                var $208 = self.slice(0, -1);\n                var self = _map$4;\n                switch (self._) {\n                    case 'Map.tie':\n                        var $210 = self.val;\n                        var $211 = self.lft;\n                        var $212 = self.rgt;\n                        var $213 = Map$tie$($210, Map$set$($208, _val$3, $211), $212);\n                        var $209 = $213;\n                        break;\n                    case 'Map.new':\n                        var $214 = Map$tie$(Maybe$none, Map$set$($208, _val$3, Map$new), Map$new);\n                        var $209 = $214;\n                        break;\n                };\n                var $207 = $209;\n                break;\n            case 'i':\n                var $215 = self.slice(0, -1);\n                var self = _map$4;\n                switch (self._) {\n                    case 'Map.tie':\n                        var $217 = self.val;\n                        var $218 = self.lft;\n                        var $219 = self.rgt;\n                        var $220 = Map$tie$($217, $218, Map$set$($215, _val$3, $219));\n                        var $216 = $220;\n                        break;\n                    case 'Map.new':\n                        var $221 = Map$tie$(Maybe$none, Map$new, Map$set$($215, _val$3, Map$new));\n                        var $216 = $221;\n                        break;\n                };\n                var $207 = $216;\n                break;\n            case 'e':\n                var self = _map$4;\n                switch (self._) {\n                    case 'Map.tie':\n                        var $223 = self.lft;\n                        var $224 = self.rgt;\n                        var $225 = Map$tie$(Maybe$some$(_val$3), $223, $224);\n                        var $222 = $225;\n                        break;\n                    case 'Map.new':\n                        var $226 = Map$tie$(Maybe$some$(_val$3), Map$new, Map$new);\n                        var $222 = $226;\n                        break;\n                };\n                var $207 = $222;\n                break;\n        };\n        return $207;\n    };\n    const Map$set = x0 => x1 => x2 => Map$set$(x0, x1, x2);\n    const Bits$e = '';\n    const Bits$o = a0 => (a0 + '0');\n    const Bits$i = a0 => (a0 + '1');\n\n    function Word$to_bits$(_a$2) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $228 = self.pred;\n                var $229 = (Word$to_bits$($228) + '0');\n                var $227 = $229;\n                break;\n            case 'Word.i':\n                var $230 = self.pred;\n                var $231 = (Word$to_bits$($230) + '1');\n                var $227 = $231;\n                break;\n            case 'Word.e':\n                var $232 = Bits$e;\n                var $227 = $232;\n                break;\n        };\n        return $227;\n    };\n    const Word$to_bits = x0 => Word$to_bits$(x0);\n\n    function U32$to_bits$(_a$1) {\n        var self = _a$1;\n        switch ('u32') {\n            case 'u32':\n                var $234 = u32_to_word(self);\n                var $235 = Word$to_bits$($234);\n                var $233 = $235;\n                break;\n        };\n        return $233;\n    };\n    const U32$to_bits = x0 => U32$to_bits$(x0);\n\n    function Mons$Map$set_list$(_pos$1, _objs$2, _map$3) {\n        var $236 = Map$set$(U32$to_bits$(_pos$1), _objs$2, _map$3);\n        return $236;\n    };\n    const Mons$Map$set_list = x0 => x1 => x2 => Mons$Map$set_list$(x0, x1, x2);\n\n    function Mons$Object$new$(_kin$1, _dir$2, _pad$3, _ani$4, _dmg$5, _bag$6, _mon$7, _bos$8, _cap$9, _idl$10, _eff$11) {\n        var $237 = ({\n            _: 'Mons.Object.new',\n            'kin': _kin$1,\n            'dir': _dir$2,\n            'pad': _pad$3,\n            'ani': _ani$4,\n            'dmg': _dmg$5,\n            'bag': _bag$6,\n            'mon': _mon$7,\n            'bos': _bos$8,\n            'cap': _cap$9,\n            'idl': _idl$10,\n            'eff': _eff$11\n        });\n        return $237;\n    };\n    const Mons$Object$new = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => x10 => Mons$Object$new$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);\n    const Mons$Dir$down = ({\n        _: 'Mons.Dir.down'\n    });\n\n    function Mons$Pad$new$(_r$1, _u$2, _l$3, _d$4) {\n        var $238 = ({\n            _: 'Mons.Pad.new',\n            'r': _r$1,\n            'u': _u$2,\n            'l': _l$3,\n            'd': _d$4\n        });\n        return $238;\n    };\n    const Mons$Pad$new = x0 => x1 => x2 => x3 => Mons$Pad$new$(x0, x1, x2, x3);\n    const Mons$Pad$null = Mons$Pad$new$(Bool$false, Bool$false, Bool$false, Bool$false);\n    const List$nil = ({\n        _: 'List.nil'\n    });\n\n    function Pair$new$(_fst$3, _snd$4) {\n        var $239 = ({\n            _: 'Pair.new',\n            'fst': _fst$3,\n            'snd': _snd$4\n        });\n        return $239;\n    };\n    const Pair$new = x0 => x1 => Pair$new$(x0, x1);\n\n    function Mons$Effect$new$(_sleep$1, _burn$2, _protect$3, _minimize$4, _invulnerable$5, _hit$6, _poison$7, _swap_agi$8) {\n        var $240 = ({\n            _: 'Mons.Effect.new',\n            'sleep': _sleep$1,\n            'burn': _burn$2,\n            'protect': _protect$3,\n            'minimize': _minimize$4,\n            'invulnerable': _invulnerable$5,\n            'hit': _hit$6,\n            'poison': _poison$7,\n            'swap_agi': _swap_agi$8\n        });\n        return $240;\n    };\n    const Mons$Effect$new = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Mons$Effect$new$(x0, x1, x2, x3, x4, x5, x6, x7);\n    const Mons$Effect$clear = (() => {\n        var _clean$1 = Pair$new$(0, Bool$false);\n        var _clean_bool$2 = Pair$new$(Bool$false, Bool$false);\n        var $241 = Mons$Effect$new$(_clean$1, 0, _clean$1, _clean$1, _clean_bool$2, 0, Bool$false, Bool$false);\n        return $241;\n    })();\n\n    function Mons$Object$new_of_kind$(_kin$1) {\n        var $242 = Mons$Object$new$(_kin$1, Mons$Dir$down, Mons$Pad$null, 0, 0, List$nil, 0, List$nil, Pair$new$(11, List$nil), 0, Mons$Effect$clear);\n        return $242;\n    };\n    const Mons$Object$new_of_kind = x0 => Mons$Object$new_of_kind$(x0);\n\n    function Mons$Kind$Terrain$(_ele$1) {\n        var $243 = ({\n            _: 'Mons.Kind.Terrain',\n            'ele': _ele$1\n        });\n        return $243;\n    };\n    const Mons$Kind$Terrain = x0 => Mons$Kind$Terrain$(x0);\n\n    function Mons$Kind$new_terrain$(_kin$1) {\n        var $244 = Mons$Object$new_of_kind$(Mons$Kind$Terrain$(_kin$1));\n        return $244;\n    };\n    const Mons$Kind$new_terrain = x0 => Mons$Kind$new_terrain$(x0);\n\n    function Mons$Kind$terrain$FLOOR$(_lvl$1, _model$2) {\n        var $245 = ({\n            _: 'Mons.Kind.terrain.FLOOR',\n            'lvl': _lvl$1,\n            'model': _model$2\n        });\n        return $245;\n    };\n    const Mons$Kind$terrain$FLOOR = x0 => x1 => Mons$Kind$terrain$FLOOR$(x0, x1);\n\n    function Mons$Kind$terrain$PATH_BLOCKER$(_lvl$1, _model$2) {\n        var $246 = ({\n            _: 'Mons.Kind.terrain.PATH_BLOCKER',\n            'lvl': _lvl$1,\n            'model': _model$2\n        });\n        return $246;\n    };\n    const Mons$Kind$terrain$PATH_BLOCKER = x0 => x1 => Mons$Kind$terrain$PATH_BLOCKER$(x0, x1);\n    const Bool$and = a0 => a1 => (a0 && a1);\n    const U16$eql = a0 => a1 => (a0 === a1);\n    const String$eql = a0 => a1 => (a0 === a1);\n\n    function Mons$Map$code_to_tile$aux$(_code$1, _cond$2) {\n        var Mons$Map$code_to_tile$aux$ = (_code$1, _cond$2) => ({\n            ctr: 'TCO',\n            arg: [_code$1, _cond$2]\n        });\n        var Mons$Map$code_to_tile$aux = _code$1 => _cond$2 => Mons$Map$code_to_tile$aux$(_code$1, _cond$2);\n        var arg = [_code$1, _cond$2];\n        while (true) {\n            let [_code$1, _cond$2] = arg;\n            var R = (() => {\n                var self = _cond$2;\n                switch (self._) {\n                    case 'List.cons':\n                        var $247 = self.head;\n                        var $248 = self.tail;\n                        var self = $247;\n                        switch (self._) {\n                            case 'Pair.new':\n                                var $250 = self.fst;\n                                var $251 = self.snd;\n                                var self = (_code$1 === $250);\n                                if (self) {\n                                    var $253 = $251;\n                                    var $252 = $253;\n                                } else {\n                                    var $254 = Mons$Map$code_to_tile$aux$(_code$1, $248);\n                                    var $252 = $254;\n                                };\n                                var $249 = $252;\n                                break;\n                        };\n                        return $249;\n                    case 'List.nil':\n                        var $255 = List$nil;\n                        return $255;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Mons$Map$code_to_tile$aux = x0 => x1 => Mons$Map$code_to_tile$aux$(x0, x1);\n\n    function List$cons$(_head$2, _tail$3) {\n        var $256 = ({\n            _: 'List.cons',\n            'head': _head$2,\n            'tail': _tail$3\n        });\n        return $256;\n    };\n    const List$cons = x0 => x1 => List$cons$(x0, x1);\n\n    function Pair$(_A$1, _B$2) {\n        var $257 = null;\n        return $257;\n    };\n    const Pair = x0 => x1 => Pair$(x0, x1);\n\n    function Mons$Kind$Mons$(_ele$1, _boss$2, _pri_type$3, _agi$4) {\n        var $258 = ({\n            _: 'Mons.Kind.Mons',\n            'ele': _ele$1,\n            'boss': _boss$2,\n            'pri_type': _pri_type$3,\n            'agi': _agi$4\n        });\n        return $258;\n    };\n    const Mons$Kind$Mons = x0 => x1 => x2 => x3 => Mons$Kind$Mons$(x0, x1, x2, x3);\n\n    function Mons$Kind$new_mons$(_kin$1, _type$2, _agi$3) {\n        var $259 = List$cons$(Mons$Object$new_of_kind$(Mons$Kind$Mons$(_kin$1, Bool$false, _type$2, _agi$3)), List$nil);\n        return $259;\n    };\n    const Mons$Kind$new_mons = x0 => x1 => x2 => Mons$Kind$new_mons$(x0, x1, x2);\n    const Mons$Kind$mons$MAGE = ({\n        _: 'Mons.Kind.mons.MAGE'\n    });\n    const Mons$Type$normal = ({\n        _: 'Mons.Type.normal'\n    });\n\n    function Mons$Kind$Const$(_ele$1) {\n        var $260 = ({\n            _: 'Mons.Kind.Const',\n            'ele': _ele$1\n        });\n        return $260;\n    };\n    const Mons$Kind$Const = x0 => Mons$Kind$Const$(x0);\n\n    function Mons$Kind$new_const$(_kin$1) {\n        var $261 = Mons$Object$new_of_kind$(Mons$Kind$Const$(_kin$1));\n        return $261;\n    };\n    const Mons$Kind$new_const = x0 => Mons$Kind$new_const$(x0);\n    const Mons$Kind$const$CRYSTAL = ({\n        _: 'Mons.Kind.const.CRYSTAL'\n    });\n\n    function Mons$Kind$const$FOUNTAIN$(_model$1, _slice$2) {\n        var $262 = ({\n            _: 'Mons.Kind.const.FOUNTAIN',\n            'model': _model$1,\n            'slice': _slice$2\n        });\n        return $262;\n    };\n    const Mons$Kind$const$FOUNTAIN = x0 => x1 => Mons$Kind$const$FOUNTAIN$(x0, x1);\n    const Mons$Kind$const$PORTAL = ({\n        _: 'Mons.Kind.const.PORTAL'\n    });\n    const Mons$Kind$terrain$VOID_BLACK = ({\n        _: 'Mons.Kind.terrain.VOID_BLACK'\n    });\n\n    function Mons$Kind$terrain$MID_CITY$(_row$1, _column$2) {\n        var $263 = ({\n            _: 'Mons.Kind.terrain.MID_CITY',\n            'row': _row$1,\n            'column': _column$2\n        });\n        return $263;\n    };\n    const Mons$Kind$terrain$MID_CITY = x0 => x1 => Mons$Kind$terrain$MID_CITY$(x0, x1);\n\n    function Mons$Kind$terrain$STAIRS$(_row$1, _column$2) {\n        var $264 = ({\n            _: 'Mons.Kind.terrain.STAIRS',\n            'row': _row$1,\n            'column': _column$2\n        });\n        return $264;\n    };\n    const Mons$Kind$terrain$STAIRS = x0 => x1 => Mons$Kind$terrain$STAIRS$(x0, x1);\n\n    function Mons$Kind$Interactive$(_ele$1, _on$2, _eff$3) {\n        var $265 = ({\n            _: 'Mons.Kind.Interactive',\n            'ele': _ele$1,\n            'on': _on$2,\n            'eff': _eff$3\n        });\n        return $265;\n    };\n    const Mons$Kind$Interactive = x0 => x1 => x2 => Mons$Kind$Interactive$(x0, x1, x2);\n\n    function Mons$Kind$new_interactive_tool$(_kin$1, _stt$2, _fun$3) {\n        var $266 = Mons$Object$new_of_kind$(Mons$Kind$Interactive$(_kin$1, _stt$2, _fun$3));\n        return $266;\n    };\n    const Mons$Kind$new_interactive_tool = x0 => x1 => x2 => Mons$Kind$new_interactive_tool$(x0, x1, x2);\n    const Mons$Kind$inter$HEAL = ({\n        _: 'Mons.Kind.inter.HEAL'\n    });\n\n    function Maybe$(_A$1) {\n        var $267 = null;\n        return $267;\n    };\n    const Maybe = x0 => Maybe$(x0);\n\n    function Map$get$(_bits$2, _map$3) {\n        var Map$get$ = (_bits$2, _map$3) => ({\n            ctr: 'TCO',\n            arg: [_bits$2, _map$3]\n        });\n        var Map$get = _bits$2 => _map$3 => Map$get$(_bits$2, _map$3);\n        var arg = [_bits$2, _map$3];\n        while (true) {\n            let [_bits$2, _map$3] = arg;\n            var R = (() => {\n                var self = _bits$2;\n                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                    case 'o':\n                        var $268 = self.slice(0, -1);\n                        var self = _map$3;\n                        switch (self._) {\n                            case 'Map.tie':\n                                var $270 = self.lft;\n                                var $271 = Map$get$($268, $270);\n                                var $269 = $271;\n                                break;\n                            case 'Map.new':\n                                var $272 = Maybe$none;\n                                var $269 = $272;\n                                break;\n                        };\n                        return $269;\n                    case 'i':\n                        var $273 = self.slice(0, -1);\n                        var self = _map$3;\n                        switch (self._) {\n                            case 'Map.tie':\n                                var $275 = self.rgt;\n                                var $276 = Map$get$($273, $275);\n                                var $274 = $276;\n                                break;\n                            case 'Map.new':\n                                var $277 = Maybe$none;\n                                var $274 = $277;\n                                break;\n                        };\n                        return $274;\n                    case 'e':\n                        var self = _map$3;\n                        switch (self._) {\n                            case 'Map.tie':\n                                var $279 = self.val;\n                                var $280 = $279;\n                                var $278 = $280;\n                                break;\n                            case 'Map.new':\n                                var $281 = Maybe$none;\n                                var $278 = $281;\n                                break;\n                        };\n                        return $278;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Map$get = x0 => x1 => Map$get$(x0, x1);\n\n    function Mons$Game$get_user_pos$(_user$1, _game$2) {\n        var self = _game$2;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $283 = self.pos;\n                var $284 = Map$get$(Word$to_bits$(_user$1), $283);\n                var $282 = $284;\n                break;\n        };\n        return $282;\n    };\n    const Mons$Game$get_user_pos = x0 => x1 => Mons$Game$get_user_pos$(x0, x1);\n\n    function Mons$Game$get_hero_pos$(_game$1) {\n        var self = _game$1;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $286 = self.usr;\n                var $287 = Mons$Game$get_user_pos$($286, _game$1);\n                var $285 = $287;\n                break;\n        };\n        return $285;\n    };\n    const Mons$Game$get_hero_pos = x0 => Mons$Game$get_hero_pos$(x0);\n\n    function Word$and$(_a$2, _b$3) {\n        var Word$and$ = (_a$2, _b$3) => ({\n            ctr: 'TCO',\n            arg: [_a$2, _b$3]\n        });\n        var Word$and = _a$2 => _b$3 => Word$and$(_a$2, _b$3);\n        var arg = [_a$2, _b$3];\n        while (true) {\n            let [_a$2, _b$3] = arg;\n            var R = Word$and$(_a$2, _b$3);\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$and = x0 => x1 => Word$and$(x0, x1);\n    const U32$and = a0 => a1 => (a0 & a1);\n    const Pos32$get_x = a0 => ((a0 & 0xFFF));\n    const Pos32$get_y = a0 => (((a0 >>> 12) & 0xFFF));\n    const Pos32$get_z = a0 => ((a0 >>> 24));\n\n    function Mons$Map$get_list$(_pos$1, _map$2) {\n        var self = Map$get$(U32$to_bits$(_pos$1), _map$2);\n        switch (self._) {\n            case 'Maybe.some':\n                var $289 = self.value;\n                var $290 = $289;\n                var $288 = $290;\n                break;\n            case 'Maybe.none':\n                var $291 = List$nil;\n                var $288 = $291;\n                break;\n        };\n        return $288;\n    };\n    const Mons$Map$get_list = x0 => x1 => Mons$Map$get_list$(x0, x1);\n\n    function Mons$Kind$is_hero$(_kind$1) {\n        var self = _kind$1;\n        switch (self._) {\n            case 'Mons.Kind.Mons':\n                var $293 = self.ele;\n                var self = $293;\n                switch (self._) {\n                    case 'Mons.Kind.mons.HERO':\n                        var $295 = Bool$true;\n                        var $294 = $295;\n                        break;\n                    case 'Mons.Kind.mons.MAGE':\n                    case 'Mons.Kind.mons.BEHOLDER':\n                    case 'Mons.Kind.mons.ZOIO':\n                    case 'Mons.Kind.mons.CYCLOPE':\n                    case 'Mons.Kind.mons.POISOLICK':\n                    case 'Mons.Kind.mons.TROWL':\n                    case 'Mons.Kind.mons.MIMIC':\n                    case 'Mons.Kind.mons.MIMIC2':\n                    case 'Mons.Kind.mons.AZULA':\n                    case 'Mons.Kind.mons.EMERELDER':\n                    case 'Mons.Kind.mons.EMERELDER2':\n                        var $296 = Bool$false;\n                        var $294 = $296;\n                        break;\n                };\n                var $292 = $294;\n                break;\n            case 'Mons.Kind.Const':\n            case 'Mons.Kind.Terrain':\n            case 'Mons.Kind.Interactive':\n                var $297 = Bool$false;\n                var $292 = $297;\n                break;\n        };\n        return $292;\n    };\n    const Mons$Kind$is_hero = x0 => Mons$Kind$is_hero$(x0);\n\n    function Mons$Object$get_kin$(_obj$1) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $299 = self.kin;\n                var $300 = $299;\n                var $298 = $300;\n                break;\n        };\n        return $298;\n    };\n    const Mons$Object$get_kin = x0 => Mons$Object$get_kin$(x0);\n\n    function List$ifind$go$(_xs$2, _f$3, _i$4) {\n        var List$ifind$go$ = (_xs$2, _f$3, _i$4) => ({\n            ctr: 'TCO',\n            arg: [_xs$2, _f$3, _i$4]\n        });\n        var List$ifind$go = _xs$2 => _f$3 => _i$4 => List$ifind$go$(_xs$2, _f$3, _i$4);\n        var arg = [_xs$2, _f$3, _i$4];\n        while (true) {\n            let [_xs$2, _f$3, _i$4] = arg;\n            var R = (() => {\n                var self = _xs$2;\n                switch (self._) {\n                    case 'List.cons':\n                        var $301 = self.head;\n                        var $302 = self.tail;\n                        var self = _f$3($301)(_i$4);\n                        if (self) {\n                            var $304 = Maybe$some$(Pair$new$($301, _i$4));\n                            var $303 = $304;\n                        } else {\n                            var $305 = List$ifind$go$($302, _f$3, Nat$succ$(_i$4));\n                            var $303 = $305;\n                        };\n                        return $303;\n                    case 'List.nil':\n                        var $306 = Maybe$none;\n                        return $306;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$ifind$go = x0 => x1 => x2 => List$ifind$go$(x0, x1, x2);\n\n    function List$ifind$(_xs$2, _f$3) {\n        var $307 = List$ifind$go$(_xs$2, _f$3, Nat$zero);\n        return $307;\n    };\n    const List$ifind = x0 => x1 => List$ifind$(x0, x1);\n    const Mons$Kind$terrain$VOID = ({\n        _: 'Mons.Kind.terrain.VOID'\n    });\n    const Mons$Object$void = (() => {\n        var _void$1 = Mons$Kind$Terrain$(Mons$Kind$terrain$VOID);\n        var $308 = Mons$Object$new$(_void$1, Mons$Dir$down, Mons$Pad$null, 0, 0, List$nil, 0, List$nil, Pair$new$(33, List$nil), 0, Mons$Effect$clear);\n        return $308;\n    })();\n\n    function Pair$fst$(_pair$3) {\n        var self = _pair$3;\n        switch (self._) {\n            case 'Pair.new':\n                var $310 = self.fst;\n                var $311 = $310;\n                var $309 = $311;\n                break;\n        };\n        return $309;\n    };\n    const Pair$fst = x0 => Pair$fst$(x0);\n\n    function Pair$snd$(_pair$3) {\n        var self = _pair$3;\n        switch (self._) {\n            case 'Pair.new':\n                var $313 = self.snd;\n                var $314 = $313;\n                var $312 = $314;\n                break;\n        };\n        return $312;\n    };\n    const Pair$snd = x0 => Pair$snd$(x0);\n\n    function Mons$Map$get_hero$(_pos$1, _map$2) {\n        var _tile$3 = Mons$Map$get_list$(_pos$1, _map$2);\n        var _obj_is_hero$4 = (_obj$4 => {\n            var $316 = Mons$Kind$is_hero$(Mons$Object$get_kin$(_obj$4));\n            return $316;\n        });\n        var _fun$5 = (_obj$5 => _idx$6 => {\n            var $317 = _obj_is_hero$4(_obj$5);\n            return $317;\n        });\n        var _both$6 = List$ifind$(_tile$3, _fun$5);\n        var self = _both$6;\n        switch (self._) {\n            case 'Maybe.some':\n                var $318 = self.value;\n                var _hero$8 = Pair$fst$($318);\n                var _idx$9 = (Number(Pair$snd$($318)));\n                var $319 = Pair$new$(_hero$8, _idx$9);\n                var $315 = $319;\n                break;\n            case 'Maybe.none':\n                var $320 = Pair$new$(Mons$Object$void, 0);\n                var $315 = $320;\n                break;\n        };\n        return $315;\n    };\n    const Mons$Map$get_hero = x0 => x1 => Mons$Map$get_hero$(x0, x1);\n    const Mons$Kind$const$CHEST = ({\n        _: 'Mons.Kind.const.CHEST'\n    });\n\n    function Mons$Map$push$(_pos$1, _obj$2, _map$3) {\n        var _objs$4 = Mons$Map$get_list$(_pos$1, _map$3);\n        var _objs$5 = List$cons$(_obj$2, _objs$4);\n        var $321 = Mons$Map$set_list$(_pos$1, _objs$5, _map$3);\n        return $321;\n    };\n    const Mons$Map$push = x0 => x1 => x2 => Mons$Map$push$(x0, x1, x2);\n\n    function Mons$Game$new$(_usr$1, _pos$2, _map$3, _stt$4, _tik$5) {\n        var $322 = ({\n            _: 'Mons.Game.new',\n            'usr': _usr$1,\n            'pos': _pos$2,\n            'map': _map$3,\n            'stt': _stt$4,\n            'tik': _tik$5\n        });\n        return $322;\n    };\n    const Mons$Game$new = x0 => x1 => x2 => x3 => x4 => Mons$Game$new$(x0, x1, x2, x3, x4);\n\n    function Mons$Game$set_map$(_map$1, _game$2) {\n        var self = _game$2;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $324 = self.usr;\n                var $325 = self.pos;\n                var $326 = self.stt;\n                var $327 = self.tik;\n                var $328 = Mons$Game$new$($324, $325, _map$1, $326, $327);\n                var $323 = $328;\n                break;\n        };\n        return $323;\n    };\n    const Mons$Game$set_map = x0 => x1 => Mons$Game$set_map$(x0, x1);\n\n    function Mons$Game$map_push$(_pos$1, _obj$2, _game$3) {\n        var self = _game$3;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $330 = self.map;\n                var _map$9 = Mons$Map$push$(_pos$1, _obj$2, $330);\n                var $331 = Mons$Game$set_map$(_map$9, _game$3);\n                var $329 = $331;\n                break;\n        };\n        return $329;\n    };\n    const Mons$Game$map_push = x0 => x1 => x2 => Mons$Game$map_push$(x0, x1, x2);\n\n    function Mons$Object$get_adjacent_pos$(_pos$1, _dir$2, _map$3) {\n        var _x$4 = ((_pos$1 & 0xFFF));\n        var _y$5 = (((_pos$1 >>> 12) & 0xFFF));\n        var _z$6 = ((_pos$1 >>> 24));\n        var self = _dir$2;\n        switch (self._) {\n            case 'Mons.Dir.right':\n                var $333 = ((0 | ((_x$4 + 1) >>> 0) | (_y$5 << 12) | (_z$6 << 24)));\n                var $332 = $333;\n                break;\n            case 'Mons.Dir.up':\n                var $334 = ((0 | _x$4 | ((Math.max(_y$5 - 1, 0)) << 12) | (_z$6 << 24)));\n                var $332 = $334;\n                break;\n            case 'Mons.Dir.left':\n                var $335 = ((0 | (Math.max(_x$4 - 1, 0)) | (_y$5 << 12) | (_z$6 << 24)));\n                var $332 = $335;\n                break;\n            case 'Mons.Dir.down':\n                var $336 = ((0 | _x$4 | (((_y$5 + 1) >>> 0) << 12) | (_z$6 << 24)));\n                var $332 = $336;\n                break;\n        };\n        return $332;\n    };\n    const Mons$Object$get_adjacent_pos = x0 => x1 => x2 => Mons$Object$get_adjacent_pos$(x0, x1, x2);\n\n    function Mons$Game$get_tile$(_pos$1, _game$2) {\n        var self = _game$2;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $338 = self.map;\n                var $339 = Mons$Map$get_list$(_pos$1, $338);\n                var $337 = $339;\n                break;\n        };\n        return $337;\n    };\n    const Mons$Game$get_tile = x0 => x1 => Mons$Game$get_tile$(x0, x1);\n\n    function Mons$Object$get_adjacent_obj_list$(_pos$1, _dir$2, _game$3) {\n        var self = _game$3;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $341 = self.map;\n                var _adjacent_pos$9 = Mons$Object$get_adjacent_pos$(_pos$1, _dir$2, $341);\n                var $342 = Mons$Game$get_tile$(_adjacent_pos$9, _game$3);\n                var $340 = $342;\n                break;\n        };\n        return $340;\n    };\n    const Mons$Object$get_adjacent_obj_list = x0 => x1 => x2 => Mons$Object$get_adjacent_obj_list$(x0, x1, x2);\n    const Nat$eql = a0 => a1 => (a0 === a1);\n    const List$length = a0 => (list_length(a0));\n\n    function Mons$Object$can_move_forward$(_pos$1, _dir$2, _game$3) {\n        var self = _game$3;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var _adjacent_objs$9 = Mons$Object$get_adjacent_obj_list$(_pos$1, _dir$2, _game$3);\n                var $344 = ((list_length(_adjacent_objs$9)) === 1n);\n                var $343 = $344;\n                break;\n        };\n        return $343;\n    };\n    const Mons$Object$can_move_forward = x0 => x1 => x2 => Mons$Object$can_move_forward$(x0, x1, x2);\n\n    function List$tail$(_xs$2) {\n        var self = _xs$2;\n        switch (self._) {\n            case 'List.cons':\n                var $346 = self.tail;\n                var $347 = $346;\n                var $345 = $347;\n                break;\n            case 'List.nil':\n                var $348 = List$nil;\n                var $345 = $348;\n                break;\n        };\n        return $345;\n    };\n    const List$tail = x0 => List$tail$(x0);\n\n    function List$delete_at_u32$(_idx$2, _list$3) {\n        var self = (_idx$2 === 0);\n        if (self) {\n            var $350 = List$tail$(_list$3);\n            var $349 = $350;\n        } else {\n            var self = _list$3;\n            switch (self._) {\n                case 'List.cons':\n                    var $352 = self.head;\n                    var $353 = self.tail;\n                    var $354 = List$cons$($352, List$delete_at_u32$((Math.max(_idx$2 - 1, 0)), $353));\n                    var $351 = $354;\n                    break;\n                case 'List.nil':\n                    var $355 = _list$3;\n                    var $351 = $355;\n                    break;\n            };\n            var $349 = $351;\n        };\n        return $349;\n    };\n    const List$delete_at_u32 = x0 => x1 => List$delete_at_u32$(x0, x1);\n\n    function Mons$Map$del$(_pos$1, _idx$2, _map$3) {\n        var _objs$4 = Mons$Map$get_list$(_pos$1, _map$3);\n        var _objs$5 = List$delete_at_u32$(_idx$2, _objs$4);\n        var $356 = Mons$Map$set_list$(_pos$1, _objs$5, _map$3);\n        return $356;\n    };\n    const Mons$Map$del = x0 => x1 => x2 => Mons$Map$del$(x0, x1, x2);\n\n    function Mons$Game$map_del$(_pos$1, _idx$2, _game$3) {\n        var self = _game$3;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $358 = self.map;\n                var _map$9 = Mons$Map$del$(_pos$1, _idx$2, $358);\n                var $359 = Mons$Game$set_map$(_map$9, _game$3);\n                var $357 = $359;\n                break;\n        };\n        return $357;\n    };\n    const Mons$Game$map_del = x0 => x1 => x2 => Mons$Game$map_del$(x0, x1, x2);\n\n    function Mons$Object$heal_all_mons$(_obj$1) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $361 = _obj$1;\n                var $360 = $361;\n                break;\n        };\n        return $360;\n    };\n    const Mons$Object$heal_all_mons = x0 => Mons$Object$heal_all_mons$(x0);\n\n    function List$update_at$(_index$2, _fn$3, _list$4) {\n        var self = _list$4;\n        switch (self._) {\n            case 'List.cons':\n                var $363 = self.head;\n                var $364 = self.tail;\n                var self = _index$2;\n                if (self === 0n) {\n                    var $366 = List$cons$(_fn$3($363), $364);\n                    var $365 = $366;\n                } else {\n                    var $367 = (self - 1n);\n                    var $368 = List$cons$($363, List$update_at$($367, _fn$3, $364));\n                    var $365 = $368;\n                };\n                var $362 = $365;\n                break;\n            case 'List.nil':\n                var $369 = List$nil;\n                var $362 = $369;\n                break;\n        };\n        return $362;\n    };\n    const List$update_at = x0 => x1 => x2 => List$update_at$(x0, x1, x2);\n\n    function Mons$Map$set$(_pos$1, _idx$2, _val$3, _map$4) {\n        var _list$5 = Mons$Map$get_list$(_pos$1, _map$4);\n        var _list$6 = List$update_at$(U32$to_nat$(_idx$2), (_$6 => {\n            var $371 = _val$3;\n            return $371;\n        }), _list$5);\n        var $370 = Mons$Map$set_list$(_pos$1, _list$6, _map$4);\n        return $370;\n    };\n    const Mons$Map$set = x0 => x1 => x2 => x3 => Mons$Map$set$(x0, x1, x2, x3);\n\n    function Mons$Game$map_set$(_pos$1, _idx$2, _obj$3, _game$4) {\n        var self = _game$4;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $373 = self.map;\n                var _map$10 = Mons$Map$set$(_pos$1, _idx$2, _obj$3, $373);\n                var $374 = Mons$Game$set_map$(_map$10, _game$4);\n                var $372 = $374;\n                break;\n        };\n        return $372;\n    };\n    const Mons$Game$map_set = x0 => x1 => x2 => x3 => Mons$Game$map_set$(x0, x1, x2, x3);\n\n    function Mons$Kind$inter_lever_eff$(_kind$1, _on$2, _game$3) {\n        var self = Mons$Game$get_hero_pos$(_game$3);\n        switch (self._) {\n            case 'Maybe.some':\n                var $376 = self.value;\n                var _hero_pos$5 = $376;\n                var _x$6 = ((_hero_pos$5 & 0xFFF));\n                var _y$7 = (((_hero_pos$5 >>> 12) & 0xFFF));\n                var _z$8 = ((_hero_pos$5 >>> 24));\n                var self = _game$3;\n                switch (self._) {\n                    case 'Mons.Game.new':\n                        var $378 = self.map;\n                        var _map$14 = $378;\n                        var _hero_pair$15 = Mons$Map$get_hero$(_hero_pos$5, _map$14);\n                        var _hero_obj$16 = Pair$fst$(_hero_pair$15);\n                        var _hero_idx$17 = Pair$snd$(_hero_pair$15);\n                        var _obj_idx$18 = 0;\n                        var self = _hero_obj$16;\n                        switch (self._) {\n                            case 'Mons.Object.new':\n                                var $380 = self.dir;\n                                var self = _kind$1;\n                                switch (self._) {\n                                    case 'Mons.Kind.inter.LEVER':\n                                        var $382 = self.id;\n                                        var self = (_z$8 === 1);\n                                        if (self) {\n                                            var self = ($382 === 0);\n                                            if (self) {\n                                                var _sign$31 = Mons$Kind$new_const$(Mons$Kind$const$CHEST);\n                                                var _obj_pos$32 = ((0 | ((1 + _x$6) >>> 0) | ((Math.max(_y$7 - 1, 0)) << 12) | (_z$8 << 24)));\n                                                var $385 = Mons$Game$map_push$(_obj_pos$32, _sign$31, _game$3);\n                                                var $384 = $385;\n                                            } else {\n                                                var $386 = _game$3;\n                                                var $384 = $386;\n                                            };\n                                            var $383 = $384;\n                                        } else {\n                                            var $387 = _game$3;\n                                            var $383 = $387;\n                                        };\n                                        var $381 = $383;\n                                        break;\n                                    case 'Mons.Kind.inter.MOVE':\n                                        var _movable_obj_pos$30 = Mons$Object$get_adjacent_pos$(_hero_pos$5, $380, _map$14);\n                                        var self = Mons$Object$can_move_forward$(_movable_obj_pos$30, $380, _game$3);\n                                        if (self) {\n                                            var _obj$31 = Mons$Kind$new_interactive_tool$(_kind$1, Bool$true, Mons$Kind$inter_lever_eff);\n                                            var _new_pos$32 = Mons$Object$get_adjacent_pos$(_movable_obj_pos$30, $380, _map$14);\n                                            var _game$33 = Mons$Game$map_del$(_movable_obj_pos$30, _obj_idx$18, _game$3);\n                                            var $389 = Mons$Game$map_push$(_new_pos$32, _obj$31, _game$33);\n                                            var $388 = $389;\n                                        } else {\n                                            var $390 = _game$3;\n                                            var $388 = $390;\n                                        };\n                                        var $381 = $388;\n                                        break;\n                                    case 'Mons.Kind.inter.HEAL':\n                                        var self = _on$2;\n                                        if (self) {\n                                            var $392 = _game$3;\n                                            var $391 = $392;\n                                        } else {\n                                            var _hero_obj$30 = Mons$Object$heal_all_mons$(_hero_obj$16);\n                                            var $393 = Mons$Game$map_set$(_hero_pos$5, _hero_idx$17, _hero_obj$30, _game$3);\n                                            var $391 = $393;\n                                        };\n                                        var $381 = $391;\n                                        break;\n                                };\n                                var $379 = $381;\n                                break;\n                        };\n                        var $377 = $379;\n                        break;\n                };\n                var $375 = $377;\n                break;\n            case 'Maybe.none':\n                var $394 = _game$3;\n                var $375 = $394;\n                break;\n        };\n        return $375;\n    };\n    const Mons$Kind$inter_lever_eff = x0 => x1 => x2 => Mons$Kind$inter_lever_eff$(x0, x1, x2);\n\n    function Mons$Kind$inter$LEVER$(_id$1) {\n        var $395 = ({\n            _: 'Mons.Kind.inter.LEVER',\n            'id': _id$1\n        });\n        return $395;\n    };\n    const Mons$Kind$inter$LEVER = x0 => Mons$Kind$inter$LEVER$(x0);\n    const Mons$Kind$terrain$GRASS_PLANT = ({\n        _: 'Mons.Kind.terrain.GRASS_PLANT'\n    });\n    const Mons$Kind$terrain$PLANT_0 = ({\n        _: 'Mons.Kind.terrain.PLANT_0'\n    });\n\n    function Mons$Map$code_to_tile$(_code$1, _dim$2) {\n        var self = (_dim$2 === 0);\n        if (self) {\n            var _path_brick$3 = Mons$Kind$new_terrain$(Mons$Kind$terrain$FLOOR$(0, 0));\n            var _lvl0$4 = 0;\n            var _path_blocker$5 = Mons$Kind$new_terrain$(Mons$Kind$terrain$PATH_BLOCKER$(_lvl0$4, 0));\n            var $397 = Mons$Map$code_to_tile$aux$(_code$1, List$cons$(Pair$new$(\"mg\", Mons$Kind$new_mons$(Mons$Kind$mons$MAGE, Mons$Type$normal, 2)), List$cons$(Pair$new$(\"ct\", List$cons$(Mons$Kind$new_const$(Mons$Kind$const$CRYSTAL), List$nil)), List$cons$(Pair$new$(\"ft\", List$cons$(Mons$Kind$new_const$(Mons$Kind$const$FOUNTAIN$(_lvl0$4, 0)), List$cons$(_path_brick$3, List$nil))), List$cons$(Pair$new$(\"pt\", List$cons$(Mons$Kind$new_const$(Mons$Kind$const$PORTAL), List$nil)), List$cons$(Pair$new$(\".g\", List$cons$(_path_brick$3, List$nil)), List$cons$(Pair$new$(\"bb\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$VOID_BLACK), List$nil)), List$cons$(Pair$new$(\"xx\", List$cons$(_path_blocker$5, List$nil)), List$cons$(Pair$new$(\"c1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(0, 1)), List$nil)), List$cons$(Pair$new$(\"c2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(0, 2)), List$nil)), List$cons$(Pair$new$(\"c3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(0, 3)), List$nil)), List$cons$(Pair$new$(\"c4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(0, 4)), List$nil)), List$cons$(Pair$new$(\"c5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(0, 5)), List$nil)), List$cons$(Pair$new$(\"d1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(1, 1)), List$nil)), List$cons$(Pair$new$(\"d2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(1, 2)), List$nil)), List$cons$(Pair$new$(\"d3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(1, 3)), List$nil)), List$cons$(Pair$new$(\"d4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(1, 4)), List$nil)), List$cons$(Pair$new$(\"d5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(1, 5)), List$nil)), List$cons$(Pair$new$(\"e1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(2, 1)), List$nil)), List$cons$(Pair$new$(\"e2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(2, 2)), List$nil)), List$cons$(Pair$new$(\"e3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(2, 3)), List$nil)), List$cons$(Pair$new$(\"e4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(2, 4)), List$nil)), List$cons$(Pair$new$(\"e5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(2, 5)), List$nil)), List$cons$(Pair$new$(\"f1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(3, 1)), List$nil)), List$cons$(Pair$new$(\"f2\", List$cons$(_path_blocker$5, List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(3, 2)), List$nil))), List$cons$(Pair$new$(\"f3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(3, 3)), List$nil)), List$cons$(Pair$new$(\"f4\", List$cons$(_path_blocker$5, List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(3, 4)), List$nil))), List$cons$(Pair$new$(\"f5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(3, 5)), List$nil)), List$cons$(Pair$new$(\"g1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(4, 1)), List$nil)), List$cons$(Pair$new$(\"g2\", List$cons$(_path_blocker$5, List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(4, 2)), List$nil))), List$cons$(Pair$new$(\"g3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(4, 3)), List$nil)), List$cons$(Pair$new$(\"g4\", List$cons$(_path_blocker$5, List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(4, 4)), List$nil))), List$cons$(Pair$new$(\"g5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(4, 5)), List$nil)), List$cons$(Pair$new$(\"a1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(5, 1)), List$nil)), List$cons$(Pair$new$(\"a2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(5, 2)), List$nil)), List$cons$(Pair$new$(\"a3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(5, 3)), List$nil)), List$cons$(Pair$new$(\"a4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(5, 4)), List$nil)), List$cons$(Pair$new$(\"a5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(5, 5)), List$nil)), List$cons$(Pair$new$(\"b1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(6, 1)), List$nil)), List$cons$(Pair$new$(\"b2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(6, 2)), List$nil)), List$cons$(Pair$new$(\"b3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(6, 3)), List$nil)), List$cons$(Pair$new$(\"b4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(6, 4)), List$nil)), List$cons$(Pair$new$(\"b5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(6, 5)), List$nil)), List$cons$(Pair$new$(\"h1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(7, 1)), List$nil)), List$cons$(Pair$new$(\"h2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(7, 2)), List$nil)), List$cons$(Pair$new$(\"h3\", List$cons$(_path_blocker$5, List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(7, 3)), List$nil))), List$cons$(Pair$new$(\"h4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(7, 4)), List$nil)), List$cons$(Pair$new$(\"h5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(7, 5)), List$nil)), List$cons$(Pair$new$(\"i1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(8, 1)), List$nil)), List$cons$(Pair$new$(\"i2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(8, 2)), List$nil)), List$cons$(Pair$new$(\"i3\", List$cons$(_path_blocker$5, List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(8, 3)), List$cons$(Mons$Kind$new_const$(Mons$Kind$const$FOUNTAIN$(_lvl0$4, 0)), List$nil)))), List$cons$(Pair$new$(\"i4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(8, 4)), List$nil)), List$cons$(Pair$new$(\"i5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(8, 5)), List$nil)), List$cons$(Pair$new$(\"j1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(9, 1)), List$nil)), List$cons$(Pair$new$(\"j2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(9, 2)), List$nil)), List$cons$(Pair$new$(\"j3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(9, 3)), List$nil)), List$cons$(Pair$new$(\"j4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(9, 4)), List$nil)), List$cons$(Pair$new$(\"j5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(9, 5)), List$nil)), List$cons$(Pair$new$(\"k1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(10, 1)), List$nil)), List$cons$(Pair$new$(\"k2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(10, 2)), List$nil)), List$cons$(Pair$new$(\"k3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(10, 3)), List$nil)), List$cons$(Pair$new$(\"k4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(10, 4)), List$nil)), List$cons$(Pair$new$(\"k5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(10, 5)), List$nil)), List$cons$(Pair$new$(\"l1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(11, 1)), List$nil)), List$cons$(Pair$new$(\"l2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(11, 2)), List$nil)), List$cons$(Pair$new$(\"l3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(11, 3)), List$nil)), List$cons$(Pair$new$(\"l4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(11, 4)), List$nil)), List$cons$(Pair$new$(\"l5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(11, 5)), List$nil)), List$cons$(Pair$new$(\"m1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(12, 1)), List$nil)), List$cons$(Pair$new$(\"m2\", List$cons$(_path_blocker$5, List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(12, 2)), List$nil))), List$cons$(Pair$new$(\"m3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(12, 3)), List$nil)), List$cons$(Pair$new$(\"m4\", List$cons$(_path_blocker$5, List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(12, 4)), List$nil))), List$cons$(Pair$new$(\"m5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(12, 5)), List$nil)), List$cons$(Pair$new$(\"n1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(13, 1)), List$nil)), List$cons$(Pair$new$(\"n2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(13, 2)), List$nil)), List$cons$(Pair$new$(\"n3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(13, 3)), List$nil)), List$cons$(Pair$new$(\"n4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(13, 4)), List$nil)), List$cons$(Pair$new$(\"n5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(13, 5)), List$nil)), List$cons$(Pair$new$(\"o1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(14, 1)), List$nil)), List$cons$(Pair$new$(\"o2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(14, 2)), List$nil)), List$cons$(Pair$new$(\"o3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(14, 3)), List$nil)), List$cons$(Pair$new$(\"o4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(14, 4)), List$nil)), List$cons$(Pair$new$(\"o5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(14, 5)), List$nil)), List$cons$(Pair$new$(\"p1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(15, 1)), List$nil)), List$cons$(Pair$new$(\"p2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(15, 2)), List$nil)), List$cons$(Pair$new$(\"p3\", List$cons$(_path_blocker$5, List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(15, 3)), List$nil))), List$cons$(Pair$new$(\"p4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(15, 4)), List$nil)), List$cons$(Pair$new$(\"p5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(15, 5)), List$nil)), List$cons$(Pair$new$(\"q1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(16, 1)), List$nil)), List$cons$(Pair$new$(\"q2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(16, 2)), List$nil)), List$cons$(Pair$new$(\"q3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(16, 3)), List$nil)), List$cons$(Pair$new$(\"q4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(16, 4)), List$nil)), List$cons$(Pair$new$(\"q5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(16, 5)), List$nil)), List$cons$(Pair$new$(\"r1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(17, 1)), List$nil)), List$cons$(Pair$new$(\"r2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(17, 2)), List$nil)), List$cons$(Pair$new$(\"r3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(17, 3)), List$nil)), List$cons$(Pair$new$(\"r4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(17, 4)), List$nil)), List$cons$(Pair$new$(\"r5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(17, 5)), List$nil)), List$cons$(Pair$new$(\"s1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(18, 1)), List$nil)), List$cons$(Pair$new$(\"s2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(18, 2)), List$nil)), List$cons$(Pair$new$(\"s3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(18, 3)), List$nil)), List$cons$(Pair$new$(\"s4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(18, 4)), List$nil)), List$cons$(Pair$new$(\"s5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(18, 5)), List$nil)), List$cons$(Pair$new$(\"t1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(19, 1)), List$nil)), List$cons$(Pair$new$(\"t2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(19, 2)), List$nil)), List$cons$(Pair$new$(\"t3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(19, 3)), List$nil)), List$cons$(Pair$new$(\"t4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(19, 4)), List$nil)), List$cons$(Pair$new$(\"t5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(19, 5)), List$nil)), List$cons$(Pair$new$(\"fg\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$STAIRS$(0, 0)), List$nil)), List$cons$(Pair$new$(\"mc\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$STAIRS$(38, 0)), List$nil)), List$cons$(Pair$new$(\"mf\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$STAIRS$(38, 1)), List$nil)), List$cons$(Pair$new$(\"lc\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$STAIRS$(37, 0)), List$nil)), List$cons$(Pair$new$(\"lf\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$STAIRS$(37, 1)), List$nil)), List$cons$(Pair$new$(\"kc\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$STAIRS$(36, 0)), List$nil)), List$cons$(Pair$new$(\"kf\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$STAIRS$(36, 1)), List$nil)), List$cons$(Pair$new$(\"jc\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$STAIRS$(35, 0)), List$nil)), List$cons$(Pair$new$(\"jf\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$STAIRS$(35, 1)), List$nil)), List$cons$(Pair$new$(\"ic\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$STAIRS$(34, 0)), List$nil)), List$cons$(Pair$new$(\"if\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$STAIRS$(34, 1)), List$nil)), List$nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));\n            var $396 = $397;\n        } else {\n            var self = (_dim$2 === 1);\n            if (self) {\n                var _floor$3 = Mons$Kind$new_terrain$(Mons$Kind$terrain$FLOOR$(1, 0));\n                var $399 = Mons$Map$code_to_tile$aux$(_code$1, List$cons$(Pair$new$(\"ft\", List$cons$(Mons$Kind$new_const$(Mons$Kind$const$FOUNTAIN$(1, 0)), List$nil)), List$cons$(Pair$new$(\"pt\", List$cons$(Mons$Kind$new_const$(Mons$Kind$const$PORTAL), List$nil)), List$cons$(Pair$new$(\"hl\", List$cons$(Mons$Kind$new_interactive_tool$(Mons$Kind$inter$HEAL, Bool$false, Mons$Kind$inter_lever_eff), List$cons$(_floor$3, List$nil))), List$cons$(Pair$new$(\"al\", List$cons$(Mons$Kind$new_interactive_tool$(Mons$Kind$inter$LEVER$(0), Bool$false, Mons$Kind$inter_lever_eff), List$nil)), List$cons$(Pair$new$(\".g\", List$cons$(_floor$3, List$nil)), List$cons$(Pair$new$(\".d\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$GRASS_PLANT), List$nil)), List$cons$(Pair$new$(\"xx\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$PATH_BLOCKER$(1, 0)), List$nil)), List$cons$(Pair$new$(\"pg\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$PLANT_0), List$cons$(_floor$3, List$nil))), List$nil)))))))));\n                var $398 = $399;\n            } else {\n                var self = (_dim$2 === 2);\n                if (self) {\n                    var _floor$3 = Mons$Kind$new_terrain$(Mons$Kind$terrain$FLOOR$(2, 0));\n                    var $401 = Mons$Map$code_to_tile$aux$(_code$1, List$cons$(Pair$new$(\".g\", List$cons$(_floor$3, List$nil)), List$cons$(Pair$new$(\"pt\", List$cons$(Mons$Kind$new_const$(Mons$Kind$const$PORTAL), List$nil)), List$nil)));\n                    var $400 = $401;\n                } else {\n                    var _path_brick$3 = Mons$Kind$new_terrain$(Mons$Kind$terrain$FLOOR$(1, 0));\n                    var $402 = Mons$Map$code_to_tile$aux$(_code$1, List$cons$(Pair$new$(\".g\", List$cons$(_path_brick$3, List$nil)), List$nil));\n                    var $400 = $402;\n                };\n                var $398 = $400;\n            };\n            var $396 = $398;\n        };\n        return $396;\n    };\n    const Mons$Map$code_to_tile = x0 => x1 => Mons$Map$code_to_tile$(x0, x1);\n\n    function Mons$Map$build$(_code$1) {\n        var $403 = List$ifor_u32$(_code$1, Mons$Map$new, (_z$2 => _plane$3 => _map$4 => {\n            var _size$5 = List$length_u32$(_plane$3);\n            var $404 = List$ifor_u32$(_plane$3, _map$4, (_j$6 => _row$7 => _map$8 => {\n                var _map$9 = (() => {\n                    var $406 = _map$8;\n                    var $407 = 0;\n                    var $408 = _size$5;\n                    let _map$10 = $406;\n                    for (let _i$9 = $407; _i$9 < $408; ++_i$9) {\n                        var _t_x$11 = (((Math.max(2048 - ((_size$5 / 2) >>> 0), 0)) + _i$9) >>> 0);\n                        var _t_y$12 = (((Math.max(2048 - ((_size$5 / 2) >>> 0), 0)) + _j$6) >>> 0);\n                        var _t_z$13 = _z$2;\n                        var _pos$14 = ((0 | _t_x$11 | (_t_y$12 << 12) | (_t_z$13 << 24)));\n                        var _ini$15 = U32$to_nat$(((_i$9 * 2) >>> 0));\n                        var _end$16 = U32$to_nat$(((((_i$9 * 2) >>> 0) + 2) >>> 0));\n                        var _sli$17 = String$slice$(_ini$15, _end$16, _row$7);\n                        var $406 = Mons$Map$set_list$(_pos$14, Mons$Map$code_to_tile$(_sli$17, _z$2), _map$10);\n                        _map$10 = $406;\n                    };\n                    return _map$10;\n                })();\n                var $405 = _map$9;\n                return $405;\n            }));\n            return $404;\n        }));\n        return $403;\n    };\n    const Mons$Map$build = x0 => Mons$Map$build$(x0);\n    const Mons$map_source = List$cons$(List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbptbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbecbbxx.g.gfg.g.gxxbbefbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbfcbbxx.g.gfg.g.gxxbbffbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbgcbbxx.g.gfg.g.gxxbbgfbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbhcxx.g.gfg.g.gxxhfbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbicxx.g.gfg.g.gxxifbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbjcxx.g.gfg.g.gxxjfbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbkcxx.g.gfg.g.gxxkfbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbblcxx.g.gfg.g.gxxlfbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbmcxx.g.gfg.g.gxxmfbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc0bbbbbbbbc1bbbbbbbbc2bbxx.g.gc3.g.gxxbbc4bbbbbbbbc5bbbbbbbbc6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbd0bbbbbbbbd1bbbbbbbbd2bbxx.g.gd3.g.gxxbbd4bbbbbbbbd5bbbbbbbbd6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbe0bbbbbbbbe1bbbbbbbbe2bbxx.g.ge3.g.gxxbbe4bbbbbbbbe5bbbbbbbbe6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbf0bbbbbbbbf1bbbbbbxxf2xx.g.g.gf3.g.g.gxxf4xxbbbbbbf5bbbbbbbbf6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbg0bbbbbbbbg1bbbbbbxxg2.g.g.g.gg3.g.g.g.gg4xxbbbbbbg5bbbbbbbbg6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbba0bbbbbbbba1bbbbbbxxa2.g.g.g.ga3.g.g.g.ga4xxbbbbbba5bbbbbbbba6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb0bbbbbbbbb1bbbbbbxxb2.g.g.g.gb3.g.g.g.gb4xxbbbbbbb5bbbbbbbbb6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbh0bbbbbbbbh1bbbbbbxxh2.g.g.g.gh3.g.g.g.gh4xxbbbbbbh5bbbbbbbbh6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbi0bbbbbbbbi1bbbbbbxxi2.g.g.gxxi3xx.g.g.gi4xxbbbbbbi5bbbbbbbbi6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbj0bbbbbbbbj1bbbbbbxxj2.g.g.g.gj3mg.g.g.gj4xxbbbbbbj5bbbbbbbbj6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbk0bbbbbbbbk1bbbbbbxxk2.g.g.g.gk3.g.g.g.gk4xxbbbbbbk5bbbbbbbbk6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbl0bbbbbbbbl1bbbbbbxxl2.g.g.g.gl3.g.g.g.gl4xxbbbbbbl5bbbbbbbbl6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbm0bbbbbbbbm1bbbbbbxxm2.g.g.g.gm3.g.gxxxxm4xxbbbbbbm5bbbbbbbbm6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbn0bbbbbbbbn1bbbbbbbbn2xx.g.g.gn3.g.gxxxxn4bbbbbbbbn5bbbbbbbbn6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbo0bbbbbbbbo1bbbbbbbbo2xx.g.g.go3.g.gxxbbo4bbbbbbbbo5bbbbbbbbo6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbp0bbbbbbbbp1bbbbbbbbp2xxxxxxxxp3xxxxxxbbp4bbbbbbbbp4bbbbbbbbp6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbq0bbbbbbbbq1bbbbbbbbq2xxbbbbbbq3bbbbxxbbq4bbbbbbbbq5bbbbbbbbq6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbr0bbbbbbbbr1bbbbbbbbr2bbxxbbbbr3bbbbxxbbr4bbbbbbbbr5bbbbbbbbr6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbs1bbbbbbbbs2bbxxbbbbs3bbbbxxbbs4bbbbbbbbs5bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbt1bbbbbbbbt2bbxxbbbbt3bbbbxxbbt4bbbbbbbbt5bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbu1bbbbbbbbu2bbxxbbbbu3bbbbxxbbu4bbbbbbbbu5bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbv1bbbbbbbbv2bbxxbbbbv3bbbbxxbbv4bbbbbbbbv5bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbw1bbbbbbbbw2bbxxxxxxw3xxxxxxbbw4bbbbbbbbw5bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbx1bbbbbbbbx2bbbbbbbbx3bbbbbbbbx4bbbbbbbbx5bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbby1bbbbbbbby2bbbbbbbby3bbbbbbbby4bbbbbbbby5bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbz1bbbbbbbbz2bbbbbbbbz3bbbbbbbbz4bbbbbbbbz5bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbacbbbbbbbbadbbbbbbbbaebbbbbbbbafbbbbbbbbagbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbdbbbbbbbbbebbbbbbbbbfbbbbbbbbbgbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbcdbbbbbbbbcebbbbbbbbcfbbbbbbbbcgbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdcbbbbbbbbddbbbbbbbbdebbbbbbbbdfbbbbbbbbdgbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbegbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbfgbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbggbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbhgbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbigbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbjgbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbkgbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbblgbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbmgbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), List$cons$(List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbpgpg.g.g.g.gpgpgbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbpgpg.g.gpt.g.g.gpgbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.gpgbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbpgpg.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.ghl.g.g.g.g.g.gpgpgpg.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gpgpg.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gpgpg.g.g.g.g.g.g.g.g.g.g.gpgpg.g.g.g.g.gpgpg.g.g.g.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.gpgbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbpg.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbpgpgpgbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.gpopopopopopopo.g.g.g.g.gbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.gpopopopopopopo.g.g.g.g.gbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.gpopopopopopopo.g.g.g.g.gbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbememememememem.g.g.g.g.g.gpgpgbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.gpopopopopopopo.g.g.g.g.gbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbpgememememememem.g.g.g.g.g.gpgpgpgbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.g.gbbbbbbbbpgpgpgpgpgpopopopopopopopgpgpgpgpgbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbpgememememememem.g.g.g.g.g.g.gpgpgbbbbbbbbbbbb.g.g.gmimimimimimimi.g.g.gpg.g.gbbbbbbpgpgpgpgpgpopopopopopopopgpgpgpgpgbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbpgpgememememememem.g.g.g.g.g.g.g.g.g.gbbbbbbbbbb.g.g.gmimimimimimimi.g.g.g.g.g.gbbbbbb.g.g.g.g.gpopopopopopopo.g.g.g.g.gbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbpgpgememememememem.g.g.g.g.g.g.g.g.g.g.ghl.g.g.g.g.g.gmimimimimimimi.g.g.g.g.g.gbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbpgpgemememememememenenenenenenen.g.g.g.g.g.g.g.g.g.g.gmimimimimimimi.g.g.gpgpg.gbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbpgpgemememememememenenenenenenen.g.g.g.g.g.g.g.g.g.g.gmimimimimimimi.g.g.gpgpg.gbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbpgpg.g.g.g.g.g.g.genenenenenenen.g.g.gbbbbbbbbbb.g.g.gmimimimimimimi.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbpgpgpgpg.g.g.g.g.genenenenenenenpgpgbbbbbbbbbbbb.g.g.gmimimimimimimi.g.g.gpgpg.gbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbpgpgpgpg.g.g.g.genenenenenenenpgpgbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.gpgpg.gbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbpgpgpgpgpg.g.g.genenenenenenenpgbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.gpg.g.g.g.g.gbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbpgpgpg.g.g.genenenenenenenbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbb.g.gmimimimimimimi.g.gbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbb.g.gmimimimimimimi.g.gbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbb.g.gmimimimimimimi.g.gbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbpgpgpgpgpgpg.gpgpgpgpgpgpgpgpgpgpgpg.g.g.g.gpgpgbbbbbbbbbbbb.g.gmimimimimimimi.g.gbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbpgpg.g.g.g.g.g.gbbbbbbbbpgpgpgpgpgpgpgpgpgpgpgpgpgpgpgpgpgpg.g.g.g.gpgpgbbbbbbbbbbbb.g.gmimimimimimimi.g.gbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbpgpgtrtrtrtrtrtrtr.gbbbbbb.gpgpgpgpgpgpgpgpgpgpgpg.gpgpgpgazazazazazazaz.gbbbbbbbbbbbb.g.gmimimimimimimi.g.gbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbpgpgtrtrtrtrtrtrtr.gbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gazazazazazazaz.gbbbbbbbbbbbb.g.gmimimimimimimi.g.gbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.gtrtrtrtrtrtrtr.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gazazazazazazaz.gbbbbbbbbbbbb.g.g.gpg.g.g.gpg.g.g.gbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.gtrtrtrtrtrtrtr.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gazazazazazazaz.gbbbbbbbbbbbb.g.g.gpg.g.g.gpg.g.g.gbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.gtrtrtrtrtrtrtr.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gazazazazazazaz.gbbbbbbbbbbbbbb.g.gpg.g.g.gpg.g.gbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.gtrtrtrtrtrtrtr.gbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gazazazazazazaz.gbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.gtrtrtrtrtrtrtrpgbbbbbb.g.g.g.gpgpgpgpgpg.gpgpgpgpgpgpgazazazazazazaz.gbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.gpgpgpgbbbbbb.gpgpgpgpgpgpgpgpgpgpgpgpgpgpgpgpgpgpg.g.g.g.g.gbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.gpgpgbbbbbbbbpgpgpgpgpgpgpgpgpgpgpgpgpgpgpgpgpgpgpg.g.gpgpgpgbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbpgpgpgpg.gpgpgpgpgpgpgpg.g.g.gpgpgpg.g.g.gpgpgpgbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbpgpgcycycycycycycy.gbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbpgpgpgcycycycycycycy.g.gbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbpgpg.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbpgpg.gcycycycycycycy.g.gbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbpgpg.gzozozozozozozobbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gcycycycycycycy.g.gbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gzozozozozozozo.gbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gcycycycycycycy.g.gbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gzozozozozozozo.g.g.g.gpgpgpg.g.g.g.ghl.g.g.g.gcycycycycycycy.g.gbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gzozozozozozozo.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gcycycycycycycy.g.gbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbpg.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbpgpg.gzozozozozozozo.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbpgpgpg.g.g.g.g.g.g.gbbbbbbbbbbbbbbbb.g.g.gzozozozozozozopgpgbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbpgpg.g.g.g.g.g.gbbbbbbbbbbbbbbbbbb.g.g.gzozozozozozozo.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.gpg.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.gpg.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.gpg.g.g.g.gpg.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.gpg.g.g.g.g.g.g.g.gpg.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.gpg.g.g.g.g.g.g.g.gpg.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.gpg.g.g.g.gpg.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), List$cons$(List$cons$(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", List$cons$(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", List$cons$(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", List$cons$(\"xxxxxxxxxxxxxx.g.g.g.g.g.gxxxxxxxxxxxxxx\", List$cons$(\"xxxxxxxxxx.g.g.g.g.g.g.g.g.g.gxxxxxxxxxx\", List$cons$(\"xxxxxxxx.g.g.g.g.g.g.g.g.g.g.g.gxxxxxxxx\", List$cons$(\"xxxxxx.g.g.g.g.g.g.g.g.g.g.g.g.g.gxxxxxx\", List$cons$(\"xxxxxx.g.g.g.g.g.g.g.g.g.g.g.g.g.gxxxxxx\", List$cons$(\"xxxx.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gxxxx\", List$cons$(\"xxxx.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gxxxx\", List$cons$(\"xxxx.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gxxxx\", List$cons$(\"xxxx.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gxxxx\", List$cons$(\"xxxx.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gxxxx\", List$cons$(\"xxxxxx.g.g.g.g.g.g.g.g.g.g.g.g.g.gxxxxxx\", List$cons$(\"xxxxxx.g.g.g.g.g.g.g.g.g.g.g.g.g.gxxxxxx\", List$cons$(\"xxxxxxxx.g.g.g.g.g.g.g.g.g.g.g.gxxxxxxxx\", List$cons$(\"xxxxxxxxxx.g.g.g.g.g.g.g.g.g.gxxxxxxxxxx\", List$cons$(\"xxxxxxxxxxxxxx.g.g.g.g.g.gxxxxxxxxxxxxxx\", List$cons$(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", List$cons$(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", List$nil)))))))))))))))))))), List$nil)));\n\n    function Mons$Screen$game$(_cmd$1, _turn$2) {\n        var $409 = ({\n            _: 'Mons.Screen.game',\n            'cmd': _cmd$1,\n            'turn': _turn$2\n        });\n        return $409;\n    };\n    const Mons$Screen$game = x0 => x1 => Mons$Screen$game$(x0, x1);\n\n    function Mons$Turn$new$(_exec_hero$1, _hero_skill$2, _adve_skill$3, _play$4) {\n        var $410 = ({\n            _: 'Mons.Turn.new',\n            'exec_hero': _exec_hero$1,\n            'hero_skill': _hero_skill$2,\n            'adve_skill': _adve_skill$3,\n            'play': _play$4\n        });\n        return $410;\n    };\n    const Mons$Turn$new = x0 => x1 => x2 => x3 => Mons$Turn$new$(x0, x1, x2, x3);\n    const Mons$Skill$none = ({\n        _: 'Mons.Skill.none'\n    });\n    const Mons$Turn$empty = Mons$Turn$new$(Bool$false, Mons$Skill$none, Mons$Skill$none, 0);\n\n    function App$Render$pix$(_pixs$1) {\n        var $411 = ({\n            _: 'App.Render.pix',\n            'pixs': _pixs$1\n        });\n        return $411;\n    };\n    const App$Render$pix = x0 => App$Render$pix$(x0);\n\n    function Image3D$set_length$(_length$1, _img$2) {\n        var self = _img$2;\n        switch (self._) {\n            case 'Image3D.new':\n                var $413 = self.capacity;\n                var $414 = self.buffer;\n                var $415 = Image3D$new$(_length$1, $413, $414);\n                var $412 = $415;\n                break;\n        };\n        return $412;\n    };\n    const Image3D$set_length = x0 => x1 => Image3D$set_length$(x0, x1);\n\n    function Image3D$clear$(_img$1) {\n        var $416 = Image3D$set_length$(0, _img$1);\n        return $416;\n    };\n    const Image3D$clear = x0 => Image3D$clear$(x0);\n\n    function List$at$(_index$2, _list$3) {\n        var List$at$ = (_index$2, _list$3) => ({\n            ctr: 'TCO',\n            arg: [_index$2, _list$3]\n        });\n        var List$at = _index$2 => _list$3 => List$at$(_index$2, _list$3);\n        var arg = [_index$2, _list$3];\n        while (true) {\n            let [_index$2, _list$3] = arg;\n            var R = (() => {\n                var self = _list$3;\n                switch (self._) {\n                    case 'List.cons':\n                        var $417 = self.head;\n                        var $418 = self.tail;\n                        var self = _index$2;\n                        if (self === 0n) {\n                            var $420 = Maybe$some$($417);\n                            var $419 = $420;\n                        } else {\n                            var $421 = (self - 1n);\n                            var $422 = List$at$($421, $418);\n                            var $419 = $422;\n                        };\n                        return $419;\n                    case 'List.nil':\n                        var $423 = Maybe$none;\n                        return $423;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$at = x0 => x1 => List$at$(x0, x1);\n\n    function Mons$Map$get$(_pos$1, _idx$2, _map$3) {\n        var _list$4 = Mons$Map$get_list$(_pos$1, _map$3);\n        var self = List$at$(U32$to_nat$(_idx$2), _list$4);\n        switch (self._) {\n            case 'Maybe.some':\n                var $425 = self.value;\n                var $426 = $425;\n                var $424 = $426;\n                break;\n            case 'Maybe.none':\n                var $427 = Mons$Object$void;\n                var $424 = $427;\n                break;\n        };\n        return $424;\n    };\n    const Mons$Map$get = x0 => x1 => x2 => Mons$Map$get$(x0, x1, x2);\n\n    function Mons$Game$dim$(_game$1) {\n        var self = Mons$Game$get_hero_pos$(_game$1);\n        switch (self._) {\n            case 'Maybe.some':\n                var $429 = self.value;\n                var $430 = (($429 >>> 24));\n                var $428 = $430;\n                break;\n            case 'Maybe.none':\n                var $431 = 0;\n                var $428 = $431;\n                break;\n        };\n        return $428;\n    };\n    const Mons$Game$dim = x0 => Mons$Game$dim$(x0);\n\n    function Mons$Object$get_current_mon$(_obj$1) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $433 = self.bag;\n                var $434 = self.mon;\n                var _idx$13 = U32$to_nat$($434);\n                var self = List$at$(_idx$13, $433);\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $436 = self.value;\n                        var $437 = $436;\n                        var $435 = $437;\n                        break;\n                    case 'Maybe.none':\n                        var $438 = _obj$1;\n                        var $435 = $438;\n                        break;\n                };\n                var $432 = $435;\n                break;\n        };\n        return $432;\n    };\n    const Mons$Object$get_current_mon = x0 => Mons$Object$get_current_mon$(x0);\n    const Mons$global_scr_mid = ((0 | 2048 | (2048 << 12) | (0 << 24)));\n\n    function Cmp$as_gtn$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.eql':\n                var $440 = Bool$false;\n                var $439 = $440;\n                break;\n            case 'Cmp.gtn':\n                var $441 = Bool$true;\n                var $439 = $441;\n                break;\n        };\n        return $439;\n    };\n    const Cmp$as_gtn = x0 => Cmp$as_gtn$(x0);\n\n    function Word$gtn$(_a$2, _b$3) {\n        var $442 = Cmp$as_gtn$(Word$cmp$(_a$2, _b$3));\n        return $442;\n    };\n    const Word$gtn = x0 => x1 => Word$gtn$(x0, x1);\n    const U32$gtn = a0 => a1 => (a0 > a1);\n\n    function Cmp$as_ltn$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n                var $444 = Bool$true;\n                var $443 = $444;\n                break;\n            case 'Cmp.eql':\n            case 'Cmp.gtn':\n                var $445 = Bool$false;\n                var $443 = $445;\n                break;\n        };\n        return $443;\n    };\n    const Cmp$as_ltn = x0 => Cmp$as_ltn$(x0);\n\n    function Word$ltn$(_a$2, _b$3) {\n        var $446 = Cmp$as_ltn$(Word$cmp$(_a$2, _b$3));\n        return $446;\n    };\n    const Word$ltn = x0 => x1 => Word$ltn$(x0, x1);\n    const U32$ltn = a0 => a1 => (a0 < a1);\n\n    function Mons$image_to_global$(_width$1, _height$2, _x$3, _y$4, _lvl$5) {\n        var _g_x$6 = ((Mons$global_scr_mid & 0xFFF));\n        var _g_y$7 = (((Mons$global_scr_mid >>> 12) & 0xFFF));\n        var _mid_width$8 = ((_width$1 / 2) >>> 0);\n        var _mid_height$9 = ((_height$2 / 2) >>> 0);\n        var _mid_x_diff$10 = (Math.max(_mid_width$8 - _x$3, 0));\n        var _mid_y_diff$11 = (Math.max(_mid_height$9 - _y$4, 0));\n        var self = (_x$3 > _mid_width$8);\n        if (self) {\n            var $448 = ((_g_x$6 + (Math.max(_x$3 - _mid_width$8, 0))) >>> 0);\n            var _upd_g_x$12 = $448;\n        } else {\n            var self = (_x$3 < _mid_width$8);\n            if (self) {\n                var $450 = (Math.max(_g_x$6 - (Math.max(_mid_width$8 - _x$3, 0)), 0));\n                var $449 = $450;\n            } else {\n                var $451 = _g_x$6;\n                var $449 = $451;\n            };\n            var _upd_g_x$12 = $449;\n        };\n        var self = (_y$4 > _mid_height$9);\n        if (self) {\n            var $452 = ((_g_y$7 + (Math.max(_y$4 - _mid_height$9, 0))) >>> 0);\n            var _upd_g_y$13 = $452;\n        } else {\n            var self = (_y$4 < _mid_height$9);\n            if (self) {\n                var $454 = (Math.max(_g_y$7 - (Math.max(_mid_height$9 - _y$4, 0)), 0));\n                var $453 = $454;\n            } else {\n                var $455 = _g_y$7;\n                var $453 = $455;\n            };\n            var _upd_g_y$13 = $453;\n        };\n        var $447 = ((0 | _upd_g_x$12 | (_upd_g_y$13 << 12) | (_lvl$5 << 24)));\n        return $447;\n    };\n    const Mons$image_to_global = x0 => x1 => x2 => x3 => x4 => Mons$image_to_global$(x0, x1, x2, x3, x4);\n\n    function Mons$Attr$new$(_blocks$1, _mhp$2, _atk$3, _name$4, _wlk$5, _idl$6, _pic$7, _battle_spr$8, _skills$9, _pos$10) {\n        var $456 = ({\n            _: 'Mons.Attr.new',\n            'blocks': _blocks$1,\n            'mhp': _mhp$2,\n            'atk': _atk$3,\n            'name': _name$4,\n            'wlk': _wlk$5,\n            'idl': _idl$6,\n            'pic': _pic$7,\n            'battle_spr': _battle_spr$8,\n            'skills': _skills$9,\n            'pos': _pos$10\n        });\n        return $456;\n    };\n    const Mons$Attr$new = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => Mons$Attr$new$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);\n\n    function Word$mod$(_a$2, _b$3) {\n        var Word$mod$ = (_a$2, _b$3) => ({\n            ctr: 'TCO',\n            arg: [_a$2, _b$3]\n        });\n        var Word$mod = _a$2 => _b$3 => Word$mod$(_a$2, _b$3);\n        var arg = [_a$2, _b$3];\n        while (true) {\n            let [_a$2, _b$3] = arg;\n            var R = Word$mod$(_a$2, _b$3);\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$mod = x0 => x1 => Word$mod$(x0, x1);\n    const U32$mod = a0 => a1 => (a0 % a1);\n\n    function Mons$walk_char_pack$(_t_x$1, _t_y$2, _ani$3, _dir$4, _r_0$5, _u_0$6, _l_0$7, _d_0$8, _r_1$9, _u_1$10, _l_1$11, _d_1$12, _r_2$13, _u_2$14, _l_2$15, _d_2$16) {\n        var self = (_ani$3 === 0);\n        if (self) {\n            var self = _dir$4;\n            switch (self._) {\n                case 'Mons.Dir.right':\n                    var $459 = List$cons$(_r_0$5, List$nil);\n                    var $458 = $459;\n                    break;\n                case 'Mons.Dir.up':\n                    var $460 = List$cons$(_u_0$6, List$nil);\n                    var $458 = $460;\n                    break;\n                case 'Mons.Dir.left':\n                    var $461 = List$cons$(_l_0$7, List$nil);\n                    var $458 = $461;\n                    break;\n                case 'Mons.Dir.down':\n                    var $462 = List$cons$(_d_0$8, List$nil);\n                    var $458 = $462;\n                    break;\n            };\n            var $457 = $458;\n        } else {\n            var self = ((((_t_x$1 + _t_y$2) >>> 0) % 2) === 0);\n            if (self) {\n                var self = _dir$4;\n                switch (self._) {\n                    case 'Mons.Dir.right':\n                        var $465 = List$cons$(_r_1$9, List$nil);\n                        var $464 = $465;\n                        break;\n                    case 'Mons.Dir.up':\n                        var $466 = List$cons$(_u_1$10, List$nil);\n                        var $464 = $466;\n                        break;\n                    case 'Mons.Dir.left':\n                        var $467 = List$cons$(_l_1$11, List$nil);\n                        var $464 = $467;\n                        break;\n                    case 'Mons.Dir.down':\n                        var $468 = List$cons$(_d_1$12, List$nil);\n                        var $464 = $468;\n                        break;\n                };\n                var $463 = $464;\n            } else {\n                var self = _dir$4;\n                switch (self._) {\n                    case 'Mons.Dir.right':\n                        var $470 = List$cons$(_r_2$13, List$nil);\n                        var $469 = $470;\n                        break;\n                    case 'Mons.Dir.up':\n                        var $471 = List$cons$(_u_2$14, List$nil);\n                        var $469 = $471;\n                        break;\n                    case 'Mons.Dir.left':\n                        var $472 = List$cons$(_l_2$15, List$nil);\n                        var $469 = $472;\n                        break;\n                    case 'Mons.Dir.down':\n                        var $473 = List$cons$(_d_2$16, List$nil);\n                        var $469 = $473;\n                        break;\n                };\n                var $463 = $469;\n            };\n            var $457 = $463;\n        };\n        return $457;\n    };\n    const Mons$walk_char_pack = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => x10 => x11 => x12 => x13 => x14 => x15 => Mons$walk_char_pack$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15);\n    const U32$length = a0 => (a0.length);\n    const U32$slice = a0 => a1 => a2 => (a2.slice(a0, a1));\n    const U32$read_base = a0 => a1 => (parseInt(a1, a0));\n\n    function Image3D$parse_byte$(_idx$1, _voxdata$2) {\n        var _chr$3 = (_voxdata$2.slice(((_idx$1 * 2) >>> 0), ((((_idx$1 * 2) >>> 0) + 2) >>> 0)));\n        var $474 = (parseInt(_chr$3, 16));\n        return $474;\n    };\n    const Image3D$parse_byte = x0 => x1 => Image3D$parse_byte$(x0, x1);\n    const Col32$new = a0 => a1 => a2 => a3 => ((0 | a0 | (a1 << 8) | (a2 << 16) | (a3 << 24)));\n\n    function Word$trim$(_new_size$2, _word$3) {\n        var self = _new_size$2;\n        if (self === 0n) {\n            var $476 = Word$e;\n            var $475 = $476;\n        } else {\n            var $477 = (self - 1n);\n            var self = _word$3;\n            switch (self._) {\n                case 'Word.o':\n                    var $479 = self.pred;\n                    var $480 = Word$o$(Word$trim$($477, $479));\n                    var $478 = $480;\n                    break;\n                case 'Word.i':\n                    var $481 = self.pred;\n                    var $482 = Word$i$(Word$trim$($477, $481));\n                    var $478 = $482;\n                    break;\n                case 'Word.e':\n                    var $483 = Word$o$(Word$trim$($477, Word$e));\n                    var $478 = $483;\n                    break;\n            };\n            var $475 = $478;\n        };\n        return $475;\n    };\n    const Word$trim = x0 => x1 => Word$trim$(x0, x1);\n    const Unit$new = 1;\n\n    function Array$extract_tip$(_arr$2) {\n        var self = _arr$2;\n        switch (self._) {\n            case 'Array.tip':\n                var $485 = self.value;\n                var $486 = $485;\n                var $484 = $486;\n                break;\n            case 'Array.tie':\n                var $487 = Unit$new;\n                var $484 = $487;\n                break;\n        };\n        return $484;\n    };\n    const Array$extract_tip = x0 => Array$extract_tip$(x0);\n\n    function Array$extract_tie$(_arr$3) {\n        var self = _arr$3;\n        switch (self._) {\n            case 'Array.tie':\n                var $489 = self.lft;\n                var $490 = self.rgt;\n                var $491 = Pair$new$($489, $490);\n                var $488 = $491;\n                break;\n            case 'Array.tip':\n                var $492 = Unit$new;\n                var $488 = $492;\n                break;\n        };\n        return $488;\n    };\n    const Array$extract_tie = x0 => Array$extract_tie$(x0);\n\n    function Word$foldl$(_nil$3, _w0$4, _w1$5, _word$6) {\n        var Word$foldl$ = (_nil$3, _w0$4, _w1$5, _word$6) => ({\n            ctr: 'TCO',\n            arg: [_nil$3, _w0$4, _w1$5, _word$6]\n        });\n        var Word$foldl = _nil$3 => _w0$4 => _w1$5 => _word$6 => Word$foldl$(_nil$3, _w0$4, _w1$5, _word$6);\n        var arg = [_nil$3, _w0$4, _w1$5, _word$6];\n        while (true) {\n            let [_nil$3, _w0$4, _w1$5, _word$6] = arg;\n            var R = (() => {\n                var self = _word$6;\n                switch (self._) {\n                    case 'Word.o':\n                        var $493 = self.pred;\n                        var $494 = Word$foldl$(_w0$4(_nil$3), _w0$4, _w1$5, $493);\n                        return $494;\n                    case 'Word.i':\n                        var $495 = self.pred;\n                        var $496 = Word$foldl$(_w1$5(_nil$3), _w0$4, _w1$5, $495);\n                        return $496;\n                    case 'Word.e':\n                        var $497 = _nil$3;\n                        return $497;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$foldl = x0 => x1 => x2 => x3 => Word$foldl$(x0, x1, x2, x3);\n\n    function Array$mut$(_idx$3, _f$4, _arr$5) {\n        var $498 = Word$foldl$((_arr$6 => {\n            var $499 = Array$tip$(_f$4(Array$extract_tip$(_arr$6)));\n            return $499;\n        }), (_rec$7 => _arr$8 => {\n            var self = Array$extract_tie$(_arr$8);\n            switch (self._) {\n                case 'Pair.new':\n                    var $501 = self.fst;\n                    var $502 = self.snd;\n                    var $503 = Array$tie$(_rec$7($501), $502);\n                    var $500 = $503;\n                    break;\n            };\n            return $500;\n        }), (_rec$7 => _arr$8 => {\n            var self = Array$extract_tie$(_arr$8);\n            switch (self._) {\n                case 'Pair.new':\n                    var $505 = self.fst;\n                    var $506 = self.snd;\n                    var $507 = Array$tie$($505, _rec$7($506));\n                    var $504 = $507;\n                    break;\n            };\n            return $504;\n        }), _idx$3)(_arr$5);\n        return $498;\n    };\n    const Array$mut = x0 => x1 => x2 => Array$mut$(x0, x1, x2);\n\n    function Array$set$(_idx$3, _val$4, _arr$5) {\n        var $508 = Array$mut$(_idx$3, (_x$6 => {\n            var $509 = _val$4;\n            return $509;\n        }), _arr$5);\n        return $508;\n    };\n    const Array$set = x0 => x1 => x2 => Array$set$(x0, x1, x2);\n    const Buffer32$set = a0 => a1 => a2 => ((a2[a0] = a1, a2));\n    const Image3D$set_pos = a0 => a1 => a2 => ((a2.buffer[a0 * 2] = a1, a2));\n    const Image3D$set_col = a0 => a1 => a2 => ((a2.buffer[a0 * 2 + 1] = a1, a2));\n    const Image3D$push = a0 => a1 => a2 => ((a2.buffer[a2.length * 2] = a0, a2.buffer[a2.length * 2 + 1] = a1, a2.length++, a2));\n\n    function Image3D$parse$(_voxdata$1) {\n        var _siz$2 = (((_voxdata$1.length) / 12) >>> 0);\n        var _img$3 = Image3D$alloc_capacity$(_siz$2);\n        var $510 = (() => {\n            var $511 = _img$3;\n            var $512 = 0;\n            var $513 = _siz$2;\n            let _img$5 = $511;\n            for (let _i$4 = $512; _i$4 < $513; ++_i$4) {\n                var _x$6 = Image3D$parse_byte$(((((_i$4 * 6) >>> 0) + 0) >>> 0), _voxdata$1);\n                var _y$7 = Image3D$parse_byte$(((((_i$4 * 6) >>> 0) + 1) >>> 0), _voxdata$1);\n                var _z$8 = Image3D$parse_byte$(((((_i$4 * 6) >>> 0) + 2) >>> 0), _voxdata$1);\n                var _r$9 = Image3D$parse_byte$(((((_i$4 * 6) >>> 0) + 3) >>> 0), _voxdata$1);\n                var _g$10 = Image3D$parse_byte$(((((_i$4 * 6) >>> 0) + 4) >>> 0), _voxdata$1);\n                var _b$11 = Image3D$parse_byte$(((((_i$4 * 6) >>> 0) + 5) >>> 0), _voxdata$1);\n                var _pos$12 = ((0 | _x$6 | (_y$7 << 12) | (_z$8 << 24)));\n                var _col$13 = ((0 | _r$9 | (_g$10 << 8) | (_b$11 << 16) | (255 << 24)));\n                var _img$14 = ((_img$5.buffer[_img$5.length * 2] = _pos$12, _img$5.buffer[_img$5.length * 2 + 1] = _col$13, _img$5.length++, _img$5));\n                var $511 = _img$14;\n                _img$5 = $511;\n            };\n            return _img$5;\n        })();\n        return $510;\n    };\n    const Image3D$parse = x0 => Image3D$parse$(x0);\n    const Mons$Assets$char$boy_r_0 = Image3D$parse$(\"83711a2c333d84711a2c333d7c72192c333d7d72192c333d7e72192c333d7f72192c333d8072192c333d8172192c333d8272192c333d8372195f35388472192c333d7b73182c333d7c73189f5b447d73189f5b447e73189f5b447f73189f5b448073189f5b448173189f5b448273186f403b8373185f35388473182c333d8573182c333d8673182c333d7a74172c333d7b74176f403b7c7417884e3f7d7417884e3f7e7417884e3f7f7417884e3f807417884e3f8174176f403b8274176f403b8374176f403b8474175f35388574175f35388674172c333d7975162c333d7a75165f35387b75166f403b7c75166f403b7d75166f403b7e75166f403b7f75166f403b8075166f403b8175166f403b8275166f403b8375166f403b8475166f403b8575165f35387976152c333d7a76155f35387b76156f403b7c76156f403b7d76156f403b7e76156f403b7f76156f403b8076156f403b8176156f403b8276156f403b8376155f35388476156f403b8576156f403b8676152c333d7977142c333d7a77145f35387b77145f35387c77146f403b7d77146f403b7e77146f403b7f77146f403b8077146f403b8177146f403b8277145f35388377142c333d8477145f35388577146f403b8677142c333d7978132c333d7a78135f35387b78135f35387c78135f35387d78135f35387e78136f403b7f78136f403b8078135f35388178135f35388278132c333d837813a5876e8478132c333d8578135f35388678132c333d7979122c333d7a79125f35387b79125f35387c79125f35387d79125f35387e79125f35387f79125f35388079122c333d8179122c333d827912a5876e8379122c333d847912a5876e8579122c333d7a7a112c333d7b7a115f35387c7a115f35387d7a115f35387e7a115f35387f7a112c333d807a11a5876e817a11ae9379827a11bba38a837a113f4353847a11cab89d857a112c333d7b7b102c333d7c7b102c333d7d7b102c333d7e7b102c333d7f7b10a5876e807b10ae9379817b10ae9379827b10db6176837b10fa83a9847b102c333d7c7c0f2c333d7d7c0f98202e7e7c0f98202e7f7c0f98202e807c0f98202e817c0fa43234827c0fb64c3b837c0fb64c3b847c0f2c333d7c7d0e2c333d7d7d0e98202e7e7d0e98202e7f7d0ea43234807d0ea43234817d0ea43234827d0ea43234837d0ea43234847d0e2c333d7c7e0d2c333d7d7e0d2a638e7e7e0d428a9b7f7e0d428a9b807e0d428a9b817e0d428a9b827e0d2a638e837e0d2c333d7c7f0c2c333d7d7f0c428a9b7e7f0c428a9b7f7f0c63a9a4807f0c63a9a4817f0c63a9a4827f0c63a9a4837f0c2c333d7c800b2c333d7d800b428a9b7e800b428a9b7f800b428a9b80800b63a9a481800b63a9a482800b63a9a483800b2c333d7c810a2c333d7d810a2a638e7e810a428a9b7f810a428a9b80810a428a9b81810a428a9b82810a2c333d7c82092c333d7d82092a638e7e82092a638e7f82092a638e8082092a638e8182092c333d7d83082c333d7e83082c333d7f83082c333d8083082c333d8183082c333d7d84072c333d7e8407ae93797f8407ae9379808407bba38a818407bba38a8284072c333d7e85062c333d7f85062c333d8085062c333d8185062c333d8285062c333d\");\n    const Mons$Assets$char$boy_u_0 = Image3D$parse$(\"7b711a2c333d7c711a2c333d7b72192c333d7c72199f5b447d72192c333d7e72192c333d7f72192c333d8072192c333d8172192c333d8272192c333d7973182c333d7a73182c333d7b73182c333d7c7318884e3f7d73186f403b7e73186f403b7f73186f403b8073186f403b8173186f403b827318884e3f8373182c333d7974172c333d7a74179f5b447b7417884e3f7c74176f403b7d74179f5b447e74176f403b7f74179f5b448074179f5b448174179f5b448274179f5b448374176f403b8474172c333d7a75162c333d7b75166f403b7c75166f403b7d7516884e3f7e75166f403b7f7516884e3f807516884e3f817516884e3f827516884e3f8375166f403b8475169f5b448575162c333d7a76152c333d7b76156f403b7c76156f403b7d76156f403b7e76156f403b7f76156f403b8076156f403b8176156f403b8276156f403b8376156f403b8476156f403b857615884e3f8676152c333d7977142c333d7a7714884e3f7b77146f403b7c77146f403b7d77146f403b7e77146f403b7f77146f403b8077146f403b8177146f403b8277146f403b8377146f403b8477146f403b8577146f403b8677142c333d7978132c333d7a78136f403b7b78135f35387c78135f35387d78136f403b7e78136f403b7f78136f403b8078136f403b8178136f403b8278136f403b8378135f35388478135f35388578135f35388678132c333d7979122c333d7a79125f35387b79125f35387c79125f35387d79125f35387e79125f35387f79125f35388079125f35388179125f35388279125f35388379125f35388479125f35388579122c333d8679122c333d7a7a112c333d7b7a115f35387c7a115f35387d7a115f35387e7a115f35387f7a115f3538807a115f3538817a115f3538827a115f3538837a115f3538847a115f3538857a112c333d7b7b102c333d7c7b105f35387d7b105f35387e7b105f35387f7b105f3538807b105f3538817b105f3538827b105f3538837b105f3538847b102c333d7c7c0f2c333d7d7c0f98202e7e7c0fa432347f7c0fb64c3b807c0fb64c3b817c0fa43234827c0f98202e837c0f2c333d7b7d0e2c333d7c7d0e2c333d7d7d0e98202e7e7d0e98202e7f7d0ea43234807d0ea43234817d0ea43234827d0e98202e837d0e2c333d847d0e2c333d7b7e0d2a638e7c7e0d428a9b7d7e0d428a9b7e7e0d428a9b7f7e0d428a9b807e0d428a9b817e0d428a9b827e0d428a9b837e0d428a9b847e0d2a638e7a7f0c2c333d7b7f0c428a9b7c7f0c63a9a47d7f0c63a9a47e7f0c63a9a47f7f0c63a9a4807f0c63a9a4817f0c63a9a4827f0c63a9a4837f0c63a9a4847f0c428a9b857f0c2c333d7a800b2c333d7b800b63a9a47c800b63a9a47d800b63a9a47e800b63a9a47f800b63a9a480800b63a9a481800b63a9a482800b63a9a483800b63a9a484800b63a9a485800b2c333d7a810a2c333d7b810a428a9b7c810a428a9b7d810a428a9b7e810a428a9b7f810a428a9b80810a428a9b81810a428a9b82810a428a9b83810a428a9b84810a428a9b85810a2c333d7a82092c333d7b82092a638e7c82092a638e7d82092a638e7e82092a638e7f82092a638e8082092a638e8182092a638e8282092a638e8382092a638e8482092a638e8582092c333d7b83082c333d7c83082c333d7d83082c333d7e83082c333d7f83082c333d8083082c333d8183082c333d8283082c333d8383082c333d8483082c333d7c84072c333d7d8407ae93797e8407ae93797f84072c333d8084072c333d818407ae9379828407ae93798384072c333d7d85062c333d7e85062c333d8185062c333d8285062c333d\");\n    const Mons$Assets$char$boy_l_0 = Image3D$parse$(\"7b711a2c333d7c711a2c333d7b72192c333d7c72195f35387d72192c333d7e72192c333d7f72192c333d8072192c333d8172192c333d8272192c333d8372192c333d7973182c333d7a73182c333d7b73182c333d7c73185f35387d73186f403b7e73189f5b447f73189f5b448073189f5b448173189f5b448273189f5b448373189f5b448473182c333d7974172c333d7a74175f35387b74175f35387c74176f403b7d74176f403b7e74176f403b7f7417884e3f807417884e3f817417884e3f827417884e3f837417884e3f8474176f403b8574172c333d7a75165f35387b75166f403b7c75166f403b7d75166f403b7e75166f403b7f75166f403b8075166f403b8175166f403b8275166f403b8375166f403b8475166f403b8575165f35388675162c333d7976152c333d7a76156f403b7b76156f403b7c76155f35387d76156f403b7e76156f403b7f76156f403b8076156f403b8176156f403b8276156f403b8376156f403b8476156f403b8576155f35388676152c333d7977142c333d7a77146f403b7b77145f35387c77142c333d7d77145f35387e77146f403b7f77146f403b8077146f403b8177146f403b8277146f403b8377146f403b8477145f35388577145f35388677142c333d7978132c333d7a78135f35387b78132c333d7c7813a5876e7d78132c333d7e78135f35387f78135f35388078136f403b8178136f403b8278135f35388378135f35388478135f35388578135f35388678132c333d7a79122c333d7b7912a5876e7c79122c333d7d7912a5876e7e79122c333d7f79122c333d8079125f35388179125f35388279125f35388379125f35388479125f35388579125f35388679122c333d7a7a112c333d7b7a11cab89d7c7a113f43537d7a11bba38a7e7a11ae93797f7a11a5876e807a112c333d817a115f3538827a115f3538837a115f3538847a115f3538857a112c333d7b7b102c333d7c7b10fa83a97d7b10db61767e7b10ae93797f7b10ae9379807b10a5876e817b102c333d827b102c333d837b102c333d847b102c333d7b7c0f2c333d7c7c0fb64c3b7d7c0fb64c3b7e7c0fa432347f7c0f98202e807c0f98202e817c0f98202e827c0f98202e837c0f2c333d7b7d0e2c333d7c7d0ea432347d7d0ea432347e7d0ea432347f7d0ea43234807d0ea43234817d0e98202e827d0e98202e837d0e2c333d7c7e0d2c333d7d7e0d2a638e7e7e0d428a9b7f7e0d428a9b807e0d428a9b817e0d428a9b827e0d2a638e837e0d2c333d7c7f0c2c333d7d7f0c63a9a47e7f0c63a9a47f7f0c63a9a4807f0c63a9a4817f0c428a9b827f0c428a9b837f0c2c333d7c800b2c333d7d800b63a9a47e800b63a9a47f800b63a9a480800b428a9b81800b428a9b82800b428a9b83800b2c333d7d810a2c333d7e810a428a9b7f810a428a9b80810a428a9b81810a428a9b82810a2a638e83810a2c333d7e82092c333d7f82092a638e8082092a638e8182092a638e8282092a638e8382092c333d7e83082c333d7f83082c333d8083082c333d8183082c333d8283082c333d7d84072c333d7e8407bba38a7f8407bba38a808407ae9379818407ae93798284072c333d7d85062c333d7e85062c333d7f85062c333d8085062c333d8185062c333d\");\n    const Mons$Assets$char$boy_d_0 = Image3D$parse$(\"7b711a2c333d7c711a2c333d7b72192c333d7c72199f5b447d72192c333d7e72192c333d7f72192c333d8072192c333d8172192c333d8272192c333d7973182c333d7a73182c333d7b73182c333d7c7318884e3f7d73186f403b7e73186f403b7f73186f403b8073186f403b8173186f403b827318884e3f8373182c333d7974172c333d7a74179f5b447b7417884e3f7c74176f403b7d74179f5b447e74176f403b7f74179f5b448074179f5b448174179f5b448274179f5b448374176f403b8474172c333d7a75162c333d7b75166f403b7c75166f403b7d7516884e3f7e75166f403b7f7516884e3f807516884e3f817516884e3f827516884e3f8375166f403b8475169f5b448575162c333d7a76152c333d7b76156f403b7c76156f403b7d76156f403b7e76156f403b7f76156f403b8076156f403b8176156f403b8276156f403b8376156f403b8476156f403b857615884e3f8676152c333d7977142c333d7a7714884e3f7b77146f403b7c77145f35387d77142c333d7e77145f35387f77146f403b8077146f403b8177145f35388277145f35388377145f35388477145f35388577146f403b8677142c333d7978132c333d7a78136f403b7b78135f35387c78132c333d7d7813a5876e7e78132c333d7f78135f35388078135f35388178132c333d8278132c333d8378132c333d8478132c333d8578135f35388678132c333d7979122c333d7a79125f35387b79122c333d7c7912a5876e7d79122c333d7e7912a5876e7f79122c333d8079122c333d817912a5876e8279122c333d837912a5876e847912a5876e8579122c333d8679122c333d7a7a112c333d7b7a11a5876e7c7a11bba38a7d7a113f43537e7a11bba38a7f7a11cab89d807a11cab89d817a11bba38a827a113f4353837a11bba38a847a11bba38a857a112c333d7b7b102c333d7c7b10db61767d7b10fa83a97e7b10ae93797f7b10bba38a807b10bba38a817b10ae9379827b10fa83a9837b10db6176847b102c333d7c7c0f2c333d7d7c0f98202e7e7c0fa432347f7c0fb64c3b807c0fb64c3b817c0fa43234827c0f98202e837c0f2c333d7b7d0e2c333d7c7d0e2c333d7d7d0e98202e7e7d0e98202e7f7d0ea43234807d0ea43234817d0e98202e827d0e98202e837d0e2c333d847d0e2c333d7b7e0d2a638e7c7e0d428a9b7d7e0d428a9b7e7e0d428a9b7f7e0d2a638e807e0d98202e817e0d98202e827e0d428a9b837e0d428a9b847e0d2a638e7a7f0c2c333d7b7f0c428a9b7c7f0c63a9a47d7f0c63a9a47e7f0c63a9a47f7f0c428a9b807f0c98202e817f0c98202e827f0c63a9a4837f0c63a9a4847f0c428a9b857f0c2c333d7a800b2c333d7b800b63a9a47c800b63a9a47d800b63a9a47e800b428a9b7f800b2c333d80800ba4323481800ba4323482800b63a9a483800b63a9a484800b63a9a485800b2c333d7a810a2c333d7b810a428a9b7c810a428a9b7d810a428a9b7e810a2c333d7f810a5f353880810a5f353881810a2c333d82810a428a9b83810a428a9b84810a428a9b85810a2c333d7a82092c333d7b82092a638e7c82092a638e7d82092c333d7e82095f35387f8209884e3f808209884e3f8182095f35388282092c333d8382092a638e8482092a638e8582092c333d7b83082c333d7c83082c333d7d83086f403b7e83086f403b7f83082c333d8083082c333d8183086f403b8283086f403b8383082c333d8483082c333d7c84072c333d7d8407ae93797e8407ae93797f84072c333d8084072c333d818407ae9379828407ae93798384072c333d7d85062c333d7e85062c333d8185062c333d8285062c333d\");\n    const Mons$Assets$char$boy_r_1 = Image3D$parse$(\"83711a2c333d84711a2c333d7c72192c333d7d72192c333d7e72192c333d7f72192c333d8072192c333d8172192c333d8272192c333d8372195f35388472192c333d7b73182c333d7c73189f5b447d73189f5b447e73189f5b447f73189f5b448073189f5b448173189f5b448273186f403b8373185f35388473182c333d8573182c333d8673182c333d7a74172c333d7b74176f403b7c7417884e3f7d7417884e3f7e7417884e3f7f7417884e3f807417884e3f8174176f403b8274176f403b8374176f403b8474175f35388574175f35388674172c333d7975162c333d7a75165f35387b75166f403b7c75166f403b7d75166f403b7e75166f403b7f75166f403b8075166f403b8175166f403b8275166f403b8375166f403b8475166f403b8575165f35387976152c333d7a76155f35387b76156f403b7c76156f403b7d76156f403b7e76156f403b7f76156f403b8076156f403b8176156f403b8276156f403b8376155f35388476156f403b8576156f403b8676152c333d7977142c333d7a77145f35387b77145f35387c77146f403b7d77146f403b7e77146f403b7f77146f403b8077146f403b8177146f403b8277145f35388377142c333d8477145f35388577146f403b8677142c333d7978132c333d7a78135f35387b78135f35387c78135f35387d78135f35387e78136f403b7f78136f403b8078135f35388178135f35388278132c333d837813a5876e8478132c333d8578135f35388678132c333d7979122c333d7a79125f35387b79125f35387c79125f35387d79125f35387e79125f35387f79125f35388079122c333d8179122c333d827912a5876e8379122c333d847912a5876e8579122c333d7a7a112c333d7b7a115f35387c7a115f35387d7a115f35387e7a115f35387f7a112c333d807a11a5876e817a11ae9379827a11bba38a837a113f4353847a11cab89d857a112c333d7b7b102c333d7c7b102c333d7d7b102c333d7e7b102c333d7f7b10a5876e807b10ae9379817b10ae9379827b10db6176837b10fa83a9847b102c333d7c7c0f2c333d7d7c0f98202e7e7c0f98202e7f7c0f98202e807c0f98202e817c0fa43234827c0fb64c3b837c0fb64c3b847c0f2c333d7c7d0e2c333d7d7d0e98202e7e7d0e98202e7f7d0ea43234807d0ea43234817d0ea43234827d0ea43234837d0ea43234847d0e2c333d7c7e0d2c333d7d7e0d2a638e7e7e0d428a9b7f7e0d428a9b807e0d428a9b817e0d428a9b827e0d2a638e837e0d2c333d7c7f0c2c333d7d7f0c428a9b7e7f0c428a9b7f7f0c63a9a4807f0c63a9a4817f0c63a9a4827f0c63a9a4837f0c2c333d7b800b2c333d7c800b428a9b7d800b428a9b7e800b428a9b7f800b428a9b80800b63a9a481800b63a9a482800b428a9b83800b2c333d7a810a2c333d7b810a428a9b7c810a2c333d7d810a428a9b7e810a428a9b7f810a428a9b80810a428a9b81810a428a9b82810a2a638e83810a2c333d7b82092c333d7c8209ae93797d82092c333d7e82092c333d7f82092a638e8082092a638e8182092a638e8282092c333d8382092c333d7b83082c333d7c8308ae93797d8308ae93797e83082c333d7f83082c333d8083082c333d8183082c333d828308bba38a838308bba38a8483082c333d7b84072c333d7c8407bba38a7d84072c333d8084072c333d818407ae93798284072c333d8384072c333d8484072c333d7c85062c333d8185062c333d8285062c333d\");\n    const Mons$Assets$char$boy_u_1 = Image3D$parse$(\"7b711a2c333d7c711a2c333d7b72192c333d7c72199f5b447d72192c333d7e72192c333d7f72192c333d8072192c333d8172192c333d8272192c333d7973182c333d7a73182c333d7b73182c333d7c7318884e3f7d73186f403b7e73186f403b7f73186f403b8073186f403b8173186f403b827318884e3f8373182c333d7974172c333d7a74179f5b447b7417884e3f7c74176f403b7d74179f5b447e74176f403b7f74179f5b448074179f5b448174179f5b448274179f5b448374176f403b8474172c333d7a75162c333d7b75166f403b7c75166f403b7d7516884e3f7e75166f403b7f7516884e3f807516884e3f817516884e3f827516884e3f8375166f403b8475169f5b448575162c333d7a76152c333d7b76156f403b7c76156f403b7d76156f403b7e76156f403b7f76156f403b8076156f403b8176156f403b8276156f403b8376156f403b8476156f403b857615884e3f8676152c333d7977142c333d7a7714884e3f7b77146f403b7c77146f403b7d77146f403b7e77146f403b7f77146f403b8077146f403b8177146f403b8277146f403b8377146f403b8477146f403b8577146f403b8677142c333d7978132c333d7a78136f403b7b78135f35387c78135f35387d78136f403b7e78136f403b7f78136f403b8078136f403b8178136f403b8278136f403b8378135f35388478135f35388578135f35388678132c333d7979122c333d7a79125f35387b79125f35387c79125f35387d79125f35387e79125f35387f79125f35388079125f35388179125f35388279125f35388379125f35388479125f35388579122c333d8679122c333d7a7a112c333d7b7a115f35387c7a115f35387d7a115f35387e7a115f35387f7a115f3538807a115f3538817a115f3538827a115f3538837a115f3538847a115f3538857a112c333d7b7b102c333d7c7b105f35387d7b105f35387e7b105f35387f7b105f3538807b105f3538817b105f3538827b105f3538837b105f3538847b102c333d7b7c0f2c333d7c7c0f2c333d7d7c0f98202e7e7c0fa432347f7c0fb64c3b807c0fb64c3b817c0fa43234827c0f98202e837c0f2c333d7b7d0e2a638e7c7d0e2a638e7d7d0e98202e7e7d0e98202e7f7d0ea43234807d0ea43234817d0ea43234827d0e98202e837d0e2c333d847d0e2c333d7a7e0d2c333d7b7e0d428a9b7c7e0d428a9b7d7e0d428a9b7e7e0d428a9b7f7e0d428a9b807e0d428a9b817e0d428a9b827e0d428a9b837e0d428a9b847e0d2a638e7a7f0c2c333d7b7f0c63a9a47c7f0c63a9a47d7f0c63a9a47e7f0c63a9a47f7f0c63a9a4807f0c63a9a4817f0c63a9a4827f0c63a9a4837f0c63a9a4847f0c428a9b857f0c2c333d7a800b2c333d7b800b428a9b7c800b63a9a47d800b63a9a47e800b63a9a47f800b63a9a480800b63a9a481800b63a9a482800b63a9a483800b63a9a484800b63a9a485800b2c333d7a810a2c333d7b810a2a638e7c810a428a9b7d810a428a9b7e810a428a9b7f810a428a9b80810a428a9b81810a428a9b82810a428a9b83810a428a9b84810a428a9b85810a2c333d7b82092c333d7c82092a638e7d82092a638e7e82092a638e7f82092a638e8082092a638e8182092a638e8282092a638e8382092a638e8482092a638e8582092c333d7c83082c333d7d83082c333d7e83082c333d7f83082c333d8083082c333d8183082c333d8283082c333d8383082c333d8483082c333d8084072c333d818407ae9379828407ae93798384072c333d8185062c333d8285062c333d\");\n    const Mons$Assets$char$boy_l_1 = Image3D$parse$(\"7b711a2c333d7c711a2c333d7b72192c333d7c72195f35387d72192c333d7e72192c333d7f72192c333d8072192c333d8172192c333d8272192c333d8372192c333d7973182c333d7a73182c333d7b73182c333d7c73185f35387d73186f403b7e73189f5b447f73189f5b448073189f5b448173189f5b448273189f5b448373189f5b448473182c333d7974172c333d7a74175f35387b74175f35387c74176f403b7d74176f403b7e74176f403b7f7417884e3f807417884e3f817417884e3f827417884e3f837417884e3f8474176f403b8574172c333d7a75165f35387b75166f403b7c75166f403b7d75166f403b7e75166f403b7f75166f403b8075166f403b8175166f403b8275166f403b8375166f403b8475166f403b8575165f35388675162c333d7976152c333d7a76156f403b7b76156f403b7c76155f35387d76156f403b7e76156f403b7f76156f403b8076156f403b8176156f403b8276156f403b8376156f403b8476156f403b8576155f35388676152c333d7977142c333d7a77146f403b7b77145f35387c77142c333d7d77145f35387e77146f403b7f77146f403b8077146f403b8177146f403b8277146f403b8377146f403b8477145f35388577145f35388677142c333d7978132c333d7a78135f35387b78132c333d7c7813a5876e7d78132c333d7e78135f35387f78135f35388078136f403b8178136f403b8278135f35388378135f35388478135f35388578135f35388678132c333d7a79122c333d7b7912a5876e7c79122c333d7d7912a5876e7e79122c333d7f79122c333d8079125f35388179125f35388279125f35388379125f35388479125f35388579125f35388679122c333d7a7a112c333d7b7a11cab89d7c7a113f43537d7a11bba38a7e7a11ae93797f7a11a5876e807a112c333d817a115f3538827a115f3538837a115f3538847a115f3538857a112c333d7b7b102c333d7c7b10fa83a97d7b10db61767e7b10ae93797f7b10ae9379807b10a5876e817b102c333d827b102c333d837b102c333d847b102c333d7b7c0f2c333d7c7c0fb64c3b7d7c0fb64c3b7e7c0fa432347f7c0f98202e807c0f98202e817c0f98202e827c0f98202e837c0f2c333d7b7d0e2c333d7c7d0ea432347d7d0ea432347e7d0ea432347f7d0ea43234807d0ea43234817d0e98202e827d0e98202e837d0e2c333d7c7e0d2c333d7d7e0d2a638e7e7e0d428a9b7f7e0d428a9b807e0d428a9b817e0d428a9b827e0d2a638e837e0d2c333d7c7f0c2c333d7d7f0c63a9a47e7f0c63a9a47f7f0c63a9a4807f0c63a9a4817f0c428a9b827f0c428a9b837f0c2c333d7c800b2c333d7d800b428a9b7e800b63a9a47f800b63a9a480800b428a9b81800b428a9b82800b428a9b83800b428a9b84800b2c333d7c810a2c333d7d810a2a638e7e810a428a9b7f810a428a9b80810a428a9b81810a428a9b82810a428a9b83810a2c333d84810a428a9b85810a2c333d7c82092c333d7d82092c333d7e82092a638e7f82092a638e8082092a638e8182092c333d8282092c333d838209ae93798482092c333d7b83082c333d7c8308bba38a7d8308bba38a7e83082c333d7f83082c333d8083082c333d8183082c333d828308ae9379838308ae93798483082c333d7b84072c333d7c84072c333d7d84072c333d7e8407ae93797f84072c333d8284072c333d838407bba38a8484072c333d7d85062c333d7e85062c333d8385062c333d\");\n    const Mons$Assets$char$boy_d_1 = Image3D$parse$(\"7b711a2c333d7c711a2c333d7b72192c333d7c72199f5b447d72192c333d7e72192c333d7f72192c333d8072192c333d8172192c333d8272192c333d7973182c333d7a73182c333d7b73182c333d7c7318884e3f7d73186f403b7e73186f403b7f73186f403b8073186f403b8173186f403b827318884e3f8373182c333d7974172c333d7a74179f5b447b7417884e3f7c74176f403b7d74179f5b447e74176f403b7f74179f5b448074179f5b448174179f5b448274179f5b448374176f403b8474172c333d7a75162c333d7b75166f403b7c75166f403b7d7516884e3f7e75166f403b7f7516884e3f807516884e3f817516884e3f827516884e3f8375166f403b8475169f5b448575162c333d7a76152c333d7b76156f403b7c76156f403b7d76156f403b7e76156f403b7f76156f403b8076156f403b8176156f403b8276156f403b8376156f403b8476156f403b857615884e3f8676152c333d7977142c333d7a7714884e3f7b77146f403b7c77145f35387d77142c333d7e77145f35387f77146f403b8077146f403b8177145f35388277145f35388377145f35388477145f35388577146f403b8677142c333d7978132c333d7a78136f403b7b78135f35387c78132c333d7d7813a5876e7e78132c333d7f78135f35388078135f35388178132c333d8278132c333d8378132c333d8478132c333d8578135f35388678132c333d7979122c333d7a79125f35387b79122c333d7c7912a5876e7d79122c333d7e7912a5876e7f79122c333d8079122c333d817912a5876e8279122c333d837912a5876e847912a5876e8579122c333d8679122c333d7a7a112c333d7b7a11a5876e7c7a11bba38a7d7a113f43537e7a11bba38a7f7a11cab89d807a11cab89d817a11bba38a827a113f4353837a11bba38a847a11bba38a857a112c333d7b7b102c333d7c7b10db61767d7b10fa83a97e7b10ae93797f7b10bba38a807b10bba38a817b10ae9379827b10fa83a9837b10db6176847b102c333d7b7c0f2c333d7c7c0f2c333d7d7c0f98202e7e7c0fa432347f7c0fb64c3b807c0fb64c3b817c0fa43234827c0f98202e837c0f2c333d7a7d0e2c333d7b7d0e2a638e7c7d0e2a638e7d7d0e98202e7e7d0e98202e7f7d0ea43234807d0ea43234817d0e98202e827d0e98202e837d0e2c333d847d0e2c333d7a7e0d2c333d7b7e0d63a9a47c7e0d63a9a47d7e0d428a9b7e7e0d428a9b7f7e0d2a638e807e0d98202e817e0d98202e827e0d428a9b837e0d428a9b847e0d2a638e857e0d2a638e7a7f0c2c333d7b7f0c63a9a47c7f0c63a9a47d7f0c63a9a47e7f0c63a9a47f7f0c428a9b807f0c98202e817f0c98202e827f0c63a9a4837f0c63a9a4847f0c63a9a4857f0c2c333d7a800b2c333d7b800b428a9b7c800b428a9b7d800b428a9b7e800b428a9b7f800b428a9b80800ba4323481800ba4323482800b63a9a483800b63a9a484800b63a9a485800b2c333d7a810a2c333d7b810a2a638e7c810a2a638e7d810a2c333d7e810a2c333d7f810a5f353880810a5f353881810a428a9b82810a428a9b83810a428a9b84810a428a9b85810a2c333d7b82092c333d7c82092c333d7d82095f35387e82095f35387f8209884e3f808209884e3f8182092c333d8282092a638e8382092a638e8482092c333d7c83082c333d7d83086f403b7e83086f403b7f83082c333d8083082c333d8183082c333d8283082c333d8383082c333d7c84072c333d7d8407ae93797e8407ae93797f84072c333d7d85062c333d7e85062c333d\");\n    const Mons$Assets$char$boy_r_2 = Image3D$parse$(\"83711a2c333d84711a2c333d7c72192c333d7d72192c333d7e72192c333d7f72192c333d8072192c333d8172192c333d8272192c333d8372195f35388472192c333d7b73182c333d7c73189f5b447d73189f5b447e73189f5b447f73189f5b448073189f5b448173189f5b448273186f403b8373185f35388473182c333d8573182c333d8673182c333d7a74172c333d7b74176f403b7c7417884e3f7d7417884e3f7e7417884e3f7f7417884e3f807417884e3f8174176f403b8274176f403b8374176f403b8474175f35388574175f35388674172c333d7975162c333d7a75165f35387b75166f403b7c75166f403b7d75166f403b7e75166f403b7f75166f403b8075166f403b8175166f403b8275166f403b8375166f403b8475166f403b8575165f35387976152c333d7a76155f35387b76156f403b7c76156f403b7d76156f403b7e76156f403b7f76156f403b8076156f403b8176156f403b8276156f403b8376155f35388476156f403b8576156f403b8676152c333d7977142c333d7a77145f35387b77145f35387c77146f403b7d77146f403b7e77146f403b7f77146f403b8077146f403b8177146f403b8277145f35388377142c333d8477145f35388577146f403b8677142c333d7978132c333d7a78135f35387b78135f35387c78135f35387d78135f35387e78136f403b7f78136f403b8078135f35388178135f35388278132c333d837813a5876e8478132c333d8578135f35388678132c333d7979122c333d7a79125f35387b79125f35387c79125f35387d79125f35387e79125f35387f79125f35388079122c333d8179122c333d827912a5876e8379122c333d847912a5876e8579122c333d7a7a112c333d7b7a115f35387c7a115f35387d7a115f35387e7a115f35387f7a112c333d807a11a5876e817a11ae9379827a11bba38a837a113f4353847a11cab89d857a112c333d7b7b102c333d7c7b102c333d7d7b102c333d7e7b102c333d7f7b10a5876e807b10ae9379817b10ae9379827b10db6176837b10fa83a9847b102c333d7c7c0f2c333d7d7c0f98202e7e7c0f98202e7f7c0f98202e807c0f98202e817c0fa43234827c0fb64c3b837c0fb64c3b847c0f2c333d7c7d0e2c333d7d7d0e98202e7e7d0e98202e7f7d0ea43234807d0ea43234817d0ea43234827d0ea43234837d0ea43234847d0e2c333d7c7e0d2c333d7d7e0d2a638e7e7e0d428a9b7f7e0d428a9b807e0d428a9b817e0d428a9b827e0d2a638e837e0d2c333d7c7f0c2c333d7d7f0c428a9b7e7f0c428a9b7f7f0c63a9a4807f0c63a9a4817f0c63a9a4827f0c63a9a4837f0c2c333d7c800b2c333d7d800b428a9b7e800b428a9b7f800b428a9b80800b63a9a481800b63a9a482800b428a9b83800b2c333d7b810a2c333d7c810a428a9b7d810a428a9b7e810a428a9b7f810a428a9b80810a428a9b81810a428a9b82810a2a638e83810a2c333d7a82092c333d7b82092a638e7c82092a638e7d82092a638e7e82092a638e7f82092a638e8082092a638e8182092a638e8282092a638e8382092c333d8482092c333d7a83082c333d7b83082a638e7c83082a638e7d83082a638e7e83082c333d7f83082c333d8083082c333d8183082a638e8283082c333d838308ae93798483082c333d7b84072c333d7c84072c333d7d84072c333d8184072c333d828407ae9379838407ae93798484072c333d7c85062c333d8285062c333d8385062c333d\");\n    const Mons$Assets$char$boy_u_2 = Image3D$parse$(\"7b711a2c333d7c711a2c333d7b72192c333d7c72199f5b447d72192c333d7e72192c333d7f72192c333d8072192c333d8172192c333d8272192c333d7973182c333d7a73182c333d7b73182c333d7c7318884e3f7d73186f403b7e73186f403b7f73186f403b8073186f403b8173186f403b827318884e3f8373182c333d7974172c333d7a74179f5b447b7417884e3f7c74176f403b7d74179f5b447e74176f403b7f74179f5b448074179f5b448174179f5b448274179f5b448374176f403b8474172c333d7a75162c333d7b75166f403b7c75166f403b7d7516884e3f7e75166f403b7f7516884e3f807516884e3f817516884e3f827516884e3f8375166f403b8475169f5b448575162c333d7a76152c333d7b76156f403b7c76156f403b7d76156f403b7e76156f403b7f76156f403b8076156f403b8176156f403b8276156f403b8376156f403b8476156f403b857615884e3f8676152c333d7977142c333d7a7714884e3f7b77146f403b7c77146f403b7d77146f403b7e77146f403b7f77146f403b8077146f403b8177146f403b8277146f403b8377146f403b8477146f403b8577146f403b8677142c333d7978132c333d7a78136f403b7b78135f35387c78135f35387d78136f403b7e78136f403b7f78136f403b8078136f403b8178136f403b8278136f403b8378135f35388478135f35388578135f35388678132c333d7979122c333d7a79125f35387b79125f35387c79125f35387d79125f35387e79125f35387f79125f35388079125f35388179125f35388279125f35388379125f35388479125f35388579122c333d8679122c333d7a7a112c333d7b7a115f35387c7a115f35387d7a115f35387e7a115f35387f7a115f3538807a115f3538817a115f3538827a115f3538837a115f3538847a115f3538857a112c333d7b7b102c333d7c7b105f35387d7b105f35387e7b105f35387f7b105f3538807b105f3538817b105f3538827b105f3538837b105f3538847b102c333d7c7c0f2c333d7d7c0f98202e7e7c0fa432347f7c0fb64c3b807c0fb64c3b817c0fa43234827c0f98202e837c0f2c333d847c0f2c333d7b7d0e2c333d7c7d0e2c333d7d7d0e98202e7e7d0ea432347f7d0ea43234807d0ea43234817d0e98202e827d0e98202e837d0e2a638e847d0e2a638e7b7e0d2a638e7c7e0d428a9b7d7e0d428a9b7e7e0d428a9b7f7e0d428a9b807e0d428a9b817e0d428a9b827e0d428a9b837e0d428a9b847e0d428a9b857e0d2c333d7a7f0c2c333d7b7f0c428a9b7c7f0c63a9a47d7f0c63a9a47e7f0c63a9a47f7f0c63a9a4807f0c63a9a4817f0c63a9a4827f0c63a9a4837f0c63a9a4847f0c63a9a4857f0c2c333d7a800b2c333d7b800b63a9a47c800b63a9a47d800b63a9a47e800b63a9a47f800b63a9a480800b63a9a481800b63a9a482800b63a9a483800b63a9a484800b428a9b85800b2c333d7a810a2c333d7b810a428a9b7c810a428a9b7d810a428a9b7e810a428a9b7f810a428a9b80810a428a9b81810a428a9b82810a428a9b83810a428a9b84810a2a638e85810a2c333d7a82092c333d7b82092a638e7c82092a638e7d82092a638e7e82092a638e7f82092a638e8082092a638e8182092a638e8282092a638e8382092a638e8482092c333d7b83082c333d7c83082c333d7d83082c333d7e83082c333d7f83082c333d8083082c333d8183082c333d8283082c333d8383082c333d7c84072c333d7d8407ae93797e8407ae93797f84072c333d7d85062c333d7e85062c333d\");\n    const Mons$Assets$char$boy_l_2 = Image3D$parse$(\"7b711a2c333d7c711a2c333d7b72192c333d7c72195f35387d72192c333d7e72192c333d7f72192c333d8072192c333d8172192c333d8272192c333d8372192c333d7973182c333d7a73182c333d7b73182c333d7c73185f35387d73186f403b7e73189f5b447f73189f5b448073189f5b448173189f5b448273189f5b448373189f5b448473182c333d7974172c333d7a74175f35387b74175f35387c74176f403b7d74176f403b7e74176f403b7f7417884e3f807417884e3f817417884e3f827417884e3f837417884e3f8474176f403b8574172c333d7a75165f35387b75166f403b7c75166f403b7d75166f403b7e75166f403b7f75166f403b8075166f403b8175166f403b8275166f403b8375166f403b8475166f403b8575165f35388675162c333d7976152c333d7a76156f403b7b76156f403b7c76155f35387d76156f403b7e76156f403b7f76156f403b8076156f403b8176156f403b8276156f403b8376156f403b8476156f403b8576155f35388676152c333d7977142c333d7a77146f403b7b77145f35387c77142c333d7d77145f35387e77146f403b7f77146f403b8077146f403b8177146f403b8277146f403b8377146f403b8477145f35388577145f35388677142c333d7978132c333d7a78135f35387b78132c333d7c7813a5876e7d78132c333d7e78135f35387f78135f35388078136f403b8178136f403b8278135f35388378135f35388478135f35388578135f35388678132c333d7a79122c333d7b7912a5876e7c79122c333d7d7912a5876e7e79122c333d7f79122c333d8079125f35388179125f35388279125f35388379125f35388479125f35388579125f35388679122c333d7a7a112c333d7b7a11cab89d7c7a113f43537d7a11bba38a7e7a11ae93797f7a11a5876e807a112c333d817a115f3538827a115f3538837a115f3538847a115f3538857a112c333d7b7b102c333d7c7b10fa83a97d7b10db61767e7b10ae93797f7b10ae9379807b10a5876e817b102c333d827b102c333d837b102c333d847b102c333d7b7c0f2c333d7c7c0fb64c3b7d7c0fb64c3b7e7c0fa432347f7c0f98202e807c0f98202e817c0f98202e827c0f98202e837c0f2c333d7b7d0e2c333d7c7d0ea432347d7d0ea432347e7d0ea432347f7d0ea43234807d0ea43234817d0e98202e827d0e98202e837d0e2c333d7c7e0d2c333d7d7e0d2a638e7e7e0d428a9b7f7e0d428a9b807e0d428a9b817e0d428a9b827e0d2a638e837e0d2c333d7c7f0c2c333d7d7f0c63a9a47e7f0c63a9a47f7f0c63a9a4807f0c63a9a4817f0c428a9b827f0c428a9b837f0c2c333d7c800b2c333d7d800b428a9b7e800b63a9a47f800b63a9a480800b428a9b81800b428a9b82800b428a9b83800b2c333d7c810a2c333d7d810a2a638e7e810a428a9b7f810a428a9b80810a428a9b81810a428a9b82810a428a9b83810a428a9b84810a2c333d7b82092c333d7c82092c333d7d82092a638e7e82092a638e7f82092a638e8082092a638e8182092a638e8282092a638e8382092a638e8482092a638e8582092c333d7b83082c333d7c8308ae93797d83082c333d7e83082a638e7f83082c333d8083082c333d8183082c333d8283082a638e8383082a638e8483082a638e8583082c333d7b84072c333d7c8407ae93797d8407ae93797e84072c333d8284072c333d8384072c333d8484072c333d7c85062c333d7d85062c333d8385062c333d\");\n    const Mons$Assets$char$boy_d_2 = Image3D$parse$(\"7b711a2c333d7c711a2c333d7b72192c333d7c72199f5b447d72192c333d7e72192c333d7f72192c333d8072192c333d8172192c333d8272192c333d7973182c333d7a73182c333d7b73182c333d7c7318884e3f7d73186f403b7e73186f403b7f73186f403b8073186f403b8173186f403b827318884e3f8373182c333d7974172c333d7a74179f5b447b7417884e3f7c74176f403b7d74179f5b447e74176f403b7f74179f5b448074179f5b448174179f5b448274179f5b448374176f403b8474172c333d7a75162c333d7b75166f403b7c75166f403b7d7516884e3f7e75166f403b7f7516884e3f807516884e3f817516884e3f827516884e3f8375166f403b8475169f5b448575162c333d7a76152c333d7b76156f403b7c76156f403b7d76156f403b7e76156f403b7f76156f403b8076156f403b8176156f403b8276156f403b8376156f403b8476156f403b857615884e3f8676152c333d7977142c333d7a7714884e3f7b77146f403b7c77145f35387d77142c333d7e77145f35387f77146f403b8077146f403b8177145f35388277145f35388377145f35388477145f35388577146f403b8677142c333d7978132c333d7a78136f403b7b78135f35387c78132c333d7d7813a5876e7e78132c333d7f78135f35388078135f35388178132c333d8278132c333d8378132c333d8478132c333d8578135f35388678132c333d7979122c333d7a79125f35387b79122c333d7c7912a5876e7d79122c333d7e7912a5876e7f79122c333d8079122c333d817912a5876e8279122c333d837912a5876e847912a5876e8579122c333d8679122c333d7a7a112c333d7b7a11a5876e7c7a11bba38a7d7a113f43537e7a11bba38a7f7a11cab89d807a11cab89d817a11bba38a827a113f4353837a11bba38a847a11bba38a857a112c333d7b7b102c333d7c7b10db61767d7b10fa83a97e7b10ae93797f7b10bba38a807b10bba38a817b10ae9379827b10fa83a9837b10db6176847b102c333d7c7c0f2c333d7d7c0f98202e7e7c0fa432347f7c0fb64c3b807c0fb64c3b817c0fa43234827c0f98202e837c0f2c333d847c0f2c333d7b7d0e2c333d7c7d0e2c333d7d7d0e98202e7e7d0e98202e7f7d0ea43234807d0ea43234817d0e98202e827d0e98202e837d0e2a638e847d0e2a638e857d0e2c333d7a7e0d2a638e7b7e0d2a638e7c7e0d428a9b7d7e0d428a9b7e7e0d428a9b7f7e0d2a638e807e0d98202e817e0d98202e827e0d428a9b837e0d63a9a4847e0d63a9a4857e0d2c333d7a7f0c2c333d7b7f0c63a9a47c7f0c63a9a47d7f0c63a9a47e7f0c63a9a47f7f0c428a9b807f0c98202e817f0c98202e827f0c63a9a4837f0c63a9a4847f0c63a9a4857f0c2c333d7a800b2c333d7b800b63a9a47c800b63a9a47d800b63a9a47e800b63a9a47f800b428a9b80800ba4323481800ba4323482800b428a9b83800b428a9b84800b428a9b85800b2c333d7a810a2c333d7b810a428a9b7c810a428a9b7d810a428a9b7e810a428a9b7f810a5f353880810a5f353881810a2c333d82810a2c333d83810a2a638e84810a2a638e85810a2c333d7b82092c333d7c82092a638e7d82092a638e7e82092c333d7f8209884e3f808209884e3f8182095f35388282095f35388382092c333d8482092c333d7c83082c333d7d83082c333d7e83082c333d7f83082c333d8083082c333d8183086f403b8283086f403b8383082c333d8084072c333d818407ae9379828407ae93798384072c333d8185062c333d8285062c333d\");\n    const Bool$if = a0 => a1 => a2 => (a0 ? a1 : a2);\n    const Mons$Assets$char$battle_boy_u = Image3D$parse$(\"\");\n    const Mons$Skill$hero_kill = ({\n        _: 'Mons.Skill.hero_kill'\n    });\n    const Mons$Attr$new_hero = Mons$Attr$new$(Bool$false, 40, 0, \"HERO\", (_x$1 => _y$2 => _obj_ani$3 => _obj_dir$4 => {\n        var $514 = Mons$walk_char_pack$(_x$1, _y$2, _obj_ani$3, _obj_dir$4, Mons$Assets$char$boy_r_0, Mons$Assets$char$boy_u_0, Mons$Assets$char$boy_l_0, Mons$Assets$char$boy_d_0, Mons$Assets$char$boy_r_1, Mons$Assets$char$boy_u_1, Mons$Assets$char$boy_l_1, Mons$Assets$char$boy_d_1, Mons$Assets$char$boy_r_2, Mons$Assets$char$boy_u_2, Mons$Assets$char$boy_l_2, Mons$Assets$char$boy_d_2);\n        return $514;\n    }), List$nil, Mons$Assets$char$boy_d_0, (_is_up$1 => {\n        var $515 = (_is_up$1 ? Mons$Assets$char$battle_boy_u : Mons$Assets$char$battle_boy_u);\n        return $515;\n    }), List$cons$(Mons$Skill$hero_kill, List$cons$(Mons$Skill$none, List$cons$(Mons$Skill$none, List$cons$(Mons$Skill$none, List$nil)))), Mons$global_scr_mid);\n\n    function Mons$Kind$set_static_sprites$(_spr$1, _x$2, _y$3, _obj_ani$4, _obj_dir$5) {\n        var $516 = _spr$1;\n        return $516;\n    };\n    const Mons$Kind$set_static_sprites = x0 => x1 => x2 => x3 => x4 => Mons$Kind$set_static_sprites$(x0, x1, x2, x3, x4);\n    const Mons$Assets$char$mons_mage = Image3D$parse$(\"7d74172729607e74172729607f74172729608074172729608174172729608274172729607c75162729607d7516ae59b27e7516ae59b27f7516ae59b2807516ae59b2817516ae59b2827516ae59b28375162729607b76152729607c7615ae59b27d7615ae59b27e7615e7cb557f7615e7cb55807615e7cb55817615e7cb55827615ae59b2837615ae59b28476152729607a77142729607b7714ae59b27c7714e7cb557d7714e7cb557e77142729607f7714272960807714272960817714272960827714e7cb55837714e7cb55847714ae59b28577142729607978132729607a78138e4a9d7b7813d296437c78132729607d78132729607e7813ae93797f7813ae9379807813ae9379817813ae9379827813272960837813272960847813d296438578138e4a9d8678132729607879122729607979128e4a9d7a7912d296437b79122729607c7912ae93797d79122c333d7e79122c333d7f7912dacbb0807912dacbb08179122c333d8279122c333d837912ae9379847912272960857912d296438679128e4a9d877912272960787a11272960797a11d296437a7a112729607b7a11ae93797c7a112c333d7d7a11ffffff7e7a11ffffff7f7a112c333d807a112c333d817a11ffffff827a11ffffff837a112c333d847a11ae9379857a11272960867a11d29643877a11272960787b10272960797b10d296437a7b102729607b7b102c333d7c7b10428a9b7d7b10ffffff7e7b10ffffff7f7b102c333d807b102c333d817b10ffffff827b10ffffff837b10428a9b847b102c333d857b10272960867b10d29643877b10272960787c0f272960797c0fd296437a7c0f8e4a9d7b7c0fae93797c7c0fcab89d7d7c0f428a9b7e7c0f428a9b7f7c0f63a9a4807c0f63a9a4817c0f428a9b827c0f428a9b837c0fcab89d847c0fae9379857c0f8e4a9d867c0fd29643877c0f272960787d0e272960797d0e8e4a9d7a7d0eb96b337b7d0eae93797c7d0eae93797d7d0e63a9a47e7d0edacbb07f7d0ef0e8cc807d0ef0e8cc817d0edacbb0827d0e63a9a4837d0eae9379847d0eae9379857d0ed29643867d0e8e4a9d877d0e272960797e0d2729607a7e0db96b337b7e0d2c333d7c7e0dae93797d7e0dcab89d7e7e0ddacbb07f7e0ddacbb0807e0ddacbb0817e0ddacbb0827e0dcab89d837e0dae9379847e0d2c333d857e0db96b33867e0d2729607a7f0c2729607b7f0c2729607c7f0c2c333d7d7f0cae93797e7f0ccab89d7f7f0cdacbb0807f0cdacbb0817f0ccab89d827f0cae9379837f0c2c333d847f0c272960857f0c2729607a800b2729607b800b6a3a867c800b6a3a867d800bae93797e800bcab89d7f800bcab89d80800bcab89d81800bcab89d82800bae937983800b6a3a8684800b6a3a8685800b27296079810a2729607a810a6a3a867b810a6a3a867c810ad296437d810a6a3a867e810aae93797f810aae937980810aae937981810aae937982810a6a3a8683810ad2964384810a6a3a8685810a6a3a8686810a2729607982094a2b717a820990388a7b820990388a7c82094a2b717d82094a2b717e82092729607f8209705a58808209705a588182092729608282094a2b718382094a2b7184820990388a85820990388a8682094a2b717983084a2b717a830890388a7b830890388a7c830890388a7d830890388a7e83084a2b717f8308705a58808308705a588183084a2b7182830890388a83830890388a84830890388a85830890388a8683084a2b717984072729607a84074a2b717b84074a2b717c84074a2b717d84072729607e84074a2b717f8407705a58808407705a588184074a2b718284072729608384074a2b718484074a2b718584074a2b718684072729607a85062729607b85062729607c85062729607d8506705a587e8506705a587f8506272960808506272960818506705a58828506705a588385062729608485062729608585062729607c86052c333d7d8605ae93797e8605ae93797f86052c333d8086052c333d818605ae9379828605ae93798386052c333d7d87042c333d7e87042c333d8187042c333d8287042c333d\");\n    const Mons$Assets$char$battle_mage_d = Image3D$parse$(\"\");\n    const Mons$Skill$hit_4 = ({\n        _: 'Mons.Skill.hit_4'\n    });\n    const Mons$Skill$hit_2 = ({\n        _: 'Mons.Skill.hit_2'\n    });\n    const Mons$Skill$heal = ({\n        _: 'Mons.Skill.heal'\n    });\n    const Mons$Skill$dummy_skills = List$cons$(Mons$Skill$hit_4, List$cons$(Mons$Skill$hit_2, List$cons$(Mons$Skill$heal, List$cons$(Mons$Skill$none, List$nil))));\n    const Mons$Attr$new_mage = Mons$Attr$new$(Bool$false, 40, 0, \"MAGE\", Mons$Kind$set_static_sprites(List$cons$(Mons$Assets$char$mons_mage, List$nil)), List$cons$(Mons$Assets$char$mons_mage, List$nil), Mons$Assets$char$mons_mage, (_is_up$1 => {\n        var $517 = Mons$Assets$char$battle_mage_d;\n        return $517;\n    }), Mons$Skill$dummy_skills, Mons$image_to_global$(74, 74, 40, 12, 0));\n    const Image3D$empty = Image3D$alloc_capacity$(100);\n\n    function Mons$Kind$set_pic$(_spr$1) {\n        var self = _spr$1;\n        switch (self._) {\n            case 'List.cons':\n                var $519 = self.head;\n                var $520 = $519;\n                var $518 = $520;\n                break;\n            case 'List.nil':\n                var $521 = Image3D$empty;\n                var $518 = $521;\n                break;\n        };\n        return $518;\n    };\n    const Mons$Kind$set_pic = x0 => Mons$Kind$set_pic$(x0);\n\n    function Mons$Kind$set_default_battle_spr$(_is_up$1) {\n        var $522 = Image3D$empty;\n        return $522;\n    };\n    const Mons$Kind$set_default_battle_spr = x0 => Mons$Kind$set_default_battle_spr$(x0);\n\n    function Mons$Attr$new_neutral$(_spr$1) {\n        var $523 = Mons$Attr$new$(Bool$false, 0, 0, \"\", Mons$Kind$set_static_sprites(_spr$1), _spr$1, Mons$Kind$set_pic$(_spr$1), Mons$Kind$set_default_battle_spr, List$nil, Mons$global_scr_mid);\n        return $523;\n    };\n    const Mons$Attr$new_neutral = x0 => Mons$Attr$new_neutral$(x0);\n\n    function Mons$Kind$attr$(_kin$1) {\n        var _default_pos$2 = Mons$global_scr_mid;\n        var _set_pos_lvl1$3 = (_x$3 => _y$4 => {\n            var $525 = Mons$image_to_global$(80, 80, _x$3, _y$4, 1);\n            return $525;\n        });\n        var _set_pos_lvl2$4 = (_x$4 => _y$5 => {\n            var $526 = Mons$image_to_global$(20, 20, _x$4, _y$5, 2);\n            return $526;\n        });\n        var self = _kin$1;\n        switch (self._) {\n            case 'Mons.Kind.Mons':\n                var $527 = self.ele;\n                var self = $527;\n                switch (self._) {\n                    case 'Mons.Kind.mons.HERO':\n                        var $529 = Mons$Attr$new_hero;\n                        var $528 = $529;\n                        break;\n                    case 'Mons.Kind.mons.MAGE':\n                        var $530 = Mons$Attr$new_mage;\n                        var $528 = $530;\n                        break;\n                    case 'Mons.Kind.mons.BEHOLDER':\n                    case 'Mons.Kind.mons.ZOIO':\n                    case 'Mons.Kind.mons.CYCLOPE':\n                    case 'Mons.Kind.mons.POISOLICK':\n                    case 'Mons.Kind.mons.TROWL':\n                    case 'Mons.Kind.mons.MIMIC':\n                    case 'Mons.Kind.mons.MIMIC2':\n                    case 'Mons.Kind.mons.AZULA':\n                    case 'Mons.Kind.mons.EMERELDER':\n                    case 'Mons.Kind.mons.EMERELDER2':\n                        var $531 = Mons$Attr$new_neutral$(List$cons$(Image3D$empty, List$nil));\n                        var $528 = $531;\n                        break;\n                };\n                var $524 = $528;\n                break;\n            case 'Mons.Kind.Const':\n            case 'Mons.Kind.Terrain':\n            case 'Mons.Kind.Interactive':\n                var $532 = Mons$Attr$new_neutral$(List$cons$(Image3D$empty, List$nil));\n                var $524 = $532;\n                break;\n        };\n        return $524;\n    };\n    const Mons$Kind$attr = x0 => Mons$Kind$attr$(x0);\n\n    function Mons$Object$get_ani$(_obj$1) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $534 = self.ani;\n                var $535 = $534;\n                var $533 = $535;\n                break;\n        };\n        return $533;\n    };\n    const Mons$Object$get_ani = x0 => Mons$Object$get_ani$(x0);\n\n    function Mons$Object$is_standing$(_obj$1) {\n        var $536 = (Mons$Object$get_ani$(_obj$1) === 0);\n        return $536;\n    };\n    const Mons$Object$is_standing = x0 => Mons$Object$is_standing$(x0);\n\n    function Image3D$get_length$(_img$1) {\n        var self = _img$1;\n        switch (self._) {\n            case 'Image3D.new':\n                var $538 = self.length;\n                var $539 = $538;\n                var $537 = $539;\n                break;\n        };\n        return $537;\n    };\n    const Image3D$get_length = x0 => Image3D$get_length$(x0);\n\n    function Array$get$(_idx$3, _arr$4) {\n        var $540 = Word$foldl$(Array$extract_tip, (_rec$6 => _arr$7 => {\n            var _arr_l$8 = Array$extract_tie$(_arr$7);\n            var self = _arr_l$8;\n            switch (self._) {\n                case 'Pair.new':\n                    var $542 = self.fst;\n                    var $543 = _rec$6($542);\n                    var $541 = $543;\n                    break;\n            };\n            return $541;\n        }), (_rec$6 => _arr$7 => {\n            var _arr_r$8 = Array$extract_tie$(_arr$7);\n            var self = _arr_r$8;\n            switch (self._) {\n                case 'Pair.new':\n                    var $545 = self.snd;\n                    var $546 = _rec$6($545);\n                    var $544 = $546;\n                    break;\n            };\n            return $544;\n        }), _idx$3)(_arr$4);\n        return $540;\n    };\n    const Array$get = x0 => x1 => Array$get$(x0, x1);\n    const Buffer32$get = a0 => a1 => ((a1[a0]));\n    const Image3D$get_pos = a0 => a1 => ((a1.buffer[a0 * 2]));\n    const Image3D$get_col = a0 => a1 => ((a1.buffer[a0 * 2 + 1]));\n\n    function Pos32$sub$(_a$1, _b$2) {\n        var _a_x$3 = ((_a$1 & 0xFFF));\n        var _a_y$4 = (((_a$1 >>> 12) & 0xFFF));\n        var _a_z$5 = ((_a$1 >>> 24));\n        var _b_x$6 = ((_b$2 & 0xFFF));\n        var _b_y$7 = (((_b$2 >>> 12) & 0xFFF));\n        var _b_z$8 = ((_b$2 >>> 24));\n        var _c_x$9 = (Math.max(_a_x$3 - _b_x$6, 0));\n        var _c_y$10 = (Math.max(_a_y$4 - _b_y$7, 0));\n        var _c_z$11 = (Math.max(_a_z$5 - _b_z$8, 0));\n        var $547 = ((0 | _c_x$9 | (_c_y$10 << 12) | (_c_z$11 << 24)));\n        return $547;\n    };\n    const Pos32$sub = x0 => x1 => Pos32$sub$(x0, x1);\n\n    function Pos32$add$(_a$1, _b$2) {\n        var _a_x$3 = ((_a$1 & 0xFFF));\n        var _a_y$4 = (((_a$1 >>> 12) & 0xFFF));\n        var _a_z$5 = ((_a$1 >>> 24));\n        var _b_x$6 = ((_b$2 & 0xFFF));\n        var _b_y$7 = (((_b$2 >>> 12) & 0xFFF));\n        var _b_z$8 = ((_b$2 >>> 24));\n        var _c_x$9 = ((_a_x$3 + _b_x$6) >>> 0);\n        var _c_y$10 = ((_a_y$4 + _b_y$7) >>> 0);\n        var _c_z$11 = ((_a_z$5 + _b_z$8) >>> 0);\n        var $548 = ((0 | _c_x$9 | (_c_y$10 << 12) | (_c_z$11 << 24)));\n        return $548;\n    };\n    const Pos32$add = x0 => x1 => Pos32$add$(x0, x1);\n    const Mons$vox_mid = ((0 | 128 | (128 << 12) | (0 << 24)));\n\n    function Mons$draw$image$(_img$1, _pos$2, _scr$3) {\n        var _len$4 = Image3D$get_length$(_img$1);\n        var _scr$5 = (() => {\n            var $550 = _scr$3;\n            var $551 = 0;\n            var $552 = _len$4;\n            let _scr$6 = $550;\n            for (let _i$5 = $551; _i$5 < $552; ++_i$5) {\n                var _pix_pos$7 = ((_img$1.buffer[_i$5 * 2]));\n                var _pix_col$8 = ((_img$1.buffer[_i$5 * 2 + 1]));\n                var _pix_pos$9 = Pos32$sub$(Pos32$add$(_pos$2, _pix_pos$7), Mons$vox_mid);\n                var $550 = ((_scr$6.buffer[_scr$6.length * 2] = _pix_pos$9, _scr$6.buffer[_scr$6.length * 2 + 1] = _pix_col$8, _scr$6.length++, _scr$6));\n                _scr$6 = $550;\n            };\n            return _scr$6;\n        })();\n        var $549 = _scr$5;\n        return $549;\n    };\n    const Mons$draw$image = x0 => x1 => x2 => Mons$draw$image$(x0, x1, x2);\n    const Mons$f_exe = Image3D$parse$(\"7d7f28ffffff7e7f28ffffff7f7f28ffffff807f28ffffff817f28ffffff\");\n    const List$for = a0 => a1 => a2 => (list_for(a0)(a1)(a2));\n\n    function List$imap$(_f$3, _xs$4) {\n        var self = _xs$4;\n        switch (self._) {\n            case 'List.cons':\n                var $554 = self.head;\n                var $555 = self.tail;\n                var $556 = List$cons$(_f$3(0n)($554), List$imap$((_n$7 => {\n                    var $557 = _f$3(Nat$succ$(_n$7));\n                    return $557;\n                }), $555));\n                var $553 = $556;\n                break;\n            case 'List.nil':\n                var $558 = List$nil;\n                var $553 = $558;\n                break;\n        };\n        return $553;\n    };\n    const List$imap = x0 => x1 => List$imap$(x0, x1);\n\n    function List$indices$u32$(_xs$2) {\n        var $559 = List$imap$((_i$3 => _x$4 => {\n            var $560 = Pair$new$((Number(_i$3)), _x$4);\n            return $560;\n        }), _xs$2);\n        return $559;\n    };\n    const List$indices$u32 = x0 => List$indices$u32$(x0);\n\n    function String$to_list$(_str$1) {\n        var self = _str$1;\n        if (self.length === 0) {\n            var $562 = List$nil;\n            var $561 = $562;\n        } else {\n            var $563 = self.charCodeAt(0);\n            var $564 = self.slice(1);\n            var $565 = List$cons$($563, String$to_list$($564));\n            var $561 = $565;\n        };\n        return $561;\n    };\n    const String$to_list = x0 => String$to_list$(x0);\n    const U16$to_bits = a0 => (u16_to_bits(a0));\n\n    function Mons$font$get_img$(_char$1, _map$2) {\n        var self = Map$get$((u16_to_bits(_char$1)), _map$2);\n        switch (self._) {\n            case 'Maybe.some':\n                var $567 = self.value;\n                var $568 = Maybe$some$($567);\n                var $566 = $568;\n                break;\n            case 'Maybe.none':\n                var $569 = Maybe$none;\n                var $566 = $569;\n                break;\n        };\n        return $566;\n    };\n    const Mons$font$get_img = x0 => x1 => Mons$font$get_img$(x0, x1);\n\n    function Mons$draw$char$(_chr$1, _font_map$2, _chr_pos$3, _scr$4) {\n        var self = Mons$font$get_img$(_chr$1, _font_map$2);\n        switch (self._) {\n            case 'Maybe.some':\n                var $571 = self.value;\n                var _img$6 = $571;\n                var _img_len$7 = Image3D$get_length$(_img$6);\n                var _scr$8 = (() => {\n                    var $573 = _scr$4;\n                    var $574 = 0;\n                    var $575 = _img_len$7;\n                    let _scr$9 = $573;\n                    for (let _i$8 = $574; _i$8 < $575; ++_i$8) {\n                        var _vox_pos$10 = ((_img$6.buffer[_i$8 * 2]));\n                        var _pos$11 = Pos32$sub$(Pos32$add$(_chr_pos$3, _vox_pos$10), Mons$vox_mid);\n                        var _col$12 = ((_img$6.buffer[_i$8 * 2 + 1]));\n                        var $573 = ((_scr$9.buffer[_scr$9.length * 2] = _pos$11, _scr$9.buffer[_scr$9.length * 2 + 1] = _col$12, _scr$9.length++, _scr$9));\n                        _scr$9 = $573;\n                    };\n                    return _scr$9;\n                })();\n                var $572 = _scr$8;\n                var $570 = $572;\n                break;\n            case 'Maybe.none':\n                var $576 = _scr$4;\n                var $570 = $576;\n                break;\n        };\n        return $570;\n    };\n    const Mons$draw$char = x0 => x1 => x2 => x3 => Mons$draw$char$(x0, x1, x2, x3);\n\n    function Mons$draw$text$(_txt$1, _font_map$2, _chr_pos$3, _scr$4) {\n        var _scr$5 = (() => {\n            var $579 = _scr$4;\n            var $580 = List$indices$u32$(String$to_list$(_txt$1));\n            let _scr$6 = $579;\n            let _pair$5;\n            while ($580._ === 'List.cons') {\n                _pair$5 = $580.head;\n                var self = _pair$5;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $581 = self.fst;\n                        var $582 = self.snd;\n                        var _add_pos$9 = ((0 | (($581 * 6) >>> 0) | (0 << 12) | (0 << 24)));\n                        var $583 = Mons$draw$char$($582, _font_map$2, Pos32$add$(_chr_pos$3, _add_pos$9), _scr$6);\n                        var $579 = $583;\n                        break;\n                };\n                _scr$6 = $579;\n                $580 = $580.tail;\n            }\n            return _scr$6;\n        })();\n        var $577 = _scr$5;\n        return $577;\n    };\n    const Mons$draw$text = x0 => x1 => x2 => x3 => Mons$draw$text$(x0, x1, x2, x3);\n\n    function Mons$draw$list$go$(_texts$1, _horizontal$2, _spacing$3, _font_map$4, _pos$5, _scr$6, _idx$7) {\n        var Mons$draw$list$go$ = (_texts$1, _horizontal$2, _spacing$3, _font_map$4, _pos$5, _scr$6, _idx$7) => ({\n            ctr: 'TCO',\n            arg: [_texts$1, _horizontal$2, _spacing$3, _font_map$4, _pos$5, _scr$6, _idx$7]\n        });\n        var Mons$draw$list$go = _texts$1 => _horizontal$2 => _spacing$3 => _font_map$4 => _pos$5 => _scr$6 => _idx$7 => Mons$draw$list$go$(_texts$1, _horizontal$2, _spacing$3, _font_map$4, _pos$5, _scr$6, _idx$7);\n        var arg = [_texts$1, _horizontal$2, _spacing$3, _font_map$4, _pos$5, _scr$6, _idx$7];\n        while (true) {\n            let [_texts$1, _horizontal$2, _spacing$3, _font_map$4, _pos$5, _scr$6, _idx$7] = arg;\n            var R = (() => {\n                var _x$8 = ((_pos$5 & 0xFFF));\n                var _y$9 = (((_pos$5 >>> 12) & 0xFFF));\n                var self = _horizontal$2;\n                if (self) {\n                    var $585 = ((0 | ((((_spacing$3 + _idx$7) >>> 0) + _x$8) >>> 0) | (_y$9 << 12) | (0 << 24)));\n                    var _pos$10 = $585;\n                } else {\n                    var $586 = ((0 | _x$8 | (((((_spacing$3 + _idx$7) >>> 0) + _y$9) >>> 0) << 12) | (0 << 24)));\n                    var _pos$10 = $586;\n                };\n                var self = _texts$1;\n                switch (self._) {\n                    case 'List.cons':\n                        var $587 = self.head;\n                        var $588 = self.tail;\n                        var _scr$13 = Mons$draw$text$($587, _font_map$4, _pos$10, _scr$6);\n                        var $589 = Mons$draw$list$go$($588, _horizontal$2, _spacing$3, _font_map$4, _pos$10, _scr$13, ((_idx$7 + 1) >>> 0));\n                        var $584 = $589;\n                        break;\n                    case 'List.nil':\n                        var $590 = _scr$6;\n                        var $584 = $590;\n                        break;\n                };\n                return $584;\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Mons$draw$list$go = x0 => x1 => x2 => x3 => x4 => x5 => x6 => Mons$draw$list$go$(x0, x1, x2, x3, x4, x5, x6);\n\n    function Mons$draw$list$(_texts$1, _horizontal$2, _spacing$3, _font_map$4, _start_pos$5, _scr$6) {\n        var _qtd$7 = (Number((list_length(_texts$1))));\n        var $591 = Mons$draw$list$go$(_texts$1, _horizontal$2, _spacing$3, _font_map$4, _start_pos$5, _scr$6, 0);\n        return $591;\n    };\n    const Mons$draw$list = x0 => x1 => x2 => x3 => x4 => x5 => Mons$draw$list$(x0, x1, x2, x3, x4, x5);\n\n    function Mons$font$set_img$(_char$1, _img$2, _map$3) {\n        var $592 = Map$set$((u16_to_bits(_char$1)), _img$2, _map$3);\n        return $592;\n    };\n    const Mons$font$set_img = x0 => x1 => x2 => Mons$font$set_img$(x0, x1, x2);\n\n    function U16$new$(_value$1) {\n        var $593 = word_to_u16(_value$1);\n        return $593;\n    };\n    const U16$new = x0 => U16$new$(x0);\n\n    function U16$inc$(_a$1) {\n        var self = _a$1;\n        switch ('u16') {\n            case 'u16':\n                var $595 = u16_to_word(self);\n                var $596 = U16$new$(Word$inc$($595));\n                var $594 = $596;\n                break;\n        };\n        return $594;\n    };\n    const U16$inc = x0 => U16$inc$(x0);\n    const U16$zero = U16$new$(Word$zero$(16n));\n    const Nat$to_u16 = a0 => (Number(a0));\n    const Mons$Char_black$100 = Image3D$parse$(\"817c28ffffff817d28ffffff7e7e28ffffff7f7e28ffffff807e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff818328ffffff\");\n    const Mons$Char_black$101 = Image3D$parse$(\"7e7e28ffffff7f7e28ffffff807e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff7e8028ffffff7f8028ffffff808028ffffff818028ffffff7d8128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$102 = Image3D$parse$(\"7f7c28ffffff807c28ffffff817c28ffffff7e7d28ffffff7e7e28ffffff7d7f28ffffff7e7f28ffffff7f7f28ffffff807f28ffffff817f28ffffff7e8028ffffff7e8128ffffff7e8228ffffff7e8328ffffff\");\n    const Mons$Char_black$103 = Image3D$parse$(\"7e7e28ffffff7f7e28ffffff807e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff818328ffffff818428ffffff7e8528ffffff7f8528ffffff808528ffffff\");\n    const Mons$Char_black$104 = Image3D$parse$(\"7d7c28ffffff7d7d28ffffff7d7e28ffffff7e7e28ffffff7f7e28ffffff807e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7d8328ffffff818328ffffff\");\n    const Mons$Char_black$105 = Image3D$parse$(\"7f7d28ffffff7e7f28ffffff7f7f28ffffff7f8028ffffff7f8128ffffff7f8228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$106 = Image3D$parse$(\"817d28ffffff7f7f28ffffff807f28ffffff817f28ffffff818028ffffff818128ffffff818228ffffff818328ffffff818428ffffff7e8528ffffff7f8528ffffff808528ffffff\");\n    const Mons$Char_black$107 = Image3D$parse$(\"7d7c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff7d7f28ffffff807f28ffffff7d8028ffffff7e8028ffffff7f8028ffffff7d8128ffffff808128ffffff7d8228ffffff818228ffffff7d8328ffffff818328ffffff\");\n    const Mons$Char_black$108 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff7f7d28ffffff7f7e28ffffff7f7f28ffffff7f8028ffffff7f8128ffffff7f8228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$109 = Image3D$parse$(\"7d7e28ffffff7e7e28ffffff7f7e28ffffff807e28ffffff7d7f28ffffff7f7f28ffffff817f28ffffff7d8028ffffff7f8028ffffff818028ffffff7d8128ffffff7f8128ffffff818128ffffff7d8228ffffff7f8228ffffff818228ffffff7d8328ffffff7f8328ffffff818328ffffff\");\n    const Mons$Char_black$110 = Image3D$parse$(\"7d7e28ffffff7e7e28ffffff7f7e28ffffff807e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7d8328ffffff818328ffffff\");\n    const Mons$Char_black$111 = Image3D$parse$(\"7e7e28ffffff7f7e28ffffff807e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$112 = Image3D$parse$(\"7d7e28ffffff7e7e28ffffff7f7e28ffffff807e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7d8328ffffff7e8328ffffff7f8328ffffff808328ffffff7d8428ffffff7d8528ffffff\");\n    const Mons$Char_black$113 = Image3D$parse$(\"7e7e28ffffff7f7e28ffffff807e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff818328ffffff818428ffffff818528ffffff\");\n    const Mons$Char_black$114 = Image3D$parse$(\"7d7e28ffffff807e28ffffff817e28ffffff7d7f28ffffff7f7f28ffffff7d8028ffffff7e8028ffffff7d8128ffffff7d8228ffffff7d8328ffffff\");\n    const Mons$Char_black$115 = Image3D$parse$(\"7e7e28ffffff7f7e28ffffff807e28ffffff817e28ffffff7d7f28ffffff7e8028ffffff7f8028ffffff808028ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$116 = Image3D$parse$(\"7e7c28ffffff7e7d28ffffff7d7e28ffffff7e7e28ffffff7f7e28ffffff807e28ffffff7e7f28ffffff7e8028ffffff7e8128ffffff7e8228ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$117 = Image3D$parse$(\"7d7e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff818328ffffff\");\n    const Mons$Char_black$118 = Image3D$parse$(\"7d7e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7e8228ffffff808228ffffff7f8328ffffff\");\n    const Mons$Char_black$119 = Image3D$parse$(\"7d7e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff7f8128ffffff818128ffffff7d8228ffffff7f8228ffffff818228ffffff7e8328ffffff808328ffffff\");\n    const Mons$Char_black$120 = Image3D$parse$(\"7d7e28ffffff817e28ffffff7e7f28ffffff807f28ffffff7f8028ffffff7f8128ffffff7e8228ffffff808228ffffff7d8328ffffff818328ffffff\");\n    const Mons$Char_black$121 = Image3D$parse$(\"7d7e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff808428ffffff7d8528ffffff7e8528ffffff7f8528ffffff\");\n    const Mons$Char_black$122 = Image3D$parse$(\"7d7e28ffffff7e7e28ffffff7f7e28ffffff807e28ffffff817e28ffffff817f28ffffff7f8028ffffff808028ffffff7e8128ffffff7d8228ffffff7d8328ffffff7e8328ffffff7f8328ffffff808328ffffff818328ffffff\");\n    const Mons$Char_black$123 = Image3D$parse$(\"807c28ffffff7f7d28ffffff7f7e28ffffff7f7f28ffffff7e8028ffffff7f8128ffffff7f8228ffffff808328ffffff\");\n    const Mons$Char_black$124 = Image3D$parse$(\"7f7c28ffffff7f7d28ffffff7f7e28ffffff7f7f28ffffff7f8028ffffff7f8128ffffff7f8228ffffff7f8328ffffff\");\n    const Mons$Char_black$125 = Image3D$parse$(\"7e7c28ffffff7f7d28ffffff7f7e28ffffff7f7f28ffffff808028ffffff7f8128ffffff7f8228ffffff7e8328ffffff\");\n    const Mons$Char_black$126 = Image3D$parse$(\"7e7b28ffffff817b28ffffff7d7c28ffffff7f7c28ffffff817c28ffffff7d7d28ffffff807d28ffffff\");\n    const Mons$Char_black$32 = Image3D$parse$(\"\");\n    const Mons$Char_black$33 = Image3D$parse$(\"7f7c28ffffff7f7d28ffffff7f7e28ffffff7f7f28ffffff7f8028ffffff7f8128ffffff7f8328ffffff\");\n    const Mons$Char_black$34 = Image3D$parse$(\"7e7c28ffffff807c28ffffff7e7d28ffffff807d28ffffff\");\n    const Mons$Char_black$35 = Image3D$parse$(\"7e7c28ffffff807c28ffffff7e7d28ffffff807d28ffffff7d7e28ffffff7e7e28ffffff7f7e28ffffff807e28ffffff817e28ffffff7e7f28ffffff807f28ffffff7e8028ffffff808028ffffff7d8128ffffff7e8128ffffff7f8128ffffff808128ffffff818128ffffff7e8228ffffff808228ffffff7e8328ffffff808328ffffff\");\n    const Mons$Char_black$36 = Image3D$parse$(\"7f7b28ffffff7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff7e7f28ffffff7f8028ffffff808028ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff7f8428ffffff\");\n    const Mons$Char_black$37 = Image3D$parse$(\"7e7b28ffffff7d7c28ffffff7f7c28ffffff7e7d28ffffff817d28ffffff807e28ffffff7f7f28ffffff7e8028ffffff7d8128ffffff808128ffffff7f8228ffffff818228ffffff808328ffffff\");\n    const Mons$Char_black$38 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff7d7d28ffffff807d28ffffff7d7e28ffffff807e28ffffff7e7f28ffffff7f7f28ffffff7d8028ffffff7d8128ffffff7f8128ffffff808128ffffff818128ffffff7d8228ffffff808228ffffff7e8328ffffff7f8328ffffff818328ffffff\");\n    const Mons$Char_black$39 = Image3D$parse$(\"7f7c28ffffff7f7d28ffffff\");\n    const Mons$Char_black$40 = Image3D$parse$(\"807c28ffffff7f7d28ffffff7e7e28ffffff7e7f28ffffff7e8028ffffff7e8128ffffff7f8228ffffff808328ffffff\");\n    const Mons$Char_black$41 = Image3D$parse$(\"7e7c28ffffff7f7d28ffffff807e28ffffff807f28ffffff808028ffffff808128ffffff7f8228ffffff7e8328ffffff\");\n    const Mons$Char_black$42 = Image3D$parse$(\"7e7d28ffffff807d28ffffff7f7e28ffffff7e7f28ffffff7f7f28ffffff807f28ffffff7f8028ffffff7e8128ffffff808128ffffff\");\n    const Mons$Char_black$43 = Image3D$parse$(\"7f7d28ffffff7f7e28ffffff7d7f28ffffff7e7f28ffffff7f7f28ffffff807f28ffffff817f28ffffff7f8028ffffff7f8128ffffff\");\n    const Mons$Char_black$44 = Image3D$parse$(\"7f8228ffffff808228ffffff7f8328ffffff808328ffffff808428ffffff7f8528ffffff\");\n    const Mons$Char_black$45 = Image3D$parse$(\"7d7f28ffffff7e7f28ffffff7f7f28ffffff807f28ffffff817f28ffffff\");\n    const Mons$Char_black$46 = Image3D$parse$(\"808328ffffff818328ffffff\");\n    const Mons$Char_black$47 = Image3D$parse$(\"817c28ffffff807d28ffffff807e28ffffff7f7f28ffffff7f8028ffffff7e8128ffffff7e8228ffffff7d8328ffffff\");\n    const Mons$Char_black$48 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff807e28ffffff817e28ffffff7d7f28ffffff7f7f28ffffff817f28ffffff7d8028ffffff7f8028ffffff818028ffffff7d8128ffffff7e8128ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$49 = Image3D$parse$(\"807c28ffffff7f7d28ffffff807d28ffffff7e7e28ffffff807e28ffffff7d7f28ffffff807f28ffffff808028ffffff808128ffffff808228ffffff808328ffffff\");\n    const Mons$Char_black$50 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff807f28ffffff7f8028ffffff7e8128ffffff7d8228ffffff7d8328ffffff7e8328ffffff7f8328ffffff808328ffffff818328ffffff\");\n    const Mons$Char_black$51 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff817e28ffffff7e7f28ffffff7f7f28ffffff807f28ffffff818028ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$52 = Image3D$parse$(\"7e7c28ffffff7e7d28ffffff7e7e28ffffff807e28ffffff7e7f28ffffff807f28ffffff7d8028ffffff808028ffffff7d8128ffffff7e8128ffffff7f8128ffffff808128ffffff818128ffffff808228ffffff808328ffffff\");\n    const Mons$Char_black$53 = Image3D$parse$(\"7d7c28ffffff7e7c28ffffff7f7c28ffffff807c28ffffff817c28ffffff7d7d28ffffff7d7e28ffffff7d7f28ffffff7e7f28ffffff7f7f28ffffff807f28ffffff818028ffffff818128ffffff818228ffffff7d8328ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$54 = Image3D$parse$(\"807c28ffffff7f7d28ffffff7e7e28ffffff7e7f28ffffff7f7f28ffffff807f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$55 = Image3D$parse$(\"7d7c28ffffff7e7c28ffffff7f7c28ffffff807c28ffffff817c28ffffff817d28ffffff807e28ffffff7f7f28ffffff7e8028ffffff7e8128ffffff7e8228ffffff7e8328ffffff\");\n    const Mons$Char_black$56 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff7e7f28ffffff7f7f28ffffff807f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$57 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7e8028ffffff7f8028ffffff808028ffffff808128ffffff7f8228ffffff7e8328ffffff\");\n    const Mons$Char_black$58 = Image3D$parse$(\"7f7f28ffffff807f28ffffff7f8228ffffff808228ffffff\");\n    const Mons$Char_black$59 = Image3D$parse$(\"7f7f28ffffff807f28ffffff7f8228ffffff808228ffffff7f8328ffffff808328ffffff808428ffffff7f8528ffffff\");\n    const Mons$Char_black$60 = Image3D$parse$(\"807c28ffffff7f7d28ffffff7e7e28ffffff7d7f28ffffff7d8028ffffff7e8128ffffff7f8228ffffff808328ffffff\");\n    const Mons$Char_black$61 = Image3D$parse$(\"7d7f28ffffff7e7f28ffffff7f7f28ffffff807f28ffffff817f28ffffff7d8128ffffff7e8128ffffff7f8128ffffff808128ffffff818128ffffff\");\n    const Mons$Char_black$62 = Image3D$parse$(\"7e7c28ffffff7f7d28ffffff807e28ffffff817f28ffffff818028ffffff808128ffffff7f8228ffffff7e8328ffffff\");\n    const Mons$Char_black$63 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff807f28ffffff7f8028ffffff7f8128ffffff7f8328ffffff\");\n    const Mons$Char_black$64 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff807e28ffffff817e28ffffff7d7f28ffffff7f7f28ffffff817f28ffffff7d8028ffffff7f8028ffffff818028ffffff7d8128ffffff808128ffffff818128ffffff7d8228ffffff7e8328ffffff7f8328ffffff808328ffffff818328ffffff\");\n    const Mons$Char_black$65 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff7e8128ffffff7f8128ffffff808128ffffff818128ffffff7d8228ffffff818228ffffff7d8328ffffff818328ffffff\");\n    const Mons$Char_black$66 = Image3D$parse$(\"7d7c28ffffff7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff7d7f28ffffff7e7f28ffffff7f7f28ffffff807f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7d8328ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$67 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff7d7f28ffffff7d8028ffffff7d8128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$68 = Image3D$parse$(\"7d7c28ffffff7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7d8328ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$69 = Image3D$parse$(\"7d7c28ffffff7e7c28ffffff7f7c28ffffff807c28ffffff817c28ffffff7d7d28ffffff7d7e28ffffff7d7f28ffffff7e7f28ffffff7f7f28ffffff807f28ffffff817f28ffffff7d8028ffffff7d8128ffffff7d8228ffffff7d8328ffffff7e8328ffffff7f8328ffffff808328ffffff818328ffffff\");\n    const Mons$Char_black$70 = Image3D$parse$(\"7d7c28ffffff7e7c28ffffff7f7c28ffffff807c28ffffff817c28ffffff7d7d28ffffff7d7e28ffffff7d7f28ffffff7e7f28ffffff7f7f28ffffff807f28ffffff7d8028ffffff7d8128ffffff7d8228ffffff7d8328ffffff\");\n    const Mons$Char_black$71 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff7d7f28ffffff7d8028ffffff7d8128ffffff808128ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$72 = Image3D$parse$(\"7d7c28ffffff817c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff7d7f28ffffff7e7f28ffffff7f7f28ffffff807f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7d8328ffffff818328ffffff\");\n    const Mons$Char_black$73 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff7f7d28ffffff7f7e28ffffff7f7f28ffffff7f8028ffffff7f8128ffffff7f8228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$74 = Image3D$parse$(\"817c28ffffff817d28ffffff817e28ffffff817f28ffffff818028ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$75 = Image3D$parse$(\"7d7c28ffffff817c28ffffff7d7d28ffffff807d28ffffff7d7e28ffffff7f7e28ffffff7d7f28ffffff7e7f28ffffff7d8028ffffff7f8028ffffff7d8128ffffff808128ffffff7d8228ffffff818228ffffff7d8328ffffff818328ffffff\");\n    const Mons$Char_black$76 = Image3D$parse$(\"7d7c28ffffff7d7d28ffffff7d7e28ffffff7d7f28ffffff7d8028ffffff7d8128ffffff7d8228ffffff7d8328ffffff7e8328ffffff7f8328ffffff808328ffffff818328ffffff\");\n    const Mons$Char_black$77 = Image3D$parse$(\"7d7c28ffffff817c28ffffff7d7d28ffffff7e7d28ffffff807d28ffffff817d28ffffff7d7e28ffffff7f7e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7d8328ffffff818328ffffff\");\n    const Mons$Char_black$78 = Image3D$parse$(\"7d7c28ffffff817c28ffffff7d7d28ffffff7e7d28ffffff817d28ffffff7d7e28ffffff7f7e28ffffff817e28ffffff7d7f28ffffff807f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7d8328ffffff818328ffffff\");\n    const Mons$Char_black$79 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$80 = Image3D$parse$(\"7d7c28ffffff7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff7e8028ffffff7f8028ffffff808028ffffff7d8128ffffff7d8228ffffff7d8328ffffff\");\n    const Mons$Char_black$81 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff808428ffffff818428ffffff\");\n    const Mons$Char_black$82 = Image3D$parse$(\"7d7c28ffffff7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff7e8028ffffff7f8028ffffff808028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7d8328ffffff818328ffffff\");\n    const Mons$Char_black$83 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff7e7f28ffffff7f7f28ffffff808028ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$84 = Image3D$parse$(\"7d7c28ffffff7e7c28ffffff7f7c28ffffff807c28ffffff817c28ffffff7f7d28ffffff7f7e28ffffff7f7f28ffffff7f8028ffffff7f8128ffffff7f8228ffffff7f8328ffffff\");\n    const Mons$Char_black$85 = Image3D$parse$(\"7d7c28ffffff817c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$86 = Image3D$parse$(\"7d7c28ffffff817c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7e8228ffffff808228ffffff7f8328ffffff\");\n    const Mons$Char_black$87 = Image3D$parse$(\"7d7c28ffffff817c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff7f8128ffffff818128ffffff7d8228ffffff7e8228ffffff808228ffffff818228ffffff7d8328ffffff818328ffffff\");\n    const Mons$Char_black$88 = Image3D$parse$(\"7d7c28ffffff817c28ffffff7d7d28ffffff817d28ffffff7e7e28ffffff807e28ffffff7f7f28ffffff7f8028ffffff7e8128ffffff808128ffffff7d8228ffffff818228ffffff7d8328ffffff818328ffffff\");\n    const Mons$Char_black$89 = Image3D$parse$(\"7d7c28ffffff817c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff7e7f28ffffff807f28ffffff7f8028ffffff7f8128ffffff7f8228ffffff7f8328ffffff\");\n    const Mons$Char_black$90 = Image3D$parse$(\"7d7c28ffffff7e7c28ffffff7f7c28ffffff807c28ffffff817c28ffffff817d28ffffff807e28ffffff7f7f28ffffff7e8028ffffff7e8128ffffff7d8228ffffff7d8328ffffff7e8328ffffff7f8328ffffff808328ffffff818328ffffff\");\n    const Mons$Char_black$91 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff7e7d28ffffff7e7e28ffffff7e7f28ffffff7e8028ffffff7e8128ffffff7e8228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$92 = Image3D$parse$(\"7d7c28ffffff7e7d28ffffff7e7e28ffffff7f7f28ffffff7f8028ffffff808128ffffff808228ffffff818328ffffff\");\n    const Mons$Char_black$93 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff807d28ffffff807e28ffffff807f28ffffff808028ffffff808128ffffff808228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$94 = Image3D$parse$(\"7f7b28ffffff7e7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff\");\n    const Mons$Char_black$95 = Image3D$parse$(\"7d8328ffffff7e8328ffffff7f8328ffffff808328ffffff818328ffffff\");\n    const Mons$Char_black$96 = Image3D$parse$(\"7e7b28ffffff7f7c28ffffff807d28ffffff\");\n    const Mons$Char_black$97 = Image3D$parse$(\"7e7e28ffffff7f7e28ffffff807e28ffffff817f28ffffff7e8028ffffff7f8028ffffff808028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff818328ffffff\");\n    const Mons$Char_black$98 = Image3D$parse$(\"7d7c28ffffff7d7d28ffffff7d7e28ffffff7e7e28ffffff7f7e28ffffff807e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7d8328ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$99 = Image3D$parse$(\"7e7e28ffffff7f7e28ffffff807e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff7d8128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$normal = Image3D$parse$(\"7e7e28544b487f7e28544b48807e28544b487d7f28544b487e7f28e7dcc17f7f28cab89d807f28bba38a817f28544b487d8028544b487e8028cab89d7f8028bba38a808028bba38a818028544b487d8128544b487e8128bba38a7f8128bba38a808128a5876e818128544b487e8228544b487f8228544b48808228544b48\");\n    const Mons$Char_black$earth = Image3D$parse$(\"7d7e285f35387e7e285f35387f7e285f3538807e285f3538817e285f35387d7f285f35387e7f289f5b447f7f289f5b44807f289f5b44817f285f35387d80284b2a357e8028884e3f7f8028884e3f808028884e3f8180284b2a357e81284b2a357f81286f403b8081284b2a357e82284b2a357f82284b2a358082284b2a35\");\n    const Mons$Char_black$fire = Image3D$parse$(\"7e7d28a432347f7d28a432347e7e28a432347f7e28fbe896807e28a432347d7f2898202e7e7f28e7cb557f7f28e7cb55807f28e7cb55817f2898202e7d802898202e7e8028efa93f7f8028efa93f808028efa93f81802898202e7d812877262f7e8128d3783c7f8128d3783c808128d3783c81812877262f7e822877262f7f822877262f80822877262f\");\n    const Mons$Char_black$water = Image3D$parse$(\"7e7d282f37707f7d282f37707e7e282f37707f7e28f0e8cc807e282f37707d7f282f37707e7f2863a9a47f7f2882c8ac807f28f0e8cc817f282f37707d80282729607e802863a9a47f8028799cd380802882c8ac8180282729607d81282729607e8128428a9b7f812863a9a480812863a9a48181282729607e82283421637f8228342163808228342163\");\n    const Mons$Char_black$grass = Image3D$parse$(\"807d28375839817d28477e3d7f7e28375839807e2885ca77817e283758397e7f283758397f7f2885ca77807f2864af69817f283758397d80282a56517e802885ca777f8028287f4e80802864af698180283758397d81282a56517e8128287f4e7f812864af6980812885ca778181283758397e82282a56517f82282a5651808228375839\");\n    const Mons$Char_black$electric = Image3D$parse$(\"7f7d28d3783c807d28d3783c7e7e28c766437f7e28e7cb55807e28d3783c7d7f28b64c3b7e7f28dab04d7f7f28c766437e8028c766437f8028dab04d808028b64c3b7d8128c766437e8128e7cb557f8128c766437d8228d3783c7e8228c76643\");\n    const Mons$Char_black$psychic = Image3D$parse$(\"7e7e286420737f7e28642073807e286420737d7f286420737e7f28c757a67f7f28ac4999807f28f0e8cc817f286420737d80284a2b717e8028fa83a97f8028342163808028ac49998180284a2b717d81283421637e8128fa83a97f8128fa83a9808128c757a68181283421637e82283421637f8228342163808228342163\");\n    const Mons$Char_black$ice = Image3D$parse$(\"7e7e2882c8ac7f7e284662a1807e2882c8ac7d7f2882c8ac7e7f2863a9a47f7f28394c87807f2863a9a4817f2882c8ac7d80284662a17e8028394c877f802863a9a4808028394c878180284662a17d812882c8ac7e812863a9a47f8128394c8780812863a9a481812882c8ac7e822882c8ac7f82284662a180822882c8ac\");\n    const Mons$Char_black$light = Image3D$parse$(\"7e7e28d296437f7e28dab04d807e28d296437d7f28d296437e7f28fbe8967f7f28e7cb55807f28fbe896817f28d296437d8028dab04d7e8028e7cb557f8028fbe896808028e7cb55818028dab04d7d8128d296437e8128fbe8967f8128e7cb55808128fbe896818128d296437e8228d296437f8228dab04d808228d29643\");\n    const Mons$Char_black$darkness = Image3D$parse$(\"7e7e284a2b717f7e282c333d807e284a2b717d7f284a2b717e7f286a3a867f7f28353b48807f286a3a86817f284a2b717d80282c333d7e8028353b487f80282c333d808028353b488180282c333d7d81284a2b717e81286a3a867f8128353b488081286a3a868181284a2b717e82284a2b717f82282c333d8082284a2b71\");\n    const Mons$Char_black$s_72 = Image3D$parse$(\"7d7d28212128807d282121287d7e28212128807e282121287d7f282121287e7f282121287f7f28212128807f282121287d80282121288080282121287d8128212128808128212128\");\n    const Mons$Char_black$s_80 = Image3D$parse$(\"7d7d282121287e7d282121287f7d28212128807d282121287d7e28212128807e282121287d7f282121287e7f282121287f7f282121287d80282121287d8128212128\");\n    const Mons$Char_black$burn = Image3D$parse$(\"7d7d1e4b2a357e7d1e4b2a357f7d1e4b2a357d7e1e4b2a357e7e1efa642f7f7e1efa642f807e1e4b2a357e7f1e4b2a357f7f1eefa93f807f1efa642f817f1e4b2a357d801e4b2a357e801eefa93f7f801efbe89680801efbe89681801e4b2a357d811e4b2a357e811efa642f7f811eefa93f80811efbe89681811e4b2a357d821e4b2a357e821efa642f7f821efa642f80821eefa93f81821e4b2a357e831e4b2a357f831e4b2a3580831e4b2a35\");\n    const Mons$Char_black$hit = Image3D$parse$(\"7f7d1e3758397e7e1e3758397f7e1ec7c85c807e1e3758397e7f1e3758397f7f1ec7c85c807f1e3758397d801e3758397e801e6b91477f801e6b914780801ec7c85c81801e3758397d811e3758397e811e477e3d7f811e477e3d80811ec7c85c81811e3758397d821e3758397e821e477e3d7f821e477e3d80821e6b914781821e3758397e831e3758397f831e37583980831e375839\");\n    const Mons$Char_black$invulnerable = Image3D$parse$(\"7d7d1e4b2a357e7d1e4b2a35817d1e4b2a357d7e1e4b2a357e7e1edab04d7f7e1e4b2a35807e1e4b2a35817e1ef0e8cc7e7f1e4b2a357f7f1ef0e8cc807f1ee7cb55817f1e4b2a357e801e4b2a357f801ee7cb5580801edab04d81801e4b2a357d811e4b2a357e811ee7cb557f811edab04d80811ed3783c81811e4b2a357d821edab04d7e821e4b2a357f821e4b2a3580821e4b2a3581821edab04d7d831e4b2a3581831e4b2a35\");\n    const Mons$Char_black$minimize = Image3D$parse$(\"7d7d1e2c333d7e7d1e2c333d7f7d1e2c333d807d1e2c333d817d1e2c333d7d7e1e2c333d7e7e1e656c7f7f7e1eabaeb2807e1eabaeb2817e1e2c333d7d7f1e2c333d7e7f1e656c7f7f7f1e656c7f807f1e656c7f817f1e2c333d7d801e2c333d7e801e565d6e7f801e565d6e80801e656c7f81801e2c333d7d811e2c333d7e811e565d6e7f811e565d6e80811e656c7f81811e2c333d7e821e2c333d7f821e565d6e80821e2c333d7f831e2c333d\");\n    const Mons$Char_black$poison = Image3D$parse$(\"7f7d1e5f19347e7e1e5f19347f7e1edf3e46807e1e5f19347e7f1e5f19347f7f1edf3e46807f1e5f19347d801e5f19347e801ea2242c7f801ea2242c80801edf3e4681801e5f19347d811e5f19347e811e8c0b2c7f811e8c0b2c80811edf3e4681811e5f19347d821e5f19347e821e8c0b2c7f821e8c0b2c80821ea2242c81821e5f19347e831e5f19347f831e5f193480831e5f1934\");\n    const Mons$Char_black$protect = Image3D$parse$(\"7d7d1e4b2a357e7d1e4b2a357f7d1e4b2a35807d1e4b2a35817d1e4b2a357d7e1e4b2a357e7e1ecc833c7f7e1edab04d807e1edab04d817e1e4b2a357d7f1e4b2a357e7f1ecc833c7f7f1ecc833c807f1ecc833c817f1e4b2a357d801e4b2a357e801eb96b337f801eb96b3380801ecc833c81801e4b2a357d811e4b2a357e811eb96b337f811eb96b3380811ecc833c81811e4b2a357e821e4b2a357f821eb96b3380821e4b2a357f831e4b2a35\");\n    const Mons$Char_black$sleep = Image3D$parse$(\"7d7d1e2729607e7d1e2729607f7d1e272960807d1e272960817d1e2729607d7e1e2729607e7e1e799cd37f7e1e799cd3807e1e799cd3817e1e2729607e7f1e2729607f7f1e272960807f1e799cd3817f1e2729607e801e2729607f801e5176b880801e2729607d811e2729607e811e4662a17f811e27296080811e2729607d821e2729607e821e4662a17f821e4662a180821e4662a181821e2729607d831e2729607e831e2729607f831e27296080831e27296081831e272960\");\n    const Mons$Char_black$font = (() => {\n        var _map$1 = Map$new;\n        var _map$2 = Mons$font$set_img$(100, Mons$Char_black$100, _map$1);\n        var _map$3 = Mons$font$set_img$(101, Mons$Char_black$101, _map$2);\n        var _map$4 = Mons$font$set_img$(102, Mons$Char_black$102, _map$3);\n        var _map$5 = Mons$font$set_img$(103, Mons$Char_black$103, _map$4);\n        var _map$6 = Mons$font$set_img$(104, Mons$Char_black$104, _map$5);\n        var _map$7 = Mons$font$set_img$(105, Mons$Char_black$105, _map$6);\n        var _map$8 = Mons$font$set_img$(106, Mons$Char_black$106, _map$7);\n        var _map$9 = Mons$font$set_img$(107, Mons$Char_black$107, _map$8);\n        var _map$10 = Mons$font$set_img$(108, Mons$Char_black$108, _map$9);\n        var _map$11 = Mons$font$set_img$(109, Mons$Char_black$109, _map$10);\n        var _map$12 = Mons$font$set_img$(110, Mons$Char_black$110, _map$11);\n        var _map$13 = Mons$font$set_img$(111, Mons$Char_black$111, _map$12);\n        var _map$14 = Mons$font$set_img$(112, Mons$Char_black$112, _map$13);\n        var _map$15 = Mons$font$set_img$(113, Mons$Char_black$113, _map$14);\n        var _map$16 = Mons$font$set_img$(114, Mons$Char_black$114, _map$15);\n        var _map$17 = Mons$font$set_img$(115, Mons$Char_black$115, _map$16);\n        var _map$18 = Mons$font$set_img$(116, Mons$Char_black$116, _map$17);\n        var _map$19 = Mons$font$set_img$(117, Mons$Char_black$117, _map$18);\n        var _map$20 = Mons$font$set_img$(118, Mons$Char_black$118, _map$19);\n        var _map$21 = Mons$font$set_img$(119, Mons$Char_black$119, _map$20);\n        var _map$22 = Mons$font$set_img$(120, Mons$Char_black$120, _map$21);\n        var _map$23 = Mons$font$set_img$(121, Mons$Char_black$121, _map$22);\n        var _map$24 = Mons$font$set_img$(122, Mons$Char_black$122, _map$23);\n        var _map$25 = Mons$font$set_img$(123, Mons$Char_black$123, _map$24);\n        var _map$26 = Mons$font$set_img$(124, Mons$Char_black$124, _map$25);\n        var _map$27 = Mons$font$set_img$(125, Mons$Char_black$125, _map$26);\n        var _map$28 = Mons$font$set_img$(126, Mons$Char_black$126, _map$27);\n        var _map$29 = Mons$font$set_img$(32, Mons$Char_black$32, _map$28);\n        var _map$30 = Mons$font$set_img$(33, Mons$Char_black$33, _map$29);\n        var _map$31 = Mons$font$set_img$(34, Mons$Char_black$34, _map$30);\n        var _map$32 = Mons$font$set_img$(35, Mons$Char_black$35, _map$31);\n        var _map$33 = Mons$font$set_img$(36, Mons$Char_black$36, _map$32);\n        var _map$34 = Mons$font$set_img$(37, Mons$Char_black$37, _map$33);\n        var _map$35 = Mons$font$set_img$(38, Mons$Char_black$38, _map$34);\n        var _map$36 = Mons$font$set_img$(39, Mons$Char_black$39, _map$35);\n        var _map$37 = Mons$font$set_img$(40, Mons$Char_black$40, _map$36);\n        var _map$38 = Mons$font$set_img$(41, Mons$Char_black$41, _map$37);\n        var _map$39 = Mons$font$set_img$(42, Mons$Char_black$42, _map$38);\n        var _map$40 = Mons$font$set_img$(43, Mons$Char_black$43, _map$39);\n        var _map$41 = Mons$font$set_img$(44, Mons$Char_black$44, _map$40);\n        var _map$42 = Mons$font$set_img$(45, Mons$Char_black$45, _map$41);\n        var _map$43 = Mons$font$set_img$(46, Mons$Char_black$46, _map$42);\n        var _map$44 = Mons$font$set_img$(47, Mons$Char_black$47, _map$43);\n        var _map$45 = Mons$font$set_img$(48, Mons$Char_black$48, _map$44);\n        var _map$46 = Mons$font$set_img$(49, Mons$Char_black$49, _map$45);\n        var _map$47 = Mons$font$set_img$(50, Mons$Char_black$50, _map$46);\n        var _map$48 = Mons$font$set_img$(51, Mons$Char_black$51, _map$47);\n        var _map$49 = Mons$font$set_img$(52, Mons$Char_black$52, _map$48);\n        var _map$50 = Mons$font$set_img$(53, Mons$Char_black$53, _map$49);\n        var _map$51 = Mons$font$set_img$(54, Mons$Char_black$54, _map$50);\n        var _map$52 = Mons$font$set_img$(55, Mons$Char_black$55, _map$51);\n        var _map$53 = Mons$font$set_img$(56, Mons$Char_black$56, _map$52);\n        var _map$54 = Mons$font$set_img$(57, Mons$Char_black$57, _map$53);\n        var _map$55 = Mons$font$set_img$(58, Mons$Char_black$58, _map$54);\n        var _map$56 = Mons$font$set_img$(59, Mons$Char_black$59, _map$55);\n        var _map$57 = Mons$font$set_img$(60, Mons$Char_black$60, _map$56);\n        var _map$58 = Mons$font$set_img$(61, Mons$Char_black$61, _map$57);\n        var _map$59 = Mons$font$set_img$(62, Mons$Char_black$62, _map$58);\n        var _map$60 = Mons$font$set_img$(63, Mons$Char_black$63, _map$59);\n        var _map$61 = Mons$font$set_img$(64, Mons$Char_black$64, _map$60);\n        var _map$62 = Mons$font$set_img$(65, Mons$Char_black$65, _map$61);\n        var _map$63 = Mons$font$set_img$(66, Mons$Char_black$66, _map$62);\n        var _map$64 = Mons$font$set_img$(67, Mons$Char_black$67, _map$63);\n        var _map$65 = Mons$font$set_img$(68, Mons$Char_black$68, _map$64);\n        var _map$66 = Mons$font$set_img$(69, Mons$Char_black$69, _map$65);\n        var _map$67 = Mons$font$set_img$(70, Mons$Char_black$70, _map$66);\n        var _map$68 = Mons$font$set_img$(71, Mons$Char_black$71, _map$67);\n        var _map$69 = Mons$font$set_img$(72, Mons$Char_black$72, _map$68);\n        var _map$70 = Mons$font$set_img$(73, Mons$Char_black$73, _map$69);\n        var _map$71 = Mons$font$set_img$(74, Mons$Char_black$74, _map$70);\n        var _map$72 = Mons$font$set_img$(75, Mons$Char_black$75, _map$71);\n        var _map$73 = Mons$font$set_img$(76, Mons$Char_black$76, _map$72);\n        var _map$74 = Mons$font$set_img$(77, Mons$Char_black$77, _map$73);\n        var _map$75 = Mons$font$set_img$(78, Mons$Char_black$78, _map$74);\n        var _map$76 = Mons$font$set_img$(79, Mons$Char_black$79, _map$75);\n        var _map$77 = Mons$font$set_img$(80, Mons$Char_black$80, _map$76);\n        var _map$78 = Mons$font$set_img$(81, Mons$Char_black$81, _map$77);\n        var _map$79 = Mons$font$set_img$(82, Mons$Char_black$82, _map$78);\n        var _map$80 = Mons$font$set_img$(83, Mons$Char_black$83, _map$79);\n        var _map$81 = Mons$font$set_img$(84, Mons$Char_black$84, _map$80);\n        var _map$82 = Mons$font$set_img$(85, Mons$Char_black$85, _map$81);\n        var _map$83 = Mons$font$set_img$(86, Mons$Char_black$86, _map$82);\n        var _map$84 = Mons$font$set_img$(87, Mons$Char_black$87, _map$83);\n        var _map$85 = Mons$font$set_img$(88, Mons$Char_black$88, _map$84);\n        var _map$86 = Mons$font$set_img$(89, Mons$Char_black$89, _map$85);\n        var _map$87 = Mons$font$set_img$(90, Mons$Char_black$90, _map$86);\n        var _map$88 = Mons$font$set_img$(91, Mons$Char_black$91, _map$87);\n        var _map$89 = Mons$font$set_img$(92, Mons$Char_black$92, _map$88);\n        var _map$90 = Mons$font$set_img$(93, Mons$Char_black$93, _map$89);\n        var _map$91 = Mons$font$set_img$(94, Mons$Char_black$94, _map$90);\n        var _map$92 = Mons$font$set_img$(95, Mons$Char_black$95, _map$91);\n        var _map$93 = Mons$font$set_img$(96, Mons$Char_black$96, _map$92);\n        var _map$94 = Mons$font$set_img$(97, Mons$Char_black$97, _map$93);\n        var _map$95 = Mons$font$set_img$(98, Mons$Char_black$98, _map$94);\n        var _map$96 = Mons$font$set_img$(99, Mons$Char_black$99, _map$95);\n        var _map$97 = Mons$font$set_img$(9312, Mons$Char_black$normal, _map$96);\n        var _map$98 = Mons$font$set_img$(9313, Mons$Char_black$earth, _map$97);\n        var _map$99 = Mons$font$set_img$(9314, Mons$Char_black$fire, _map$98);\n        var _map$100 = Mons$font$set_img$(9315, Mons$Char_black$water, _map$99);\n        var _map$101 = Mons$font$set_img$(9316, Mons$Char_black$grass, _map$100);\n        var _map$102 = Mons$font$set_img$(9317, Mons$Char_black$electric, _map$101);\n        var _map$103 = Mons$font$set_img$(9318, Mons$Char_black$psychic, _map$102);\n        var _map$104 = Mons$font$set_img$(9319, Mons$Char_black$ice, _map$103);\n        var _map$105 = Mons$font$set_img$(9320, Mons$Char_black$light, _map$104);\n        var _map$106 = Mons$font$set_img$(9321, Mons$Char_black$darkness, _map$105);\n        var _map$107 = Mons$font$set_img$(405, Mons$Char_black$s_72, _map$106);\n        var _map$108 = Mons$font$set_img$(421, Mons$Char_black$s_80, _map$107);\n        var _map$109 = Mons$font$set_img$(9398, Mons$Char_black$burn, _map$108);\n        var _map$110 = Mons$font$set_img$(9399, Mons$Char_black$hit, _map$109);\n        var _map$111 = Mons$font$set_img$(9400, Mons$Char_black$invulnerable, _map$110);\n        var _map$112 = Mons$font$set_img$(9401, Mons$Char_black$minimize, _map$111);\n        var _map$113 = Mons$font$set_img$(9402, Mons$Char_black$poison, _map$112);\n        var _map$114 = Mons$font$set_img$(9403, Mons$Char_black$protect, _map$113);\n        var _map$115 = Mons$font$set_img$(9404, Mons$Char_black$sleep, _map$114);\n        var $597 = _map$115;\n        return $597;\n    })();\n\n    function Mons$draw$list_selector$(_idx$1, _horizontal$2, _spacing$3, _font_map$4, _start_pos$5, _scr$6) {\n        var _x$7 = ((_start_pos$5 & 0xFFF));\n        var _y$8 = (((_start_pos$5 >>> 12) & 0xFFF));\n        var _idx$9 = ((_idx$1 + 1) >>> 0);\n        var self = _horizontal$2;\n        if (self) {\n            var $599 = ((0 | ((((_spacing$3 * _idx$9) >>> 0) + _x$7) >>> 0) | (_y$8 << 12) | (0 << 24)));\n            var _pos$10 = $599;\n        } else {\n            var $600 = ((0 | _x$7 | (((((_spacing$3 * _idx$9) >>> 0) + _y$8) >>> 0) << 12) | (0 << 24)));\n            var _pos$10 = $600;\n        };\n        var $598 = Mons$draw$text$(\"> \", _font_map$4, _pos$10, _scr$6);\n        return $598;\n    };\n    const Mons$draw$list_selector = x0 => x1 => x2 => x3 => x4 => x5 => Mons$draw$list_selector$(x0, x1, x2, x3, x4, x5);\n    const Mons$Char_white$100 = Image3D$parse$(\"817c1effffff817d1effffff7e7e1effffff7f7e1effffff807e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff81831effffff\");\n    const Mons$Char_white$101 = Image3D$parse$(\"7e7e1effffff7f7e1effffff807e1effffff7d7f1effffff817f1effffff7d801effffff7e801effffff7f801effffff80801effffff81801effffff7d811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$102 = Image3D$parse$(\"7f7c1effffff807c1effffff817c1effffff7e7d1effffff7e7e1effffff7d7f1effffff7e7f1effffff7f7f1effffff807f1effffff817f1effffff7e801effffff7e811effffff7e821effffff7e831effffff\");\n    const Mons$Char_white$103 = Image3D$parse$(\"7e7e1effffff7f7e1effffff807e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff81831effffff81841effffff7e851effffff7f851effffff80851effffff\");\n    const Mons$Char_white$104 = Image3D$parse$(\"7d7c1effffff7d7d1effffff7d7e1effffff7e7e1effffff7f7e1effffff807e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7d831effffff81831effffff\");\n    const Mons$Char_white$105 = Image3D$parse$(\"7f7d1effffff7e7f1effffff7f7f1effffff7f801effffff7f811effffff7f821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$106 = Image3D$parse$(\"817d1effffff7f7f1effffff807f1effffff817f1effffff81801effffff81811effffff81821effffff81831effffff81841effffff7e851effffff7f851effffff80851effffff\");\n    const Mons$Char_white$107 = Image3D$parse$(\"7d7c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff7d7f1effffff807f1effffff7d801effffff7e801effffff7f801effffff7d811effffff80811effffff7d821effffff81821effffff7d831effffff81831effffff\");\n    const Mons$Char_white$108 = Image3D$parse$(\"7e7c1effffff7f7c1effffff7f7d1effffff7f7e1effffff7f7f1effffff7f801effffff7f811effffff7f821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$109 = Image3D$parse$(\"7d7e1effffff7e7e1effffff7f7e1effffff807e1effffff7d7f1effffff7f7f1effffff817f1effffff7d801effffff7f801effffff81801effffff7d811effffff7f811effffff81811effffff7d821effffff7f821effffff81821effffff7d831effffff7f831effffff81831effffff\");\n    const Mons$Char_white$110 = Image3D$parse$(\"7d7e1effffff7e7e1effffff7f7e1effffff807e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7d831effffff81831effffff\");\n    const Mons$Char_white$111 = Image3D$parse$(\"7e7e1effffff7f7e1effffff807e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$112 = Image3D$parse$(\"7d7e1effffff7e7e1effffff7f7e1effffff807e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7d831effffff7e831effffff7f831effffff80831effffff7d841effffff7d851effffff\");\n    const Mons$Char_white$113 = Image3D$parse$(\"7e7e1effffff7f7e1effffff807e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff81831effffff81841effffff81851effffff\");\n    const Mons$Char_white$114 = Image3D$parse$(\"7d7e1effffff807e1effffff817e1effffff7d7f1effffff7f7f1effffff7d801effffff7e801effffff7d811effffff7d821effffff7d831effffff\");\n    const Mons$Char_white$115 = Image3D$parse$(\"7e7e1effffff7f7e1effffff807e1effffff817e1effffff7d7f1effffff7e801effffff7f801effffff80801effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$116 = Image3D$parse$(\"7e7c1effffff7e7d1effffff7d7e1effffff7e7e1effffff7f7e1effffff807e1effffff7e7f1effffff7e801effffff7e811effffff7e821effffff7f831effffff80831effffff\");\n    const Mons$Char_white$117 = Image3D$parse$(\"7d7e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff81831effffff\");\n    const Mons$Char_white$118 = Image3D$parse$(\"7d7e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7e821effffff80821effffff7f831effffff\");\n    const Mons$Char_white$119 = Image3D$parse$(\"7d7e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff7f811effffff81811effffff7d821effffff7f821effffff81821effffff7e831effffff80831effffff\");\n    const Mons$Char_white$120 = Image3D$parse$(\"7d7e1effffff817e1effffff7e7f1effffff807f1effffff7f801effffff7f811effffff7e821effffff80821effffff7d831effffff81831effffff\");\n    const Mons$Char_white$121 = Image3D$parse$(\"7d7e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff80841effffff7d851effffff7e851effffff7f851effffff\");\n    const Mons$Char_white$122 = Image3D$parse$(\"7d7e1effffff7e7e1effffff7f7e1effffff807e1effffff817e1effffff817f1effffff7f801effffff80801effffff7e811effffff7d821effffff7d831effffff7e831effffff7f831effffff80831effffff81831effffff\");\n    const Mons$Char_white$123 = Image3D$parse$(\"807c1effffff7f7d1effffff7f7e1effffff7f7f1effffff7e801effffff7f811effffff7f821effffff80831effffff\");\n    const Mons$Char_white$124 = Image3D$parse$(\"7f7c1effffff7f7d1effffff7f7e1effffff7f7f1effffff7f801effffff7f811effffff7f821effffff7f831effffff\");\n    const Mons$Char_white$125 = Image3D$parse$(\"7e7c1effffff7f7d1effffff7f7e1effffff7f7f1effffff80801effffff7f811effffff7f821effffff7e831effffff\");\n    const Mons$Char_white$126 = Image3D$parse$(\"7e7b1effffff817b1effffff7d7c1effffff7f7c1effffff817c1effffff7d7d1effffff807d1effffff\");\n    const Mons$Char_white$32 = Image3D$parse$(\"\");\n    const Mons$Char_white$33 = Image3D$parse$(\"7f7c1effffff7f7d1effffff7f7e1effffff7f7f1effffff7f801effffff7f811effffff7f831effffff\");\n    const Mons$Char_white$34 = Image3D$parse$(\"7e7c1effffff807c1effffff7e7d1effffff807d1effffff\");\n    const Mons$Char_white$35 = Image3D$parse$(\"7e7c1effffff807c1effffff7e7d1effffff807d1effffff7d7e1effffff7e7e1effffff7f7e1effffff807e1effffff817e1effffff7e7f1effffff807f1effffff7e801effffff80801effffff7d811effffff7e811effffff7f811effffff80811effffff81811effffff7e821effffff80821effffff7e831effffff80831effffff\");\n    const Mons$Char_white$36 = Image3D$parse$(\"7f7b1effffff7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff7e7f1effffff7f801effffff80801effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff7f841effffff\");\n    const Mons$Char_white$37 = Image3D$parse$(\"7e7b1effffff7d7c1effffff7f7c1effffff7e7d1effffff817d1effffff807e1effffff7f7f1effffff7e801effffff7d811effffff80811effffff7f821effffff81821effffff80831effffff\");\n    const Mons$Char_white$38 = Image3D$parse$(\"7e7c1effffff7f7c1effffff7d7d1effffff807d1effffff7d7e1effffff807e1effffff7e7f1effffff7f7f1effffff7d801effffff7d811effffff7f811effffff80811effffff81811effffff7d821effffff80821effffff7e831effffff7f831effffff81831effffff\");\n    const Mons$Char_white$39 = Image3D$parse$(\"7f7c1effffff7f7d1effffff\");\n    const Mons$Char_white$40 = Image3D$parse$(\"807c1effffff7f7d1effffff7e7e1effffff7e7f1effffff7e801effffff7e811effffff7f821effffff80831effffff\");\n    const Mons$Char_white$41 = Image3D$parse$(\"7e7c1effffff7f7d1effffff807e1effffff807f1effffff80801effffff80811effffff7f821effffff7e831effffff\");\n    const Mons$Char_white$42 = Image3D$parse$(\"7e7d1effffff807d1effffff7f7e1effffff7e7f1effffff7f7f1effffff807f1effffff7f801effffff7e811effffff80811effffff\");\n    const Mons$Char_white$43 = Image3D$parse$(\"7f7d1effffff7f7e1effffff7d7f1effffff7e7f1effffff7f7f1effffff807f1effffff817f1effffff7f801effffff7f811effffff\");\n    const Mons$Char_white$44 = Image3D$parse$(\"7f821effffff80821effffff7f831effffff80831effffff80841effffff7f851effffff\");\n    const Mons$Char_white$45 = Image3D$parse$(\"7d7f1effffff7e7f1effffff7f7f1effffff807f1effffff817f1effffff\");\n    const Mons$Char_white$46 = Image3D$parse$(\"80831effffff81831effffff\");\n    const Mons$Char_white$47 = Image3D$parse$(\"817c1effffff807d1effffff807e1effffff7f7f1effffff7f801effffff7e811effffff7e821effffff7d831effffff\");\n    const Mons$Char_white$48 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff807e1effffff817e1effffff7d7f1effffff7f7f1effffff817f1effffff7d801effffff7f801effffff81801effffff7d811effffff7e811effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$49 = Image3D$parse$(\"807c1effffff7f7d1effffff807d1effffff7e7e1effffff807e1effffff7d7f1effffff807f1effffff80801effffff80811effffff80821effffff80831effffff\");\n    const Mons$Char_white$50 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff807f1effffff7f801effffff7e811effffff7d821effffff7d831effffff7e831effffff7f831effffff80831effffff81831effffff\");\n    const Mons$Char_white$51 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff817e1effffff7e7f1effffff7f7f1effffff807f1effffff81801effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$52 = Image3D$parse$(\"7e7c1effffff7e7d1effffff7e7e1effffff807e1effffff7e7f1effffff807f1effffff7d801effffff80801effffff7d811effffff7e811effffff7f811effffff80811effffff81811effffff80821effffff80831effffff\");\n    const Mons$Char_white$53 = Image3D$parse$(\"7d7c1effffff7e7c1effffff7f7c1effffff807c1effffff817c1effffff7d7d1effffff7d7e1effffff7d7f1effffff7e7f1effffff7f7f1effffff807f1effffff81801effffff81811effffff81821effffff7d831effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$54 = Image3D$parse$(\"807c1effffff7f7d1effffff7e7e1effffff7e7f1effffff7f7f1effffff807f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$55 = Image3D$parse$(\"7d7c1effffff7e7c1effffff7f7c1effffff807c1effffff817c1effffff817d1effffff807e1effffff7f7f1effffff7e801effffff7e811effffff7e821effffff7e831effffff\");\n    const Mons$Char_white$56 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff7e7f1effffff7f7f1effffff807f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$57 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff7d7f1effffff817f1effffff7e801effffff7f801effffff80801effffff80811effffff7f821effffff7e831effffff\");\n    const Mons$Char_white$58 = Image3D$parse$(\"7f7f1effffff807f1effffff7f821effffff80821effffff\");\n    const Mons$Char_white$59 = Image3D$parse$(\"7f7f1effffff807f1effffff7f821effffff80821effffff7f831effffff80831effffff80841effffff7f851effffff\");\n    const Mons$Char_white$60 = Image3D$parse$(\"807c1effffff7f7d1effffff7e7e1effffff7d7f1effffff7d801effffff7e811effffff7f821effffff80831effffff\");\n    const Mons$Char_white$61 = Image3D$parse$(\"7d7f1effffff7e7f1effffff7f7f1effffff807f1effffff817f1effffff7d811effffff7e811effffff7f811effffff80811effffff81811effffff\");\n    const Mons$Char_white$62 = Image3D$parse$(\"7e7c1effffff7f7d1effffff807e1effffff817f1effffff81801effffff80811effffff7f821effffff7e831effffff\");\n    const Mons$Char_white$63 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff807f1effffff7f801effffff7f811effffff7f831effffff\");\n    const Mons$Char_white$64 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff807e1effffff817e1effffff7d7f1effffff7f7f1effffff817f1effffff7d801effffff7f801effffff81801effffff7d811effffff80811effffff81811effffff7d821effffff7e831effffff7f831effffff80831effffff81831effffff\");\n    const Mons$Char_white$65 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff7e811effffff7f811effffff80811effffff81811effffff7d821effffff81821effffff7d831effffff81831effffff\");\n    const Mons$Char_white$66 = Image3D$parse$(\"7d7c1effffff7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff7d7f1effffff7e7f1effffff7f7f1effffff807f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7d831effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$67 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff7d7f1effffff7d801effffff7d811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$68 = Image3D$parse$(\"7d7c1effffff7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7d831effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$69 = Image3D$parse$(\"7d7c1effffff7e7c1effffff7f7c1effffff807c1effffff817c1effffff7d7d1effffff7d7e1effffff7d7f1effffff7e7f1effffff7f7f1effffff807f1effffff817f1effffff7d801effffff7d811effffff7d821effffff7d831effffff7e831effffff7f831effffff80831effffff81831effffff\");\n    const Mons$Char_white$70 = Image3D$parse$(\"7d7c1effffff7e7c1effffff7f7c1effffff807c1effffff817c1effffff7d7d1effffff7d7e1effffff7d7f1effffff7e7f1effffff7f7f1effffff807f1effffff7d801effffff7d811effffff7d821effffff7d831effffff\");\n    const Mons$Char_white$71 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff7d7f1effffff7d801effffff7d811effffff80811effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$72 = Image3D$parse$(\"7d7c1effffff817c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff7d7f1effffff7e7f1effffff7f7f1effffff807f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7d831effffff81831effffff\");\n    const Mons$Char_white$73 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff7f7d1effffff7f7e1effffff7f7f1effffff7f801effffff7f811effffff7f821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$74 = Image3D$parse$(\"817c1effffff817d1effffff817e1effffff817f1effffff81801effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$75 = Image3D$parse$(\"7d7c1effffff817c1effffff7d7d1effffff807d1effffff7d7e1effffff7f7e1effffff7d7f1effffff7e7f1effffff7d801effffff7f801effffff7d811effffff80811effffff7d821effffff81821effffff7d831effffff81831effffff\");\n    const Mons$Char_white$76 = Image3D$parse$(\"7d7c1effffff7d7d1effffff7d7e1effffff7d7f1effffff7d801effffff7d811effffff7d821effffff7d831effffff7e831effffff7f831effffff80831effffff81831effffff\");\n    const Mons$Char_white$77 = Image3D$parse$(\"7d7c1effffff817c1effffff7d7d1effffff7e7d1effffff807d1effffff817d1effffff7d7e1effffff7f7e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7d831effffff81831effffff\");\n    const Mons$Char_white$78 = Image3D$parse$(\"7d7c1effffff817c1effffff7d7d1effffff7e7d1effffff817d1effffff7d7e1effffff7f7e1effffff817e1effffff7d7f1effffff807f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7d831effffff81831effffff\");\n    const Mons$Char_white$79 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$80 = Image3D$parse$(\"7d7c1effffff7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff7e801effffff7f801effffff80801effffff7d811effffff7d821effffff7d831effffff\");\n    const Mons$Char_white$81 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff80841effffff81841effffff\");\n    const Mons$Char_white$82 = Image3D$parse$(\"7d7c1effffff7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff7e801effffff7f801effffff80801effffff7d811effffff81811effffff7d821effffff81821effffff7d831effffff81831effffff\");\n    const Mons$Char_white$83 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff7e7f1effffff7f7f1effffff80801effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$84 = Image3D$parse$(\"7d7c1effffff7e7c1effffff7f7c1effffff807c1effffff817c1effffff7f7d1effffff7f7e1effffff7f7f1effffff7f801effffff7f811effffff7f821effffff7f831effffff\");\n    const Mons$Char_white$85 = Image3D$parse$(\"7d7c1effffff817c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$86 = Image3D$parse$(\"7d7c1effffff817c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7e821effffff80821effffff7f831effffff\");\n    const Mons$Char_white$87 = Image3D$parse$(\"7d7c1effffff817c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff7f811effffff81811effffff7d821effffff7e821effffff80821effffff81821effffff7d831effffff81831effffff\");\n    const Mons$Char_white$88 = Image3D$parse$(\"7d7c1effffff817c1effffff7d7d1effffff817d1effffff7e7e1effffff807e1effffff7f7f1effffff7f801effffff7e811effffff80811effffff7d821effffff81821effffff7d831effffff81831effffff\");\n    const Mons$Char_white$89 = Image3D$parse$(\"7d7c1effffff817c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff7e7f1effffff807f1effffff7f801effffff7f811effffff7f821effffff7f831effffff\");\n    const Mons$Char_white$90 = Image3D$parse$(\"7d7c1effffff7e7c1effffff7f7c1effffff807c1effffff817c1effffff817d1effffff807e1effffff7f7f1effffff7e801effffff7e811effffff7d821effffff7d831effffff7e831effffff7f831effffff80831effffff81831effffff\");\n    const Mons$Char_white$91 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff7e7d1effffff7e7e1effffff7e7f1effffff7e801effffff7e811effffff7e821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$92 = Image3D$parse$(\"7d7c1effffff7e7d1effffff7e7e1effffff7f7f1effffff7f801effffff80811effffff80821effffff81831effffff\");\n    const Mons$Char_white$93 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff807d1effffff807e1effffff807f1effffff80801effffff80811effffff80821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$94 = Image3D$parse$(\"7f7b1effffff7e7c1effffff807c1effffff7d7d1effffff817d1effffff\");\n    const Mons$Char_white$95 = Image3D$parse$(\"7d831effffff7e831effffff7f831effffff80831effffff81831effffff\");\n    const Mons$Char_white$96 = Image3D$parse$(\"7e7b1effffff7f7c1effffff807d1effffff\");\n    const Mons$Char_white$97 = Image3D$parse$(\"7e7e1effffff7f7e1effffff807e1effffff817f1effffff7e801effffff7f801effffff80801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff81831effffff\");\n    const Mons$Char_white$98 = Image3D$parse$(\"7d7c1effffff7d7d1effffff7d7e1effffff7e7e1effffff7f7e1effffff807e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7d831effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$99 = Image3D$parse$(\"7e7e1effffff7f7e1effffff807e1effffff7d7f1effffff817f1effffff7d801effffff7d811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$font = (() => {\n        var _map$1 = Map$new;\n        var _map$2 = Mons$font$set_img$(100, Mons$Char_white$100, _map$1);\n        var _map$3 = Mons$font$set_img$(101, Mons$Char_white$101, _map$2);\n        var _map$4 = Mons$font$set_img$(102, Mons$Char_white$102, _map$3);\n        var _map$5 = Mons$font$set_img$(103, Mons$Char_white$103, _map$4);\n        var _map$6 = Mons$font$set_img$(104, Mons$Char_white$104, _map$5);\n        var _map$7 = Mons$font$set_img$(105, Mons$Char_white$105, _map$6);\n        var _map$8 = Mons$font$set_img$(106, Mons$Char_white$106, _map$7);\n        var _map$9 = Mons$font$set_img$(107, Mons$Char_white$107, _map$8);\n        var _map$10 = Mons$font$set_img$(108, Mons$Char_white$108, _map$9);\n        var _map$11 = Mons$font$set_img$(109, Mons$Char_white$109, _map$10);\n        var _map$12 = Mons$font$set_img$(110, Mons$Char_white$110, _map$11);\n        var _map$13 = Mons$font$set_img$(111, Mons$Char_white$111, _map$12);\n        var _map$14 = Mons$font$set_img$(112, Mons$Char_white$112, _map$13);\n        var _map$15 = Mons$font$set_img$(113, Mons$Char_white$113, _map$14);\n        var _map$16 = Mons$font$set_img$(114, Mons$Char_white$114, _map$15);\n        var _map$17 = Mons$font$set_img$(115, Mons$Char_white$115, _map$16);\n        var _map$18 = Mons$font$set_img$(116, Mons$Char_white$116, _map$17);\n        var _map$19 = Mons$font$set_img$(117, Mons$Char_white$117, _map$18);\n        var _map$20 = Mons$font$set_img$(118, Mons$Char_white$118, _map$19);\n        var _map$21 = Mons$font$set_img$(119, Mons$Char_white$119, _map$20);\n        var _map$22 = Mons$font$set_img$(120, Mons$Char_white$120, _map$21);\n        var _map$23 = Mons$font$set_img$(121, Mons$Char_white$121, _map$22);\n        var _map$24 = Mons$font$set_img$(122, Mons$Char_white$122, _map$23);\n        var _map$25 = Mons$font$set_img$(123, Mons$Char_white$123, _map$24);\n        var _map$26 = Mons$font$set_img$(124, Mons$Char_white$124, _map$25);\n        var _map$27 = Mons$font$set_img$(125, Mons$Char_white$125, _map$26);\n        var _map$28 = Mons$font$set_img$(126, Mons$Char_white$126, _map$27);\n        var _map$29 = Mons$font$set_img$(32, Mons$Char_white$32, _map$28);\n        var _map$30 = Mons$font$set_img$(33, Mons$Char_white$33, _map$29);\n        var _map$31 = Mons$font$set_img$(34, Mons$Char_white$34, _map$30);\n        var _map$32 = Mons$font$set_img$(35, Mons$Char_white$35, _map$31);\n        var _map$33 = Mons$font$set_img$(36, Mons$Char_white$36, _map$32);\n        var _map$34 = Mons$font$set_img$(37, Mons$Char_white$37, _map$33);\n        var _map$35 = Mons$font$set_img$(38, Mons$Char_white$38, _map$34);\n        var _map$36 = Mons$font$set_img$(39, Mons$Char_white$39, _map$35);\n        var _map$37 = Mons$font$set_img$(40, Mons$Char_white$40, _map$36);\n        var _map$38 = Mons$font$set_img$(41, Mons$Char_white$41, _map$37);\n        var _map$39 = Mons$font$set_img$(42, Mons$Char_white$42, _map$38);\n        var _map$40 = Mons$font$set_img$(43, Mons$Char_white$43, _map$39);\n        var _map$41 = Mons$font$set_img$(44, Mons$Char_white$44, _map$40);\n        var _map$42 = Mons$font$set_img$(45, Mons$Char_white$45, _map$41);\n        var _map$43 = Mons$font$set_img$(46, Mons$Char_white$46, _map$42);\n        var _map$44 = Mons$font$set_img$(47, Mons$Char_white$47, _map$43);\n        var _map$45 = Mons$font$set_img$(48, Mons$Char_white$48, _map$44);\n        var _map$46 = Mons$font$set_img$(49, Mons$Char_white$49, _map$45);\n        var _map$47 = Mons$font$set_img$(50, Mons$Char_white$50, _map$46);\n        var _map$48 = Mons$font$set_img$(51, Mons$Char_white$51, _map$47);\n        var _map$49 = Mons$font$set_img$(52, Mons$Char_white$52, _map$48);\n        var _map$50 = Mons$font$set_img$(53, Mons$Char_white$53, _map$49);\n        var _map$51 = Mons$font$set_img$(54, Mons$Char_white$54, _map$50);\n        var _map$52 = Mons$font$set_img$(55, Mons$Char_white$55, _map$51);\n        var _map$53 = Mons$font$set_img$(56, Mons$Char_white$56, _map$52);\n        var _map$54 = Mons$font$set_img$(57, Mons$Char_white$57, _map$53);\n        var _map$55 = Mons$font$set_img$(58, Mons$Char_white$58, _map$54);\n        var _map$56 = Mons$font$set_img$(59, Mons$Char_white$59, _map$55);\n        var _map$57 = Mons$font$set_img$(60, Mons$Char_white$60, _map$56);\n        var _map$58 = Mons$font$set_img$(61, Mons$Char_white$61, _map$57);\n        var _map$59 = Mons$font$set_img$(62, Mons$Char_white$62, _map$58);\n        var _map$60 = Mons$font$set_img$(63, Mons$Char_white$63, _map$59);\n        var _map$61 = Mons$font$set_img$(64, Mons$Char_white$64, _map$60);\n        var _map$62 = Mons$font$set_img$(65, Mons$Char_white$65, _map$61);\n        var _map$63 = Mons$font$set_img$(66, Mons$Char_white$66, _map$62);\n        var _map$64 = Mons$font$set_img$(67, Mons$Char_white$67, _map$63);\n        var _map$65 = Mons$font$set_img$(68, Mons$Char_white$68, _map$64);\n        var _map$66 = Mons$font$set_img$(69, Mons$Char_white$69, _map$65);\n        var _map$67 = Mons$font$set_img$(70, Mons$Char_white$70, _map$66);\n        var _map$68 = Mons$font$set_img$(71, Mons$Char_white$71, _map$67);\n        var _map$69 = Mons$font$set_img$(72, Mons$Char_white$72, _map$68);\n        var _map$70 = Mons$font$set_img$(73, Mons$Char_white$73, _map$69);\n        var _map$71 = Mons$font$set_img$(74, Mons$Char_white$74, _map$70);\n        var _map$72 = Mons$font$set_img$(75, Mons$Char_white$75, _map$71);\n        var _map$73 = Mons$font$set_img$(76, Mons$Char_white$76, _map$72);\n        var _map$74 = Mons$font$set_img$(77, Mons$Char_white$77, _map$73);\n        var _map$75 = Mons$font$set_img$(78, Mons$Char_white$78, _map$74);\n        var _map$76 = Mons$font$set_img$(79, Mons$Char_white$79, _map$75);\n        var _map$77 = Mons$font$set_img$(80, Mons$Char_white$80, _map$76);\n        var _map$78 = Mons$font$set_img$(81, Mons$Char_white$81, _map$77);\n        var _map$79 = Mons$font$set_img$(82, Mons$Char_white$82, _map$78);\n        var _map$80 = Mons$font$set_img$(83, Mons$Char_white$83, _map$79);\n        var _map$81 = Mons$font$set_img$(84, Mons$Char_white$84, _map$80);\n        var _map$82 = Mons$font$set_img$(85, Mons$Char_white$85, _map$81);\n        var _map$83 = Mons$font$set_img$(86, Mons$Char_white$86, _map$82);\n        var _map$84 = Mons$font$set_img$(87, Mons$Char_white$87, _map$83);\n        var _map$85 = Mons$font$set_img$(88, Mons$Char_white$88, _map$84);\n        var _map$86 = Mons$font$set_img$(89, Mons$Char_white$89, _map$85);\n        var _map$87 = Mons$font$set_img$(90, Mons$Char_white$90, _map$86);\n        var _map$88 = Mons$font$set_img$(91, Mons$Char_white$91, _map$87);\n        var _map$89 = Mons$font$set_img$(92, Mons$Char_white$92, _map$88);\n        var _map$90 = Mons$font$set_img$(93, Mons$Char_white$93, _map$89);\n        var _map$91 = Mons$font$set_img$(94, Mons$Char_white$94, _map$90);\n        var _map$92 = Mons$font$set_img$(95, Mons$Char_white$95, _map$91);\n        var _map$93 = Mons$font$set_img$(96, Mons$Char_white$96, _map$92);\n        var _map$94 = Mons$font$set_img$(97, Mons$Char_white$97, _map$93);\n        var _map$95 = Mons$font$set_img$(98, Mons$Char_white$98, _map$94);\n        var _map$96 = Mons$font$set_img$(99, Mons$Char_white$99, _map$95);\n        var _map$97 = Mons$font$set_img$(9312, Mons$Char_black$normal, _map$96);\n        var _map$98 = Mons$font$set_img$(9313, Mons$Char_black$earth, _map$97);\n        var _map$99 = Mons$font$set_img$(9314, Mons$Char_black$fire, _map$98);\n        var _map$100 = Mons$font$set_img$(9315, Mons$Char_black$water, _map$99);\n        var _map$101 = Mons$font$set_img$(9316, Mons$Char_black$grass, _map$100);\n        var _map$102 = Mons$font$set_img$(9317, Mons$Char_black$electric, _map$101);\n        var _map$103 = Mons$font$set_img$(9318, Mons$Char_black$psychic, _map$102);\n        var _map$104 = Mons$font$set_img$(9319, Mons$Char_black$ice, _map$103);\n        var _map$105 = Mons$font$set_img$(9320, Mons$Char_black$light, _map$104);\n        var _map$106 = Mons$font$set_img$(9321, Mons$Char_black$darkness, _map$105);\n        var $601 = _map$106;\n        return $601;\n    })();\n\n    function List$reverse$go$(_xs$2, _res$3) {\n        var List$reverse$go$ = (_xs$2, _res$3) => ({\n            ctr: 'TCO',\n            arg: [_xs$2, _res$3]\n        });\n        var List$reverse$go = _xs$2 => _res$3 => List$reverse$go$(_xs$2, _res$3);\n        var arg = [_xs$2, _res$3];\n        while (true) {\n            let [_xs$2, _res$3] = arg;\n            var R = (() => {\n                var self = _xs$2;\n                switch (self._) {\n                    case 'List.cons':\n                        var $602 = self.head;\n                        var $603 = self.tail;\n                        var $604 = List$reverse$go$($603, List$cons$($602, _res$3));\n                        return $604;\n                    case 'List.nil':\n                        var $605 = _res$3;\n                        return $605;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$reverse$go = x0 => x1 => List$reverse$go$(x0, x1);\n\n    function List$reverse$(_xs$2) {\n        var $606 = List$reverse$go$(_xs$2, List$nil);\n        return $606;\n    };\n    const List$reverse = x0 => List$reverse$(x0);\n\n    function Mons$Object$get_dir$(_obj$1) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $608 = self.dir;\n                var $609 = $608;\n                var $607 = $609;\n                break;\n        };\n        return $607;\n    };\n    const Mons$Object$get_dir = x0 => Mons$Object$get_dir$(x0);\n\n    function Mons$draw$global_xy$(_t_x$1, _t_y$2, _obj$3) {\n        var self = _obj$3;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var _ani$15 = Mons$Object$get_ani$(_obj$3);\n                var _dir$16 = Mons$Object$get_dir$(_obj$3);\n                var _g_x$17 = ((_t_x$1 * 16) >>> 0);\n                var _g_y$18 = ((_t_y$2 * 16) >>> 0);\n                var self = _dir$16;\n                switch (self._) {\n                    case 'Mons.Dir.right':\n                        var $612 = (Math.max(_g_x$17 - _ani$15, 0));\n                        var _g_x$19 = $612;\n                        break;\n                    case 'Mons.Dir.up':\n                    case 'Mons.Dir.down':\n                        var $613 = _g_x$17;\n                        var _g_x$19 = $613;\n                        break;\n                    case 'Mons.Dir.left':\n                        var $614 = ((_g_x$17 + _ani$15) >>> 0);\n                        var _g_x$19 = $614;\n                        break;\n                };\n                var self = _dir$16;\n                switch (self._) {\n                    case 'Mons.Dir.right':\n                    case 'Mons.Dir.left':\n                        var $615 = _g_y$18;\n                        var _g_y$20 = $615;\n                        break;\n                    case 'Mons.Dir.up':\n                        var $616 = ((_g_y$18 + _ani$15) >>> 0);\n                        var _g_y$20 = $616;\n                        break;\n                    case 'Mons.Dir.down':\n                        var $617 = (Math.max(_g_y$18 - _ani$15, 0));\n                        var _g_y$20 = $617;\n                        break;\n                };\n                var $611 = Pair$new$(_g_x$19, _g_y$20);\n                var $610 = $611;\n                break;\n        };\n        return $610;\n    };\n    const Mons$draw$global_xy = x0 => x1 => x2 => Mons$draw$global_xy$(x0, x1, x2);\n\n    function Nat$mod$go$(_n$1, _m$2, _r$3) {\n        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _r$3]\n        });\n        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);\n        var arg = [_n$1, _m$2, _r$3];\n        while (true) {\n            let [_n$1, _m$2, _r$3] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $618 = Nat$mod$go$(_n$1, _r$3, _m$2);\n                    return $618;\n                } else {\n                    var $619 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $621 = _r$3;\n                        var $620 = $621;\n                    } else {\n                        var $622 = (self - 1n);\n                        var $623 = Nat$mod$go$($622, $619, Nat$succ$(_r$3));\n                        var $620 = $623;\n                    };\n                    return $620;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);\n\n    function Nat$mod$(_n$1, _m$2) {\n        var $624 = Nat$mod$go$(_n$1, _m$2, 0n);\n        return $624;\n    };\n    const Nat$mod = x0 => x1 => Nat$mod$(x0, x1);\n\n    function Either$(_A$1, _B$2) {\n        var $625 = null;\n        return $625;\n    };\n    const Either = x0 => x1 => Either$(x0, x1);\n\n    function Either$left$(_value$3) {\n        var $626 = ({\n            _: 'Either.left',\n            'value': _value$3\n        });\n        return $626;\n    };\n    const Either$left = x0 => Either$left$(x0);\n\n    function Either$right$(_value$3) {\n        var $627 = ({\n            _: 'Either.right',\n            'value': _value$3\n        });\n        return $627;\n    };\n    const Either$right = x0 => Either$right$(x0);\n\n    function Nat$sub_rem$(_n$1, _m$2) {\n        var Nat$sub_rem$ = (_n$1, _m$2) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2]\n        });\n        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);\n        var arg = [_n$1, _m$2];\n        while (true) {\n            let [_n$1, _m$2] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $628 = Either$left$(_n$1);\n                    return $628;\n                } else {\n                    var $629 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $631 = Either$right$(Nat$succ$($629));\n                        var $630 = $631;\n                    } else {\n                        var $632 = (self - 1n);\n                        var $633 = Nat$sub_rem$($632, $629);\n                        var $630 = $633;\n                    };\n                    return $630;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);\n\n    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {\n        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _d$3]\n        });\n        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);\n        var arg = [_n$1, _m$2, _d$3];\n        while (true) {\n            let [_n$1, _m$2, _d$3] = arg;\n            var R = (() => {\n                var self = Nat$sub_rem$(_n$1, _m$2);\n                switch (self._) {\n                    case 'Either.left':\n                        var $634 = self.value;\n                        var $635 = Nat$div_mod$go$($634, _m$2, Nat$succ$(_d$3));\n                        return $635;\n                    case 'Either.right':\n                        var $636 = Pair$new$(_d$3, _n$1);\n                        return $636;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);\n    const Nat$div_mod = a0 => a1 => (({\n        _: 'Pair.new',\n        'fst': a0 / a1,\n        'snd': a0 % a1\n    }));\n    const Nat$div = a0 => a1 => (a0 / a1);\n\n    function Mons$draw$cur_sprite$(_idl$1, _sprites$2) {\n        var _len_sprite$3 = (list_length(_sprites$2));\n        var _idl_nat$4 = U32$to_nat$((Math.max(_idl$1 - 1, 0)));\n        var _idx$5 = Nat$mod$((_idl_nat$4 / 4n), _len_sprite$3);\n        var self = List$at$(_idx$5, _sprites$2);\n        switch (self._) {\n            case 'Maybe.some':\n                var $638 = self.value;\n                var $639 = $638;\n                var $637 = $639;\n                break;\n            case 'Maybe.none':\n                var $640 = Image3D$empty;\n                var $637 = $640;\n                break;\n        };\n        return $637;\n    };\n    const Mons$draw$cur_sprite = x0 => x1 => Mons$draw$cur_sprite$(x0, x1);\n\n    function Mons$Sprite$new$(_x$1, _y$2, _z$3, _img$4) {\n        var $641 = ({\n            _: 'Mons.Sprite.new',\n            'x': _x$1,\n            'y': _y$2,\n            'z': _z$3,\n            'img': _img$4\n        });\n        return $641;\n    };\n    const Mons$Sprite$new = x0 => x1 => x2 => x3 => Mons$Sprite$new$(x0, x1, x2, x3);\n\n    function Mons$game_sprites$(_game$1) {\n        var self = _game$1;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $643 = self.map;\n                var $644 = self.tik;\n                var _sprs$7 = List$nil;\n                var self = Mons$Game$get_hero_pos$(_game$1);\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $646 = self.value;\n                        var _c_x$9 = (($646 & 0xFFF));\n                        var _c_y$10 = ((($646 >>> 12) & 0xFFF));\n                        var _c_z$11 = (($646 >>> 24));\n                        var _sprs$12 = (() => {\n                            var $648 = _sprs$7;\n                            var $649 = 0;\n                            var $650 = 17;\n                            let _sprs$13 = $648;\n                            for (let _x$12 = $649; _x$12 < $650; ++_x$12) {\n                                var _sprs$14 = (() => {\n                                    var $651 = _sprs$13;\n                                    var $652 = 0;\n                                    var $653 = 13;\n                                    let _sprs$15 = $651;\n                                    for (let _y$14 = $652; _y$14 < $653; ++_y$14) {\n                                        var _t_x$16 = (((Math.max(_c_x$9 - 8, 0)) + _x$12) >>> 0);\n                                        var _t_y$17 = (((Math.max(_c_y$10 - 6, 0)) + _y$14) >>> 0);\n                                        var _t_z$18 = _c_z$11;\n                                        var _pos$19 = ((0 | _t_x$16 | (_t_y$17 << 12) | (_t_z$18 << 24)));\n                                        var _got$20 = Map$get$(U32$to_bits$(_pos$19), $643);\n                                        var self = _got$20;\n                                        switch (self._) {\n                                            case 'Maybe.some':\n                                                var $654 = self.value;\n                                                var $655 = List$reverse$($654);\n                                                var _objs$21 = $655;\n                                                break;\n                                            case 'Maybe.none':\n                                                var $656 = List$cons$(Mons$Object$void, List$nil);\n                                                var _objs$21 = $656;\n                                                break;\n                                        };\n                                        var _sprs$22 = (() => {\n                                            var $658 = _sprs$15;\n                                            var $659 = _objs$21;\n                                            let _sprs$23 = $658;\n                                            let _obj$22;\n                                            while ($659._ === 'List.cons') {\n                                                _obj$22 = $659.head;\n                                                var self = _obj$22;\n                                                switch (self._) {\n                                                    case 'Mons.Object.new':\n                                                        var $660 = self.kin;\n                                                        var $661 = self.dir;\n                                                        var $662 = self.ani;\n                                                        var self = Mons$Kind$attr$($660);\n                                                        switch (self._) {\n                                                            case 'Mons.Attr.new':\n                                                                var $664 = self.wlk;\n                                                                var _sprites$45 = $664(_t_x$16)(_t_y$17)($662)($661);\n                                                                var self = Mons$draw$global_xy$(_t_x$16, _t_y$17, _obj$22);\n                                                                switch (self._) {\n                                                                    case 'Pair.new':\n                                                                        var $666 = self.fst;\n                                                                        var $667 = self.snd;\n                                                                        var _s_z$48 = _t_z$18;\n                                                                        var self = Mons$Object$is_standing$(_obj$22);\n                                                                        if (self) {\n                                                                            var _cur_spr$49 = Mons$draw$cur_sprite$($644, _sprites$45);\n                                                                            var _spr$50 = Mons$Sprite$new$($666, $667, _s_z$48, _cur_spr$49);\n                                                                            var $669 = List$cons$(_spr$50, _sprs$23);\n                                                                            var $668 = $669;\n                                                                        } else {\n                                                                            var _sprs$49 = (() => {\n                                                                                var $672 = _sprs$23;\n                                                                                var $673 = _sprites$45;\n                                                                                let _sprs$50 = $672;\n                                                                                let _img$49;\n                                                                                while ($673._ === 'List.cons') {\n                                                                                    _img$49 = $673.head;\n                                                                                    var _ani$51 = Mons$Object$get_ani$(_obj$22);\n                                                                                    var _dir$52 = Mons$Object$get_dir$(_obj$22);\n                                                                                    var _spr$53 = Mons$Sprite$new$($666, $667, _s_z$48, _img$49);\n                                                                                    var $672 = List$cons$(_spr$53, _sprs$50);\n                                                                                    _sprs$50 = $672;\n                                                                                    $673 = $673.tail;\n                                                                                }\n                                                                                return _sprs$50;\n                                                                            })();\n                                                                            var $670 = _sprs$49;\n                                                                            var $668 = $670;\n                                                                        };\n                                                                        var $665 = $668;\n                                                                        break;\n                                                                };\n                                                                var $663 = $665;\n                                                                break;\n                                                        };\n                                                        var $658 = $663;\n                                                        break;\n                                                };\n                                                _sprs$23 = $658;\n                                                $659 = $659.tail;\n                                            }\n                                            return _sprs$23;\n                                        })();\n                                        var $651 = _sprs$22;\n                                        _sprs$15 = $651;\n                                    };\n                                    return _sprs$15;\n                                })();\n                                var $648 = _sprs$14;\n                                _sprs$13 = $648;\n                            };\n                            return _sprs$13;\n                        })();\n                        var $647 = _sprs$12;\n                        var $645 = $647;\n                        break;\n                    case 'Maybe.none':\n                        var $674 = List$nil;\n                        var $645 = $674;\n                        break;\n                };\n                var $642 = $645;\n                break;\n        };\n        return $642;\n    };\n    const Mons$game_sprites = x0 => Mons$game_sprites$(x0);\n    const Mons$scr_mid = ((0 | 120 | (80 << 12) | (0 << 24)));\n\n    function Cmp$as_lte$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.eql':\n                var $676 = Bool$true;\n                var $675 = $676;\n                break;\n            case 'Cmp.gtn':\n                var $677 = Bool$false;\n                var $675 = $677;\n                break;\n        };\n        return $675;\n    };\n    const Cmp$as_lte = x0 => Cmp$as_lte$(x0);\n\n    function Word$lte$(_a$2, _b$3) {\n        var $678 = Cmp$as_lte$(Word$cmp$(_a$2, _b$3));\n        return $678;\n    };\n    const Word$lte = x0 => x1 => Word$lte$(x0, x1);\n    const U32$lte = a0 => a1 => (a0 <= a1);\n\n    function Mons$Map$build_sprites$(_game$1, _scr$2, _hero_pos$3, _hero_obj$4) {\n        var _sprs$5 = Mons$game_sprites$(_game$1);\n        var _scr$6 = (() => {\n            var $681 = _scr$2;\n            var $682 = _sprs$5;\n            let _scr$7 = $681;\n            let _spr$6;\n            while ($682._ === 'List.cons') {\n                _spr$6 = $682.head;\n                var self = _spr$6;\n                switch (self._) {\n                    case 'Mons.Sprite.new':\n                        var $683 = self.x;\n                        var $684 = self.y;\n                        var $685 = self.z;\n                        var $686 = self.img;\n                        var _len$12 = Image3D$get_length$($686);\n                        var _scr$13 = (() => {\n                            var $688 = _scr$7;\n                            var $689 = 0;\n                            var $690 = _len$12;\n                            let _scr$14 = $688;\n                            for (let _i$13 = $689; _i$13 < $690; ++_i$13) {\n                                var _s_w$15 = ((Mons$scr_mid & 0xFFF));\n                                var _s_h$16 = (((Mons$scr_mid >>> 12) & 0xFFF));\n                                var _h_x$17 = ((_hero_pos$3 & 0xFFF));\n                                var _h_y$18 = (((_hero_pos$3 >>> 12) & 0xFFF));\n                                var self = Mons$draw$global_xy$(_h_x$17, _h_y$18, _hero_obj$4);\n                                switch (self._) {\n                                    case 'Pair.new':\n                                        var $691 = self.fst;\n                                        var $692 = self.snd;\n                                        var _s_x$21 = $683;\n                                        var _s_y$22 = $684;\n                                        var _s_z$23 = $685;\n                                        var _xyz$24 = (($686.buffer[_i$13 * 2]));\n                                        var _v_x$25 = (Math.max(((((_xyz$24 & 0xFFF)) + _s_x$21) >>> 0) - ((Mons$vox_mid & 0xFFF)), 0));\n                                        var _v_y$26 = (Math.max((((((_xyz$24 >>> 12) & 0xFFF)) + _s_y$22) >>> 0) - (((Mons$vox_mid >>> 12) & 0xFFF)), 0));\n                                        var _v_z$27 = ((_xyz$24 >>> 24));\n                                        var _ok0$28 = ((Math.max($691 - _s_w$15, 0)) <= _v_x$25);\n                                        var _ok1$29 = (_v_x$25 < (($691 + _s_w$15) >>> 0));\n                                        var _ok2$30 = ((Math.max($692 - _s_h$16, 0)) <= _v_y$26);\n                                        var _ok3$31 = (_v_y$26 < (($692 + _s_h$16) >>> 0));\n                                        var _ok$32 = (_ok0$28 && (_ok1$29 && (_ok2$30 && _ok3$31)));\n                                        var _c_x$33 = (Math.max(((_v_x$25 + ((Mons$scr_mid & 0xFFF))) >>> 0) - $691, 0));\n                                        var _c_y$34 = (Math.max(((_v_y$26 + (((Mons$scr_mid >>> 12) & 0xFFF))) >>> 0) - $692, 0));\n                                        var _c_z$35 = (_ok$32 ? _v_z$27 : 0);\n                                        var _pos$36 = ((0 | _c_x$33 | (_c_y$34 << 12) | (_c_z$35 << 24)));\n                                        var _col$37 = (($686.buffer[_i$13 * 2 + 1]));\n                                        var $693 = ((_scr$14.buffer[_scr$14.length * 2] = _pos$36, _scr$14.buffer[_scr$14.length * 2 + 1] = _col$37, _scr$14.length++, _scr$14));\n                                        var $688 = $693;\n                                        break;\n                                };\n                                _scr$14 = $688;\n                            };\n                            return _scr$14;\n                        })();\n                        var $687 = _scr$13;\n                        var $681 = $687;\n                        break;\n                };\n                _scr$7 = $681;\n                $682 = $682.tail;\n            }\n            return _scr$7;\n        })();\n        var $679 = _scr$6;\n        return $679;\n    };\n    const Mons$Map$build_sprites = x0 => x1 => x2 => x3 => Mons$Map$build_sprites$(x0, x1, x2, x3);\n    const Mons$draw$text_screen_bg = Image3D$empty;\n    const Mons$draw$msg_screen$line_0 = ((0 | 16 | (128 << 12) | (0 << 24)));\n    const Mons$draw$msg_screen$line_1 = ((0 | 16 | (144 << 12) | (0 << 24)));\n\n    function Mons$draw$mage_talk$(_text_0$1, _text_1$2, _scr$3) {\n        var _battle_boy_u$4 = Image3D$empty;\n        var _battle_mage_d$5 = Image3D$empty;\n        var _scr$6 = Mons$draw$image$(Mons$draw$text_screen_bg, ((0 | 120 | (80 << 12) | (0 << 24))), _scr$3);\n        var _scr$7 = Mons$draw$text$(_text_0$1, Mons$Char_black$font, Mons$draw$msg_screen$line_0, _scr$6);\n        var _scr$8 = Mons$draw$text$(_text_1$2, Mons$Char_black$font, Mons$draw$msg_screen$line_1, _scr$7);\n        var _scr$9 = Mons$draw$image$(_battle_boy_u$4, ((0 | 75 | (85 << 12) | (0 << 24))), _scr$8);\n        var _scr$10 = Mons$draw$image$(_battle_mage_d$5, ((0 | 180 | (80 << 12) | (0 << 24))), _scr$9);\n        var $694 = _scr$10;\n        return $694;\n    };\n    const Mons$draw$mage_talk = x0 => x1 => x2 => Mons$draw$mage_talk$(x0, x1, x2);\n\n    function Mons$Object$get_images$(_bag$1) {\n        var _images$2 = List$nil;\n        var _images$3 = (() => {\n            var $697 = _images$2;\n            var $698 = _bag$1;\n            let _images$4 = $697;\n            let _mon$3;\n            while ($698._ === 'List.cons') {\n                _mon$3 = $698.head;\n                var self = _mon$3;\n                switch (self._) {\n                    case 'Mons.Object.new':\n                        var $699 = self.kin;\n                        var self = Mons$Kind$attr$($699);\n                        switch (self._) {\n                            case 'Mons.Attr.new':\n                                var $701 = self.pic;\n                                var $702 = List$cons$($701, _images$4);\n                                var $700 = $702;\n                                break;\n                        };\n                        var $697 = $700;\n                        break;\n                };\n                _images$4 = $697;\n                $698 = $698.tail;\n            }\n            return _images$4;\n        })();\n        var $695 = _images$3;\n        return $695;\n    };\n    const Mons$Object$get_images = x0 => Mons$Object$get_images$(x0);\n\n    function Mons$Kind$get_name$(_kind$1) {\n        var self = Mons$Kind$attr$(_kind$1);\n        switch (self._) {\n            case 'Mons.Attr.new':\n                var $704 = self.name;\n                var $705 = $704;\n                var $703 = $705;\n                break;\n        };\n        return $703;\n    };\n    const Mons$Kind$get_name = x0 => Mons$Kind$get_name$(x0);\n\n    function Mons$Object$get_names$(_bag$1) {\n        var _names$2 = List$nil;\n        var _names$3 = (() => {\n            var $708 = _names$2;\n            var $709 = _bag$1;\n            let _names$4 = $708;\n            let _mon$3;\n            while ($709._ === 'List.cons') {\n                _mon$3 = $709.head;\n                var self = _mon$3;\n                switch (self._) {\n                    case 'Mons.Object.new':\n                        var $710 = self.kin;\n                        var _name$16 = Mons$Kind$get_name$($710);\n                        var $711 = List$cons$(_name$16, _names$4);\n                        var $708 = $711;\n                        break;\n                };\n                _names$4 = $708;\n                $709 = $709.tail;\n            }\n            return _names$4;\n        })();\n        var $706 = _names$3;\n        return $706;\n    };\n    const Mons$Object$get_names = x0 => Mons$Object$get_names$(x0);\n\n    function Mons$draw$list_image$go$(_images$1, _horizontal$2, _spacing$3, _pos$4, _scr$5, _idx$6) {\n        var Mons$draw$list_image$go$ = (_images$1, _horizontal$2, _spacing$3, _pos$4, _scr$5, _idx$6) => ({\n            ctr: 'TCO',\n            arg: [_images$1, _horizontal$2, _spacing$3, _pos$4, _scr$5, _idx$6]\n        });\n        var Mons$draw$list_image$go = _images$1 => _horizontal$2 => _spacing$3 => _pos$4 => _scr$5 => _idx$6 => Mons$draw$list_image$go$(_images$1, _horizontal$2, _spacing$3, _pos$4, _scr$5, _idx$6);\n        var arg = [_images$1, _horizontal$2, _spacing$3, _pos$4, _scr$5, _idx$6];\n        while (true) {\n            let [_images$1, _horizontal$2, _spacing$3, _pos$4, _scr$5, _idx$6] = arg;\n            var R = (() => {\n                var _x$7 = ((_pos$4 & 0xFFF));\n                var _y$8 = (((_pos$4 >>> 12) & 0xFFF));\n                var self = _images$1;\n                switch (self._) {\n                    case 'List.cons':\n                        var $713 = self.head;\n                        var $714 = self.tail;\n                        var _inventory_mon_selection$11 = Image3D$empty;\n                        var _scr$12 = Mons$draw$image$(_inventory_mon_selection$11, _pos$4, _scr$5);\n                        var _scr$13 = Mons$draw$image$($713, _pos$4, _scr$12);\n                        var self = _horizontal$2;\n                        if (self) {\n                            var $716 = ((0 | ((_x$7 + _spacing$3) >>> 0) | (_y$8 << 12) | (0 << 24)));\n                            var _pos$14 = $716;\n                        } else {\n                            var $717 = ((0 | _x$7 | (((_y$8 + _spacing$3) >>> 0) << 12) | (0 << 24)));\n                            var _pos$14 = $717;\n                        };\n                        var $715 = Mons$draw$list_image$go$($714, _horizontal$2, _spacing$3, _pos$14, _scr$13, ((_idx$6 + 1) >>> 0));\n                        var $712 = $715;\n                        break;\n                    case 'List.nil':\n                        var $718 = _scr$5;\n                        var $712 = $718;\n                        break;\n                };\n                return $712;\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Mons$draw$list_image$go = x0 => x1 => x2 => x3 => x4 => x5 => Mons$draw$list_image$go$(x0, x1, x2, x3, x4, x5);\n\n    function Mons$draw$list_image$(_images$1, _horizontal$2, _spacing$3, _start_pos$4, _scr$5) {\n        var _qtd$6 = (Number((list_length(_images$1))));\n        var $719 = Mons$draw$list_image$go$(_images$1, _horizontal$2, _spacing$3, _start_pos$4, _scr$5, 0);\n        return $719;\n    };\n    const Mons$draw$list_image = x0 => x1 => x2 => x3 => x4 => Mons$draw$list_image$(x0, x1, x2, x3, x4);\n\n    function Mons$draw$mon_img_selected$(_mon_idx$1, _qtd$2, _horizontal$3, _spacing$4, _pos$5, _scr$6) {\n        var _x_pos$7 = ((_pos$5 & 0xFFF));\n        var _y_pos$8 = (((_pos$5 >>> 12) & 0xFFF));\n        var self = (_mon_idx$1 === 0);\n        if (self) {\n            var $721 = ((0 | _x_pos$7 | (_y_pos$8 << 12) | (0 << 24)));\n            var _pos$9 = $721;\n        } else {\n            var self = _horizontal$3;\n            if (self) {\n                var $723 = ((0 | ((_x_pos$7 + ((_spacing$4 * _mon_idx$1) >>> 0)) >>> 0) | (_y_pos$8 << 12) | (0 << 24)));\n                var $722 = $723;\n            } else {\n                var $724 = ((0 | _x_pos$7 | (((_y_pos$8 + ((_spacing$4 * _mon_idx$1) >>> 0)) >>> 0) << 12) | (0 << 24)));\n                var $722 = $724;\n            };\n            var _pos$9 = $722;\n        };\n        var self = (_qtd$2 === 0);\n        if (self) {\n            var $725 = _scr$6;\n            var $720 = $725;\n        } else {\n            var _inventory_mon_selected$10 = Image3D$empty;\n            var $726 = Mons$draw$image$(_inventory_mon_selected$10, _pos$9, _scr$6);\n            var $720 = $726;\n        };\n        return $720;\n    };\n    const Mons$draw$mon_img_selected = x0 => x1 => x2 => x3 => x4 => x5 => Mons$draw$mon_img_selected$(x0, x1, x2, x3, x4, x5);\n\n    function Mons$draw$initial_mons$(_obj$1, _scr$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $728 = self.bag;\n                var $729 = self.mon;\n                var _qtd$14 = (Number((list_length($728))));\n                var self = (_qtd$14 === 0);\n                if (self) {\n                    var $731 = Mons$draw$text$(\"nothing to show\", Mons$Char_white$font, ((0 | 60 | (50 << 12) | (0 << 24))), _scr$2);\n                    var $730 = $731;\n                } else {\n                    var _scr$15 = Mons$draw$image$(Mons$draw$text_screen_bg, ((0 | 120 | (90 << 12) | (0 << 24))), _scr$2);\n                    var _mons_images$16 = List$reverse$(Mons$Object$get_images$($728));\n                    var _mons_names$17 = List$reverse$(Mons$Object$get_names$($728));\n                    var _scr$18 = Mons$draw$list$(_mons_names$17, Bool$false, 34, Mons$Char_white$font, ((0 | 70 | (0 << 12) | (0 << 24))), _scr$15);\n                    var _scr$19 = Mons$draw$list_image$(_mons_images$16, Bool$false, 34, ((0 | 40 | (30 << 12) | (0 << 24))), _scr$18);\n                    var _scr$20 = Mons$draw$mon_img_selected$($729, _qtd$14, Bool$false, 34, ((0 | 40 | (30 << 12) | (0 << 24))), _scr$19);\n                    var _scr$21 = Mons$draw$text$(\"Choose a Mon to start with and \", Mons$Char_black$font, ((0 | 16 | (134 << 12) | (0 << 24))), _scr$20);\n                    var _scr$22 = Mons$draw$text$(\"run to the tower. [c]\", Mons$Char_black$font, ((0 | 16 | (148 << 12) | (0 << 24))), _scr$21);\n                    var $732 = _scr$22;\n                    var $730 = $732;\n                };\n                var $727 = $730;\n                break;\n        };\n        return $727;\n    };\n    const Mons$draw$initial_mons = x0 => x1 => Mons$draw$initial_mons$(x0, x1);\n    const String$concat = a0 => a1 => (a0 + a1);\n\n    function String$flatten$go$(_xs$1, _res$2) {\n        var String$flatten$go$ = (_xs$1, _res$2) => ({\n            ctr: 'TCO',\n            arg: [_xs$1, _res$2]\n        });\n        var String$flatten$go = _xs$1 => _res$2 => String$flatten$go$(_xs$1, _res$2);\n        var arg = [_xs$1, _res$2];\n        while (true) {\n            let [_xs$1, _res$2] = arg;\n            var R = (() => {\n                var self = _xs$1;\n                switch (self._) {\n                    case 'List.cons':\n                        var $733 = self.head;\n                        var $734 = self.tail;\n                        var $735 = String$flatten$go$($734, (_res$2 + $733));\n                        return $735;\n                    case 'List.nil':\n                        var $736 = _res$2;\n                        return $736;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const String$flatten$go = x0 => x1 => String$flatten$go$(x0, x1);\n\n    function String$flatten$(_xs$1) {\n        var $737 = String$flatten$go$(_xs$1, \"\");\n        return $737;\n    };\n    const String$flatten = x0 => String$flatten$(x0);\n\n    function Mons$draw$img_type$(_kind$1) {\n        var self = _kind$1;\n        switch (self._) {\n            case 'Mons.Kind.Mons':\n                var $739 = self.pri_type;\n                var self = $739;\n                switch (self._) {\n                    case 'Mons.Type.normal':\n                        var $741 = \"\\u{2460}\";\n                        var $740 = $741;\n                        break;\n                    case 'Mons.Type.earth':\n                        var $742 = \"\\u{2461}\";\n                        var $740 = $742;\n                        break;\n                    case 'Mons.Type.fire':\n                        var $743 = \"\\u{2462}\";\n                        var $740 = $743;\n                        break;\n                    case 'Mons.Type.water':\n                        var $744 = \"\\u{2463}\";\n                        var $740 = $744;\n                        break;\n                    case 'Mons.Type.grass':\n                        var $745 = \"\\u{2464}\";\n                        var $740 = $745;\n                        break;\n                    case 'Mons.Type.electric':\n                        var $746 = \"\\u{2465}\";\n                        var $740 = $746;\n                        break;\n                    case 'Mons.Type.psychic':\n                        var $747 = \"\\u{2466}\";\n                        var $740 = $747;\n                        break;\n                    case 'Mons.Type.ice':\n                        var $748 = \"\\u{2467}\";\n                        var $740 = $748;\n                        break;\n                    case 'Mons.Type.light':\n                        var $749 = \"\\u{2468}\";\n                        var $740 = $749;\n                        break;\n                    case 'Mons.Type.darkness':\n                        var $750 = \"\\u{2469}\";\n                        var $740 = $750;\n                        break;\n                };\n                var $738 = $740;\n                break;\n            case 'Mons.Kind.Const':\n            case 'Mons.Kind.Terrain':\n            case 'Mons.Kind.Interactive':\n                var $751 = \"\";\n                var $738 = $751;\n                break;\n        };\n        return $738;\n    };\n    const Mons$draw$img_type = x0 => Mons$draw$img_type$(x0);\n    const Mons$draw$small_HP = \"\\u{195}\\u{1a5}\";\n\n    function List$fold$(_list$2, _nil$4, _cons$5) {\n        var self = _list$2;\n        switch (self._) {\n            case 'List.cons':\n                var $753 = self.head;\n                var $754 = self.tail;\n                var $755 = _cons$5($753)(List$fold$($754, _nil$4, _cons$5));\n                var $752 = $755;\n                break;\n            case 'List.nil':\n                var $756 = _nil$4;\n                var $752 = $756;\n                break;\n        };\n        return $752;\n    };\n    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);\n\n    function Nat$to_base$go$(_base$1, _nat$2, _res$3) {\n        var Nat$to_base$go$ = (_base$1, _nat$2, _res$3) => ({\n            ctr: 'TCO',\n            arg: [_base$1, _nat$2, _res$3]\n        });\n        var Nat$to_base$go = _base$1 => _nat$2 => _res$3 => Nat$to_base$go$(_base$1, _nat$2, _res$3);\n        var arg = [_base$1, _nat$2, _res$3];\n        while (true) {\n            let [_base$1, _nat$2, _res$3] = arg;\n            var R = (() => {\n                var self = (({\n                    _: 'Pair.new',\n                    'fst': _nat$2 / _base$1,\n                    'snd': _nat$2 % _base$1\n                }));\n                switch (self._) {\n                    case 'Pair.new':\n                        var $757 = self.fst;\n                        var $758 = self.snd;\n                        var self = $757;\n                        if (self === 0n) {\n                            var $760 = List$cons$($758, _res$3);\n                            var $759 = $760;\n                        } else {\n                            var $761 = (self - 1n);\n                            var $762 = Nat$to_base$go$(_base$1, $757, List$cons$($758, _res$3));\n                            var $759 = $762;\n                        };\n                        return $759;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$to_base$go = x0 => x1 => x2 => Nat$to_base$go$(x0, x1, x2);\n\n    function Nat$to_base$(_base$1, _nat$2) {\n        var $763 = Nat$to_base$go$(_base$1, _nat$2, List$nil);\n        return $763;\n    };\n    const Nat$to_base = x0 => x1 => Nat$to_base$(x0, x1);\n    const Nat$gtn = a0 => a1 => (a0 > a1);\n    const Nat$lte = a0 => a1 => (a0 <= a1);\n\n    function Nat$show_digit$(_base$1, _n$2) {\n        var _m$3 = Nat$mod$(_n$2, _base$1);\n        var _base64$4 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$cons$(65, List$cons$(66, List$cons$(67, List$cons$(68, List$cons$(69, List$cons$(70, List$cons$(71, List$cons$(72, List$cons$(73, List$cons$(74, List$cons$(75, List$cons$(76, List$cons$(77, List$cons$(78, List$cons$(79, List$cons$(80, List$cons$(81, List$cons$(82, List$cons$(83, List$cons$(84, List$cons$(85, List$cons$(86, List$cons$(87, List$cons$(88, List$cons$(89, List$cons$(90, List$cons$(97, List$cons$(98, List$cons$(99, List$cons$(100, List$cons$(101, List$cons$(102, List$cons$(103, List$cons$(104, List$cons$(105, List$cons$(106, List$cons$(107, List$cons$(108, List$cons$(109, List$cons$(110, List$cons$(111, List$cons$(112, List$cons$(113, List$cons$(114, List$cons$(115, List$cons$(116, List$cons$(117, List$cons$(118, List$cons$(119, List$cons$(120, List$cons$(121, List$cons$(122, List$cons$(43, List$cons$(47, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));\n        var self = ((_base$1 > 0n) && (_base$1 <= 64n));\n        if (self) {\n            var self = List$at$(_m$3, _base64$4);\n            switch (self._) {\n                case 'Maybe.some':\n                    var $766 = self.value;\n                    var $767 = $766;\n                    var $765 = $767;\n                    break;\n                case 'Maybe.none':\n                    var $768 = 35;\n                    var $765 = $768;\n                    break;\n            };\n            var $764 = $765;\n        } else {\n            var $769 = 35;\n            var $764 = $769;\n        };\n        return $764;\n    };\n    const Nat$show_digit = x0 => x1 => Nat$show_digit$(x0, x1);\n\n    function Nat$to_string_base$(_base$1, _nat$2) {\n        var $770 = List$fold$(Nat$to_base$(_base$1, _nat$2), String$nil, (_n$3 => _str$4 => {\n            var $771 = String$cons$(Nat$show_digit$(_base$1, _n$3), _str$4);\n            return $771;\n        }));\n        return $770;\n    };\n    const Nat$to_string_base = x0 => x1 => Nat$to_string_base$(x0, x1);\n\n    function U32$to_string$(_n$1) {\n        var $772 = Nat$to_string_base$(10n, U32$to_nat$(_n$1));\n        return $772;\n    };\n    const U32$to_string = x0 => U32$to_string$(x0);\n    const Bool$not = a0 => (!a0);\n\n    function Mons$Object$remaining_hp$(_obj$1) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $774 = self.kin;\n                var $775 = self.dmg;\n                var self = $774;\n                switch (self._) {\n                    case 'Mons.Kind.Mons':\n                        var self = Mons$Kind$attr$($774);\n                        switch (self._) {\n                            case 'Mons.Attr.new':\n                                var $778 = self.mhp;\n                                var $779 = (Math.max($778 - $775, 0));\n                                var $777 = $779;\n                                break;\n                        };\n                        var $776 = $777;\n                        break;\n                    case 'Mons.Kind.Const':\n                    case 'Mons.Kind.Terrain':\n                    case 'Mons.Kind.Interactive':\n                        var $780 = $775;\n                        var $776 = $780;\n                        break;\n                };\n                var $773 = $776;\n                break;\n        };\n        return $773;\n    };\n    const Mons$Object$remaining_hp = x0 => Mons$Object$remaining_hp$(x0);\n\n    function Mons$Object$is_obj_defeated$(_obj$1) {\n        var $781 = (Mons$Object$remaining_hp$(_obj$1) === 0);\n        return $781;\n    };\n    const Mons$Object$is_obj_defeated = x0 => Mons$Object$is_obj_defeated$(x0);\n\n    function Mons$Object$is_battling$(_adve$1, _hero_or_mon$2) {\n        var _is_adve_alive$3 = (!Mons$Object$is_obj_defeated$(_adve$1));\n        var _is_hero_alive$4 = (!Mons$Object$is_obj_defeated$(_hero_or_mon$2));\n        var $782 = (_is_adve_alive$3 && _is_hero_alive$4);\n        return $782;\n    };\n    const Mons$Object$is_battling = x0 => x1 => Mons$Object$is_battling$(x0, x1);\n\n    function Mons$draw$background$(_idx$1) {\n        var self = (_idx$1 === 1);\n        if (self) {\n            var $784 = Pair$new$(Image3D$empty, Image3D$empty);\n            var $783 = $784;\n        } else {\n            var self = (_idx$1 === 2);\n            if (self) {\n                var $786 = Pair$new$(Image3D$empty, Image3D$empty);\n                var $785 = $786;\n            } else {\n                var $787 = Pair$new$(Image3D$empty, Image3D$empty);\n                var $785 = $787;\n            };\n            var $783 = $785;\n        };\n        return $783;\n    };\n    const Mons$draw$background = x0 => Mons$draw$background$(x0);\n\n    function Mons$draw$get_battle_bg$(_idx$1) {\n        var $788 = Pair$fst$(Mons$draw$background$(_idx$1));\n        return $788;\n    };\n    const Mons$draw$get_battle_bg = x0 => Mons$draw$get_battle_bg$(x0);\n\n    function Mons$draw$battle_bg$(_adve_kind$1, _is_boss$2, _idx$3, _scr$4) {\n        var _screen$battle_default$5 = Image3D$empty;\n        var _screen$battle_boss$6 = Image3D$empty;\n        var _scr$7 = Mons$draw$image$(Mons$draw$get_battle_bg$(_idx$3), ((0 | 120 | (80 << 12) | (0 << 24))), _scr$4);\n        var self = _is_boss$2;\n        if (self) {\n            var $790 = Mons$draw$image$(_screen$battle_boss$6, ((0 | 120 | (80 << 12) | (0 << 24))), _scr$7);\n            var _scr$8 = $790;\n        } else {\n            var $791 = Mons$draw$image$(_screen$battle_default$5, ((0 | 120 | (80 << 12) | (0 << 24))), _scr$7);\n            var _scr$8 = $791;\n        };\n        var $789 = _scr$8;\n        return $789;\n    };\n    const Mons$draw$battle_bg = x0 => x1 => x2 => x3 => Mons$draw$battle_bg$(x0, x1, x2, x3);\n\n    function Mons$draw$hero_hp$(_chp$1, _mhp$2, _name$3, _hero_hp$4, _scr$5) {\n        var _battle_hp$6 = Image3D$empty;\n        var _p_hp$7 = ((((_chp$1 * 70) >>> 0) / _mhp$2) >>> 0);\n        var _pos_chp$8 = ((0 | ((100 + _p_hp$7) >>> 0) | (82 << 12) | (0 << 24)));\n        var _pos_name$9 = ((0 | 139 | (82 << 12) | (0 << 24)));\n        var _scr$10 = Mons$draw$image$(_battle_hp$6, _pos_chp$8, _scr$5);\n        var _scr$11 = Mons$draw$text$(_name$3, Mons$Char_white$font, _pos_name$9, _scr$10);\n        var _scr$12 = Mons$draw$text$(_hero_hp$4, Mons$Char_black$font, ((0 | 139 | (97 << 12) | (0 << 24))), _scr$11);\n        var $792 = _scr$12;\n        return $792;\n    };\n    const Mons$draw$hero_hp = x0 => x1 => x2 => x3 => x4 => Mons$draw$hero_hp$(x0, x1, x2, x3, x4);\n\n    function Mons$draw$adve_hp$(_chp$1, _mhp$2, _name$3, _adve_hp$4, _scr$5) {\n        var _battle_hp$6 = Image3D$empty;\n        var _p_hp$7 = ((((_chp$1 * 70) >>> 0) / _mhp$2) >>> 0);\n        var _pos_chp$8 = ((0 | _p_hp$7 | (21 << 12) | (0 << 24)));\n        var _pos_name$9 = ((0 | 38 | (21 << 12) | (0 << 24)));\n        var _scr$10 = Mons$draw$image$(_battle_hp$6, _pos_chp$8, _scr$5);\n        var _scr$11 = Mons$draw$text$(_name$3, Mons$Char_white$font, _pos_name$9, _scr$10);\n        var _scr$12 = Mons$draw$text$(_adve_hp$4, Mons$Char_black$font, ((0 | 38 | (36 << 12) | (0 << 24))), _scr$11);\n        var $793 = _scr$12;\n        return $793;\n    };\n    const Mons$draw$adve_hp = x0 => x1 => x2 => x3 => x4 => Mons$draw$adve_hp$(x0, x1, x2, x3, x4);\n\n    function Mons$draw$effect$(_eff$1, _pos$2, _scr$3) {\n        var $794 = _scr$3;\n        return $794;\n    };\n    const Mons$draw$effect = x0 => x1 => x2 => Mons$draw$effect$(x0, x1, x2);\n\n    function Mons$draw$effects$(_hero_eff$1, _adve_eff$2, _scr$3) {\n        var _scr$4 = Mons$draw$effect$(_hero_eff$1, ((0 | 140 | (105 << 12) | (0 << 24))), _scr$3);\n        var _scr$5 = Mons$draw$effect$(_adve_eff$2, ((0 | 38 | (45 << 12) | (0 << 24))), _scr$4);\n        var $795 = _scr$5;\n        return $795;\n    };\n    const Mons$draw$effects = x0 => x1 => x2 => Mons$draw$effects$(x0, x1, x2);\n\n    function Mons$Turn$is_active$(_turn$1) {\n        var self = _turn$1;\n        switch (self._) {\n            case 'Mons.Turn.new':\n                var $797 = self.play;\n                var $798 = ($797 > 0);\n                var $796 = $798;\n                break;\n        };\n        return $796;\n    };\n    const Mons$Turn$is_active = x0 => Mons$Turn$is_active$(x0);\n\n    function Mons$Turn$hero_turn$(_turn$1) {\n        var self = _turn$1;\n        switch (self._) {\n            case 'Mons.Turn.new':\n                var $800 = self.exec_hero;\n                var $801 = $800;\n                var $799 = $801;\n                break;\n        };\n        return $799;\n    };\n    const Mons$Turn$hero_turn = x0 => Mons$Turn$hero_turn$(x0);\n\n    function Mons$Skill$get_name$(_skill$1) {\n        var self = _skill$1;\n        switch (self._) {\n            case 'Mons.Skill.hit_4':\n                var $803 = \"hit 4\";\n                var $802 = $803;\n                break;\n            case 'Mons.Skill.hit_2':\n                var $804 = \"hit 2\";\n                var $802 = $804;\n                break;\n            case 'Mons.Skill.heal':\n                var $805 = \"heal\";\n                var $802 = $805;\n                break;\n            case 'Mons.Skill.none':\n                var $806 = \"none\";\n                var $802 = $806;\n                break;\n            case 'Mons.Skill.run':\n                var $807 = \"Run\";\n                var $802 = $807;\n                break;\n            case 'Mons.Skill.dig':\n                var $808 = \"Dig\";\n                var $802 = $808;\n                break;\n            case 'Mons.Skill.sand_tomb':\n                var $809 = \"Sand bomb\";\n                var $802 = $809;\n                break;\n            case 'Mons.Skill.protect':\n                var $810 = \"Protect\";\n                var $802 = $810;\n                break;\n            case 'Mons.Skill.slam':\n                var $811 = \"Slam\";\n                var $802 = $811;\n                break;\n            case 'Mons.Skill.counter':\n                var $812 = \"Counter\";\n                var $802 = $812;\n                break;\n            case 'Mons.Skill.recover':\n                var $813 = \"Recover\";\n                var $802 = $813;\n                break;\n            case 'Mons.Skill.rock_smash':\n                var $814 = \"Rock Smash\";\n                var $802 = $814;\n                break;\n            case 'Mons.Skill.crunch':\n                var $815 = \"Crunch\";\n                var $802 = $815;\n                break;\n            case 'Mons.Skill.sludge_bomb':\n                var $816 = \"Sludge bomb\";\n                var $802 = $816;\n                break;\n            case 'Mons.Skill.gyro_ball':\n                var $817 = \"Gyro Ball\";\n                var $802 = $817;\n                break;\n            case 'Mons.Skill.iron_defense':\n                var $818 = \"Iron Defense\";\n                var $802 = $818;\n                break;\n            case 'Mons.Skill.super_fang':\n                var $819 = \"Super Fang\";\n                var $802 = $819;\n                break;\n            case 'Mons.Skill.hypnosis':\n                var $820 = \"Hypnosis\";\n                var $802 = $820;\n                break;\n            case 'Mons.Skill.dream_eater':\n                var $821 = \"Dream Eater\";\n                var $802 = $821;\n                break;\n            case 'Mons.Skill.wing_attack':\n                var $822 = \"Wing Attack\";\n                var $802 = $822;\n                break;\n            case 'Mons.Skill.moonlight':\n                var $823 = \"Moonlight\";\n                var $802 = $823;\n                break;\n            case 'Mons.Skill.play_rough':\n                var $824 = \"Play Rough\";\n                var $802 = $824;\n                break;\n            case 'Mons.Skill.psychic':\n                var $825 = \"Psychic\";\n                var $802 = $825;\n                break;\n            case 'Mons.Skill.ancient_power':\n                var $826 = \"Ancient Power\";\n                var $802 = $826;\n                break;\n            case 'Mons.Skill.thunder_wave':\n                var $827 = \"Thunder Wave\";\n                var $802 = $827;\n                break;\n            case 'Mons.Skill.charge':\n                var $828 = \"Charge\";\n                var $802 = $828;\n                break;\n            case 'Mons.Skill.agility':\n                var $829 = \"Agility\";\n                var $802 = $829;\n                break;\n            case 'Mons.Skill.hero_kill':\n                var $830 = \"ONE PUNCH\";\n                var $802 = $830;\n                break;\n            case 'Mons.Skill.nightmare':\n                var $831 = \"Nightmare\";\n                var $802 = $831;\n                break;\n        };\n        return $802;\n    };\n    const Mons$Skill$get_name = x0 => Mons$Skill$get_name$(x0);\n\n    function Mons$Skill$short_description$(_skill$1) {\n        var self = _skill$1;\n        switch (self._) {\n            case 'Mons.Skill.hit_4':\n                var $833 = \"damage 4\";\n                var $832 = $833;\n                break;\n            case 'Mons.Skill.hit_2':\n                var $834 = \"damage 2\";\n                var $832 = $834;\n                break;\n            case 'Mons.Skill.heal':\n                var $835 = \"heal 3\";\n                var $832 = $835;\n                break;\n            case 'Mons.Skill.none':\n                var $836 = \"does nothing\";\n                var $832 = $836;\n                break;\n            case 'Mons.Skill.run':\n                var $837 = \"Run from battle\";\n                var $832 = $837;\n                break;\n            case 'Mons.Skill.dig':\n                var $838 = \"Add hit next turn, add invul\";\n                var $832 = $838;\n                break;\n            case 'Mons.Skill.sand_tomb':\n                var $839 = \"Dmg this turn + burn(5)\";\n                var $832 = $839;\n                break;\n            case 'Mons.Skill.protect':\n                var $840 = \"-50% dmg next turn\";\n                var $832 = $840;\n                break;\n            case 'Mons.Skill.slam':\n            case 'Mons.Skill.wing_attack':\n                var $841 = \"Hit 6hp\";\n                var $832 = $841;\n                break;\n            case 'Mons.Skill.counter':\n                var $842 = \"Burn for 5 turns and heal 3hp\";\n                var $832 = $842;\n                break;\n            case 'Mons.Skill.recover':\n                var $843 = \"Restore 25% hp, add poison\";\n                var $832 = $843;\n                break;\n            case 'Mons.Skill.rock_smash':\n                var $844 = \"Hit 2hp + 50% of critical\";\n                var $832 = $844;\n                break;\n            case 'Mons.Skill.crunch':\n                var $845 = \"Hit 4hp + 25% of critical\";\n                var $832 = $845;\n                break;\n            case 'Mons.Skill.sludge_bomb':\n                var $846 = \"Hit 2hp + 30% of poisoning\";\n                var $832 = $846;\n                break;\n            case 'Mons.Skill.gyro_ball':\n                var $847 = \"Hit 4. If more agility + 50% dmg\";\n                var $832 = $847;\n                break;\n            case 'Mons.Skill.iron_defense':\n                var $848 = \"-25% dmg for this and next turn\";\n                var $832 = $848;\n                break;\n            case 'Mons.Skill.super_fang':\n                var $849 = \"Hit 50% hp + loses 25% of hp\";\n                var $832 = $849;\n                break;\n            case 'Mons.Skill.hypnosis':\n                var $850 = \"50% of sleep if can\";\n                var $832 = $850;\n                break;\n            case 'Mons.Skill.dream_eater':\n                var $851 = \"If sleep, hit 6 and heal 4\";\n                var $832 = $851;\n                break;\n            case 'Mons.Skill.moonlight':\n                var $852 = \"Hit 4 + 20% of sleep\";\n                var $832 = $852;\n                break;\n            case 'Mons.Skill.play_rough':\n                var $853 = \"Hit 4 + 20% of critical\";\n                var $832 = $853;\n                break;\n            case 'Mons.Skill.psychic':\n                var $854 = \"Hit 2hp + 10% sleep and hit\";\n                var $832 = $854;\n                break;\n            case 'Mons.Skill.ancient_power':\n                var $855 = \"Hit 4hp + 10% adve miss the attack\";\n                var $832 = $855;\n                break;\n            case 'Mons.Skill.thunder_wave':\n                var $856 = \"Hit 6\";\n                var $832 = $856;\n                break;\n            case 'Mons.Skill.charge':\n                var $857 = \"Hit4, if adve has minimize, hit8\";\n                var $832 = $857;\n                break;\n            case 'Mons.Skill.agility':\n                var $858 = \"Invert Mon\\'s agitity value\";\n                var $832 = $858;\n                break;\n            case 'Mons.Skill.hero_kill':\n                var $859 = \"Herro atk\";\n                var $832 = $859;\n                break;\n            case 'Mons.Skill.nightmare':\n                var $860 = \"If sleep damage hit 20% hp\";\n                var $832 = $860;\n                break;\n        };\n        return $832;\n    };\n    const Mons$Skill$short_description = x0 => Mons$Skill$short_description$(x0);\n\n    function Mons$draw$turn$(_name$1, _skill$2, _scr$3) {\n        var _msg$4 = String$flatten$(List$cons$(_name$1, List$cons$(\" used \", List$cons$(Mons$Skill$get_name$(_skill$2), List$cons$(\".\", List$nil)))));\n        var _scr$5 = Mons$draw$text$(_msg$4, Mons$Char_black$font, Mons$draw$msg_screen$line_0, _scr$3);\n        var _desc$6 = Mons$Skill$short_description$(_skill$2);\n        var $861 = Mons$draw$text$(String$flatten$(List$cons$(_desc$6, List$cons$(\"  [c]\", List$nil))), Mons$Char_black$font, Mons$draw$msg_screen$line_1, _scr$5);\n        return $861;\n    };\n    const Mons$draw$turn = x0 => x1 => x2 => Mons$draw$turn$(x0, x1, x2);\n\n    function Mons$Kind$get_skills$(_kind$1) {\n        var self = Mons$Kind$attr$(_kind$1);\n        switch (self._) {\n            case 'Mons.Attr.new':\n                var $863 = self.skills;\n                var $864 = $863;\n                var $862 = $864;\n                break;\n        };\n        return $862;\n    };\n    const Mons$Kind$get_skills = x0 => Mons$Kind$get_skills$(x0);\n\n    function Mons$Game$get_skills_at$(_idx$1, _obj$2) {\n        var self = _obj$2;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $866 = self.kin;\n                var _skills$14 = Mons$Kind$get_skills$($866);\n                var self = List$at$(_idx$1, _skills$14);\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $868 = self.value;\n                        var $869 = $868;\n                        var $867 = $869;\n                        break;\n                    case 'Maybe.none':\n                        var $870 = Mons$Skill$none;\n                        var $867 = $870;\n                        break;\n                };\n                var $865 = $867;\n                break;\n        };\n        return $865;\n    };\n    const Mons$Game$get_skills_at = x0 => x1 => Mons$Game$get_skills_at$(x0, x1);\n\n    function Mons$draw$battle_skills$(_hero_obj$1, _scr$2) {\n        var _u$3 = Mons$Skill$get_name$(Mons$Game$get_skills_at$(0n, _hero_obj$1));\n        var _i$4 = Mons$Skill$get_name$(Mons$Game$get_skills_at$(1n, _hero_obj$1));\n        var _j$5 = Mons$Skill$get_name$(Mons$Game$get_skills_at$(2n, _hero_obj$1));\n        var _k$6 = Mons$Skill$get_name$(Mons$Game$get_skills_at$(3n, _hero_obj$1));\n        var _scr$7 = Mons$draw$text$(String$flatten$(List$cons$(\"[u] \", List$cons$(_u$3, List$cons$(\"   [i] \", List$cons$(_i$4, List$nil))))), Mons$Char_black$font, Mons$draw$msg_screen$line_0, _scr$2);\n        var $871 = Mons$draw$text$(String$flatten$(List$cons$(\"[j] \", List$cons$(_j$5, List$cons$(\"   [k] \", List$cons$(_k$6, List$nil))))), Mons$Char_black$font, Mons$draw$msg_screen$line_1, _scr$7);\n        return $871;\n    };\n    const Mons$draw$battle_skills = x0 => x1 => Mons$draw$battle_skills$(x0, x1);\n\n    function Mons$draw$get_full_bg$(_idx$1) {\n        var $872 = Pair$snd$(Mons$draw$background$(_idx$1));\n        return $872;\n    };\n    const Mons$draw$get_full_bg = x0 => Mons$draw$get_full_bg$(x0);\n\n    function Mons$draw$capture_bg$(_adve_kind$1, _idx$2, _scr$3) {\n        var _scr$4 = Mons$draw$image$(Mons$draw$get_full_bg$(_idx$2), ((0 | 120 | (80 << 12) | (0 << 24))), _scr$3);\n        var _sct$5 = Mons$draw$image$(Mons$draw$text_screen_bg, ((0 | 120 | (80 << 12) | (0 << 24))), _scr$4);\n        var $873 = _scr$4;\n        return $873;\n    };\n    const Mons$draw$capture_bg = x0 => x1 => x2 => Mons$draw$capture_bg$(x0, x1, x2);\n\n    function Mons$draw$battle_win_bg$(_adve_kind$1, _idx$2, _scr$3) {\n        var _battle_win$4 = Image3D$empty;\n        var _scr$5 = Mons$draw$image$(Mons$draw$get_full_bg$(_idx$2), ((0 | 120 | (80 << 12) | (0 << 24))), _scr$3);\n        var _scr$6 = Mons$draw$image$(_battle_win$4, ((0 | 70 | (90 << 12) | (0 << 24))), _scr$5);\n        var _scr$7 = Mons$draw$image$(Mons$draw$text_screen_bg, ((0 | 120 | (80 << 12) | (0 << 24))), _scr$6);\n        var $874 = _scr$7;\n        return $874;\n    };\n    const Mons$draw$battle_win_bg = x0 => x1 => x2 => Mons$draw$battle_win_bg$(x0, x1, x2);\n\n    function Mons$Kind$is_portal$(_adve_kin$1) {\n        var self = _adve_kin$1;\n        switch (self._) {\n            case 'Mons.Kind.Const':\n                var $876 = self.ele;\n                var self = $876;\n                switch (self._) {\n                    case 'Mons.Kind.const.FOUNTAIN':\n                    case 'Mons.Kind.const.CHEST':\n                    case 'Mons.Kind.const.CRYSTAL':\n                        var $878 = Bool$false;\n                        var $877 = $878;\n                        break;\n                    case 'Mons.Kind.const.PORTAL':\n                        var $879 = Bool$true;\n                        var $877 = $879;\n                        break;\n                };\n                var $875 = $877;\n                break;\n            case 'Mons.Kind.Mons':\n            case 'Mons.Kind.Terrain':\n            case 'Mons.Kind.Interactive':\n                var $880 = Bool$false;\n                var $875 = $880;\n                break;\n        };\n        return $875;\n    };\n    const Mons$Kind$is_portal = x0 => Mons$Kind$is_portal$(x0);\n    const Bool$or = a0 => a1 => (a0 || a1);\n\n    function Mons$Game$defeated_lvl_mons$(_qtd_defeated$1, _dim$2) {\n        var self = (_dim$2 === 0);\n        if (self) {\n            var $882 = Bool$true;\n            var $881 = $882;\n        } else {\n            var self = (_dim$2 === 1);\n            if (self) {\n                var $884 = Bool$true;\n                var $883 = $884;\n            } else {\n                var $885 = Bool$false;\n                var $883 = $885;\n            };\n            var $881 = $883;\n        };\n        return $881;\n    };\n    const Mons$Game$defeated_lvl_mons = x0 => x1 => Mons$Game$defeated_lvl_mons$(x0, x1);\n    const Mons$Assets$void = Image3D$parse$(\"7878021012167978021012167a78021012167b78021012167c78021012167d78021012167e78021012167f78021012168078021012168178021012168278021012168378021012168478021012168578021012168678021012168778021012167879021012167979021012167a79021012167b79021012167c79021012167d79021012167e79021012167f7902101216807902101216817902101216827902101216837902101216847902101216857902101216867902101216877902101216787a02101216797a021012167a7a021012167b7a021012167c7a021012167d7a021012167e7a021012167f7a02101216807a02101216817a02101216827a02101216837a02101216847a02101216857a02101216867a02101216877a02101216787b02101216797b021012167a7b021012167b7b021012167c7b021012167d7b021012167e7b021012167f7b02101216807b02101216817b02101216827b02101216837b02101216847b02101216857b02101216867b02101216877b02101216787c02101216797c021012167a7c021012167b7c021012167c7c021012167d7c021012167e7c021012167f7c02101216807c02101216817c02101216827c02101216837c02101216847c02101216857c02101216867c02101216877c02101216787d02101216797d021012167a7d021012167b7d021012167c7d021012167d7d021012167e7d021012167f7d02101216807d02101216817d02101216827d02101216837d02101216847d02101216857d02101216867d02101216877d02101216787e02101216797e021012167a7e021012167b7e021012167c7e021012167d7e021012167e7e021012167f7e02101216807e02101216817e02101216827e02101216837e02101216847e02101216857e02101216867e02101216877e02101216787f02101216797f021012167a7f021012167b7f021012167c7f021012167d7f021012167e7f021012167f7f02101216807f02101216817f02101216827f02101216837f02101216847f02101216857f02101216867f02101216877f021012167880021012167980021012167a80021012167b80021012167c80021012167d80021012167e80021012167f80021012168080021012168180021012168280021012168380021012168480021012168580021012168680021012168780021012167881021012167981021012167a81021012167b81021012167c81021012167d81021012167e81021012167f81021012168081021012168181021012168281021012168381021012168481021012168581021012168681021012168781021012167882021012167982021012167a82021012167b82021012167c82021012167d82021012167e82021012167f82021012168082021012168182021012168282021012168382021012168482021012168582021012168682021012168782021012167883021012167983021012167a83021012167b83021012167c83021012167d83021012167e83021012167f83021012168083021012168183021012168283021012168383021012168483021012168583021012168683021012168783021012167884021012167984021012167a84021012167b84021012167c84021012167d84021012167e84021012167f84021012168084021012168184021012168284021012168384021012168484021012168584021012168684021012168784021012167885021012167985021012167a85021012167b85021012167c85021012167d85021012167e85021012167f85021012168085021012168185021012168285021012168385021012168485021012168585021012168685021012168785021012167886021012167986021012167a86021012167b86021012167c86021012167d86021012167e86021012167f86021012168086021012168186021012168286021012168386021012168486021012168586021012168686021012168786021012167887021012167987021012167a87021012167b87021012167c87021012167d87021012167e87021012167f8702101216808702101216818702101216828702101216838702101216848702101216858702101216868702101216878702101216\");\n\n    function Mons$Object$qtd_mons_defeated$(_obj$1) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $887 = self.cap;\n                var $888 = (Number((list_length(Pair$snd$($887)))));\n                var $886 = $888;\n                break;\n        };\n        return $886;\n    };\n    const Mons$Object$qtd_mons_defeated = x0 => Mons$Object$qtd_mons_defeated$(x0);\n\n    function Mons$draw$bag_select$(_mon_idx$1, _qtd$2, _scr$3) {\n        var _def_y$4 = 42;\n        var self = (_mon_idx$1 === 0);\n        if (self) {\n            var $890 = ((0 | 160 | (_def_y$4 << 12) | (0 << 24)));\n            var _pos$5 = $890;\n        } else {\n            var $891 = ((0 | 160 | (((_def_y$4 + ((16 * _mon_idx$1) >>> 0)) >>> 0) << 12) | (0 << 24)));\n            var _pos$5 = $891;\n        };\n        var self = (_qtd$2 === 0);\n        if (self) {\n            var $892 = _scr$3;\n            var $889 = $892;\n        } else {\n            var _inventory_row_mon_selected$6 = Image3D$empty;\n            var $893 = Mons$draw$image$(_inventory_row_mon_selected$6, _pos$5, _scr$3);\n            var $889 = $893;\n        };\n        return $889;\n    };\n    const Mons$draw$bag_select = x0 => x1 => x2 => Mons$draw$bag_select$(x0, x1, x2);\n\n    function Mons$draw$bag$(_obj$1, _idx$2, _scr$3) {\n        var _inventory$4 = Mons$Assets$void;\n        var _scr$5 = Mons$draw$image$(_inventory$4, ((0 | 120 | (80 << 12) | (0 << 24))), _scr$3);\n        var _scr$6 = Mons$draw$image$(Mons$draw$get_full_bg$(_idx$2), ((0 | 120 | (80 << 12) | (0 << 24))), _scr$5);\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $895 = self.bag;\n                var $896 = self.mon;\n                var $897 = self.bos;\n                var $898 = self.cap;\n                var _boss_def$18 = U32$to_string$((Number((list_length($897)))));\n                var _qtd$19 = (Number((list_length($895))));\n                var self = (_qtd$19 === 0);\n                if (self) {\n                    var $900 = \"Nothing to show for now\";\n                    var _qtd_field$20 = $900;\n                } else {\n                    var _qtd_mons_game$20 = U32$to_string$(Pair$fst$($898));\n                    var _qtd_defeated$21 = U32$to_string$(Mons$Object$qtd_mons_defeated$(_obj$1));\n                    var $901 = String$flatten$(List$cons$(\"Captured: \", List$cons$(_qtd_defeated$21, List$cons$(\"/\", List$cons$(_qtd_mons_game$20, List$nil)))));\n                    var _qtd_field$20 = $901;\n                };\n                var _scr$21 = Mons$draw$text$(_qtd_field$20, Mons$Char_black$font, ((0 | 95 | (25 << 12) | (0 << 24))), _scr$6);\n                var _scr$22 = Mons$draw$bag_select$($896, _qtd$19, _scr$21);\n                var _scr$23 = Mons$draw$mon_img_selected$($896, _qtd$19, Bool$false, 34, ((0 | 40 | (50 << 12) | (0 << 24))), _scr$22);\n                var _mons_names$24 = List$reverse$(Mons$Object$get_names$($895));\n                var _mons_images$25 = List$reverse$(Mons$Object$get_images$($895));\n                var _scr$26 = Mons$draw$list_image$(_mons_images$25, Bool$false, 34, ((0 | 40 | (50 << 12) | (0 << 24))), _scr$23);\n                var _scr$27 = Mons$draw$list$(_mons_names$24, Bool$false, 14, Mons$Char_black$font, ((0 | 95 | (29 << 12) | (0 << 24))), _scr$26);\n                var $899 = _scr$27;\n                var $894 = $899;\n                break;\n        };\n        return $894;\n    };\n    const Mons$draw$bag = x0 => x1 => x2 => Mons$draw$bag$(x0, x1, x2);\n\n    function Mons$draw$full_bag$(_obj$1, _adve_obj$2, _idx$3, _scr$4) {\n        var _inventory_mon_selection$5 = Image3D$empty;\n        var _inventory_replace$6 = Image3D$empty;\n        var _scr$7 = Mons$draw$image$(Mons$draw$get_full_bg$(_idx$3), ((0 | 120 | (80 << 12) | (0 << 24))), _scr$4);\n        var _scr$8 = Mons$draw$image$(Mons$draw$text_screen_bg, ((0 | 120 | (80 << 12) | (0 << 24))), _scr$7);\n        var _scr$9 = Mons$draw$image$(_inventory_replace$6, ((0 | 65 | (60 << 12) | (0 << 24))), _scr$8);\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $903 = self.bag;\n                var $904 = self.mon;\n                var self = _adve_obj$2;\n                switch (self._) {\n                    case 'Mons.Object.new':\n                        var $906 = self.kin;\n                        var self = Mons$Kind$attr$($906);\n                        switch (self._) {\n                            case 'Mons.Attr.new':\n                                var $908 = self.pic;\n                                var $909 = self.battle_spr;\n                                var _scr$42 = Mons$draw$image$($909(Bool$false), ((0 | 180 | (40 << 12) | (0 << 24))), _scr$9);\n                                var _scr$43 = Mons$draw$image$($908, ((0 | 180 | (90 << 12) | (0 << 24))), _scr$42);\n                                var _scr$44 = Mons$draw$image$(_inventory_mon_selection$5, ((0 | 180 | (90 << 12) | (0 << 24))), _scr$43);\n                                var _qtd$45 = (Number((list_length($903))));\n                                var _mons_images$46 = List$reverse$(Mons$Object$get_images$($903));\n                                var _scr$47 = Mons$draw$list_image$(_mons_images$46, Bool$true, 35, ((0 | 30 | (90 << 12) | (0 << 24))), _scr$44);\n                                var _scr$48 = Mons$draw$mon_img_selected$($904, _qtd$45, Bool$true, 35, ((0 | 30 | (90 << 12) | (0 << 24))), _scr$47);\n                                var _scr$49 = Mons$draw$text$(\"Select a mon to replace or skip\", Mons$Char_black$font, Mons$draw$msg_screen$line_0, _scr$48);\n                                var _scr$50 = Mons$draw$text$(\"[c] Replace  | [z] Skip     \", Mons$Char_black$font, Mons$draw$msg_screen$line_1, _scr$49);\n                                var $910 = _scr$50;\n                                var $907 = $910;\n                                break;\n                        };\n                        var $905 = $907;\n                        break;\n                };\n                var $902 = $905;\n                break;\n        };\n        return $902;\n    };\n    const Mons$draw$full_bag = x0 => x1 => x2 => x3 => Mons$draw$full_bag$(x0, x1, x2, x3);\n\n    function Mons$draw$(_game$1, _scr$2) {\n        var self = _game$1;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $912 = self.map;\n                var $913 = self.stt;\n                var _hero_pos$8 = Mons$Game$get_hero_pos$(_game$1);\n                var _scr$9 = Image3D$clear$(_scr$2);\n                var self = _hero_pos$8;\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $915 = self.value;\n                        var _hero_pair$11 = Mons$Map$get_hero$($915, $912);\n                        var _hero_obj$12 = Pair$fst$(_hero_pair$11);\n                        var _hero_idx$13 = Pair$snd$(_hero_pair$11);\n                        var _adve_obj$14 = Mons$Map$get$($915, ((_hero_idx$13 + 1) >>> 0), $912);\n                        var _dim$15 = Mons$Game$dim$(_game$1);\n                        var self = _hero_obj$12;\n                        switch (self._) {\n                            case 'Mons.Object.new':\n                                var $917 = self.bos;\n                                var $918 = self.cap;\n                                var self = _adve_obj$14;\n                                switch (self._) {\n                                    case 'Mons.Object.new':\n                                        var $920 = self.kin;\n                                        var $921 = self.dmg;\n                                        var $922 = self.eff;\n                                        var _hero_mon_obj$38 = Mons$Object$get_current_mon$(_hero_obj$12);\n                                        var self = _hero_mon_obj$38;\n                                        switch (self._) {\n                                            case 'Mons.Object.new':\n                                                var $924 = self.kin;\n                                                var $925 = self.dmg;\n                                                var $926 = self.eff;\n                                                var self = Mons$Kind$attr$($920);\n                                                switch (self._) {\n                                                    case 'Mons.Attr.new':\n                                                        var $928 = self.mhp;\n                                                        var $929 = self.name;\n                                                        var $930 = self.battle_spr;\n                                                        var _is_standing$60 = Mons$Object$is_standing$(_hero_obj$12);\n                                                        var self = $913;\n                                                        switch (self._) {\n                                                            case 'Mons.Screen.welcome':\n                                                                var $932 = self.idx;\n                                                                var _logo$62 = Mons$Assets$char$boy_d_0;\n                                                                var _scr$63 = Mons$draw$image$(_logo$62, ((0 | 120 | (80 << 12) | (0 << 24))), _scr$9);\n                                                                var _scr$64 = Mons$draw$image$(Mons$f_exe, ((0 | 80 | (80 << 12) | (0 << 24))), _scr$63);\n                                                                var _scr$65 = Mons$draw$list$(List$cons$(\"Play\", List$cons$(\"Credits\", List$nil)), Bool$false, 25, Mons$Char_black$font, ((0 | 40 | (50 << 12) | (0 << 24))), _scr$64);\n                                                                var _scr$66 = Mons$draw$list_selector$($932, Bool$false, 25, Mons$Char_black$font, ((0 | 30 | (50 << 12) | (0 << 24))), _scr$65);\n                                                                var _scr$67 = Mons$draw$text$(\"[c] Select\", Mons$Char_black$font, ((0 | 40 | (128 << 12) | (0 << 24))), _scr$66);\n                                                                var $933 = _scr$67;\n                                                                var $931 = $933;\n                                                                break;\n                                                            case 'Mons.Screen.introduction':\n                                                                var $934 = self.step;\n                                                                var self = (($929 === \"MAGE\") && _is_standing$60);\n                                                                if (self) {\n                                                                    var self = ($934 === 0);\n                                                                    if (self) {\n                                                                        var _game$62 = Mons$Map$build_sprites$(_game$1, _scr$9, $915, _hero_obj$12);\n                                                                        var $937 = Mons$draw$mage_talk$(\"Oh! So you really exist... the\", \"young man of the prophecy. [c]\", _scr$9);\n                                                                        var $936 = $937;\n                                                                    } else {\n                                                                        var self = ($934 === 1);\n                                                                        if (self) {\n                                                                            var _game$62 = Mons$Map$build_sprites$(_game$1, _scr$9, $915, _hero_obj$12);\n                                                                            var $939 = Mons$draw$mage_talk$(\"I\\'m in a hurry and can\\'t explain\", \"now, but... we depend on you. [c]\", _scr$9);\n                                                                            var $938 = $939;\n                                                                        } else {\n                                                                            var self = ($934 === 2);\n                                                                            if (self) {\n                                                                                var _game$62 = Mons$Map$build_sprites$(_game$1, _scr$9, $915, _hero_obj$12);\n                                                                                var $941 = Mons$draw$mage_talk$(\"Great choice! You can press\", \"[e] to check it on the bag. [c]\", _scr$9);\n                                                                                var $940 = $941;\n                                                                            } else {\n                                                                                var $942 = Mons$Map$build_sprites$(_game$1, _scr$9, $915, _hero_obj$12);\n                                                                                var $940 = $942;\n                                                                            };\n                                                                            var $938 = $940;\n                                                                        };\n                                                                        var $936 = $938;\n                                                                    };\n                                                                    var $935 = $936;\n                                                                } else {\n                                                                    var $943 = Mons$Map$build_sprites$(_game$1, _scr$9, $915, _hero_obj$12);\n                                                                    var $935 = $943;\n                                                                };\n                                                                var $931 = $935;\n                                                                break;\n                                                            case 'Mons.Screen.game':\n                                                                var $944 = self.turn;\n                                                                var _hero_mon_attr$63 = Mons$Kind$attr$($924);\n                                                                var self = _hero_mon_attr$63;\n                                                                switch (self._) {\n                                                                    case 'Mons.Attr.new':\n                                                                        var $946 = self.mhp;\n                                                                        var $947 = self.name;\n                                                                        var $948 = self.battle_spr;\n                                                                        var self = $920;\n                                                                        switch (self._) {\n                                                                            case 'Mons.Kind.Mons':\n                                                                                var $950 = self.ele;\n                                                                                var $951 = self.boss;\n                                                                                var _hero_chp$78 = (Math.max($946 - $925, 0));\n                                                                                var _hero_btl_img$79 = $948(Bool$true);\n                                                                                var _hero_txt$80 = String$flatten$(List$cons$($947, List$cons$(\" \", List$cons$(Mons$draw$img_type$($924), List$nil))));\n                                                                                var _hero_hp$81 = String$flatten$(List$cons$(Mons$draw$small_HP, List$cons$(\" \", List$cons$(U32$to_string$(_hero_chp$78), List$cons$(\"/\", List$cons$(U32$to_string$($946), List$nil))))));\n                                                                                var _adve_chp$82 = (Math.max($928 - $921, 0));\n                                                                                var _adve_btl_img$83 = $930(Bool$false);\n                                                                                var _adve_txt$84 = String$flatten$(List$cons$($929, List$cons$(\" \", List$cons$(Mons$draw$img_type$($920), List$nil))));\n                                                                                var _adve_hp$85 = String$flatten$(List$cons$(Mons$draw$small_HP, List$cons$(\" \", List$cons$(U32$to_string$(_adve_chp$82), List$cons$(\"/\", List$cons$(U32$to_string$($928), List$nil))))));\n                                                                                var self = _is_standing$60;\n                                                                                if (self) {\n                                                                                    var self = Mons$Object$is_battling$(_adve_obj$14, _hero_mon_obj$38);\n                                                                                    if (self) {\n                                                                                        var _scr$86 = Mons$draw$battle_bg$($950, $951, _dim$15, _scr$9);\n                                                                                        var _scr$87 = Mons$draw$hero_hp$(_hero_chp$78, $946, _hero_txt$80, _hero_hp$81, _scr$86);\n                                                                                        var _scr$88 = Mons$draw$adve_hp$(_adve_chp$82, $928, _adve_txt$84, _adve_hp$85, _scr$87);\n                                                                                        var _scr$89 = Mons$draw$image$(_hero_btl_img$79, ((0 | 75 | (80 << 12) | (0 << 24))), _scr$88);\n                                                                                        var _scr$90 = Mons$draw$image$(_adve_btl_img$83, ((0 | 180 | (40 << 12) | (0 << 24))), _scr$89);\n                                                                                        var self = $944;\n                                                                                        switch (self._) {\n                                                                                            case 'Mons.Turn.new':\n                                                                                                var $955 = self.hero_skill;\n                                                                                                var $956 = self.adve_skill;\n                                                                                                var _scr$95 = Mons$draw$effects$($926, $922, _scr$90);\n                                                                                                var self = Mons$Turn$is_active$($944);\n                                                                                                if (self) {\n                                                                                                    var self = Mons$Turn$hero_turn$($944);\n                                                                                                    if (self) {\n                                                                                                        var $959 = Mons$draw$turn$($947, $955, _scr$95);\n                                                                                                        var $958 = $959;\n                                                                                                    } else {\n                                                                                                        var $960 = Mons$draw$turn$($929, $956, _scr$95);\n                                                                                                        var $958 = $960;\n                                                                                                    };\n                                                                                                    var $957 = $958;\n                                                                                                } else {\n                                                                                                    var $961 = Mons$draw$battle_skills$(_hero_mon_obj$38, _scr$95);\n                                                                                                    var $957 = $961;\n                                                                                                };\n                                                                                                var $954 = $957;\n                                                                                                break;\n                                                                                        };\n                                                                                        var $953 = $954;\n                                                                                    } else {\n                                                                                        var _scr$86 = Mons$draw$capture_bg$($950, _dim$15, _scr$9);\n                                                                                        var self = Mons$Object$is_obj_defeated$(_adve_obj$14);\n                                                                                        if (self) {\n                                                                                            var self = $951;\n                                                                                            if (self) {\n                                                                                                var _scr$87 = Mons$draw$battle_win_bg$($950, _dim$15, _scr$86);\n                                                                                                var _scr$88 = Mons$draw$text$(\"You unlocked the next level.\", Mons$Char_black$font, Mons$draw$msg_screen$line_0, _scr$87);\n                                                                                                var _scr$89 = Mons$draw$text$(\"[c] I\\'m ready!\", Mons$Char_black$font, Mons$draw$msg_screen$line_1, _scr$88);\n                                                                                                var $964 = Mons$draw$image$(_adve_btl_img$83, ((0 | 180 | (40 << 12) | (0 << 24))), _scr$89);\n                                                                                                var $963 = $964;\n                                                                                            } else {\n                                                                                                var _scr$87 = Mons$draw$battle_win_bg$($950, _dim$15, _scr$86);\n                                                                                                var _scr$88 = Mons$draw$text$(\"[c] Capture\", Mons$Char_black$font, Mons$draw$msg_screen$line_0, _scr$87);\n                                                                                                var _scr$89 = Mons$draw$text$(\"[z] Free\", Mons$Char_black$font, Mons$draw$msg_screen$line_1, _scr$88);\n                                                                                                var $965 = Mons$draw$image$(_adve_btl_img$83, ((0 | 180 | (40 << 12) | (0 << 24))), _scr$89);\n                                                                                                var $963 = $965;\n                                                                                            };\n                                                                                            var _scr$87 = $963;\n                                                                                        } else {\n                                                                                            var self = Mons$Object$is_obj_defeated$(_hero_mon_obj$38);\n                                                                                            if (self) {\n                                                                                                var _scr$87 = Mons$draw$text$(\"You lost the battle and your Mon.\", Mons$Char_black$font, Mons$draw$msg_screen$line_0, _scr$86);\n                                                                                                var _scr$88 = Mons$draw$text$(\"[c] I\\'ll do better next time\", Mons$Char_black$font, Mons$draw$msg_screen$line_1, _scr$87);\n                                                                                                var $967 = Mons$draw$image$(_hero_btl_img$79, ((0 | 75 | (80 << 12) | (0 << 24))), _scr$88);\n                                                                                                var $966 = $967;\n                                                                                            } else {\n                                                                                                var $968 = _scr$86;\n                                                                                                var $966 = $968;\n                                                                                            };\n                                                                                            var _scr$87 = $966;\n                                                                                        };\n                                                                                        var $962 = _scr$87;\n                                                                                        var $953 = $962;\n                                                                                    };\n                                                                                    var $952 = $953;\n                                                                                } else {\n                                                                                    var $969 = Mons$Map$build_sprites$(_game$1, _scr$9, $915, _hero_obj$12);\n                                                                                    var $952 = $969;\n                                                                                };\n                                                                                var $949 = $952;\n                                                                                break;\n                                                                            case 'Mons.Kind.Interactive':\n                                                                                var $970 = self.ele;\n                                                                                var $971 = self.on;\n                                                                                var self = $970;\n                                                                                switch (self._) {\n                                                                                    case 'Mons.Kind.inter.LEVER':\n                                                                                    case 'Mons.Kind.inter.MOVE':\n                                                                                        var $973 = Mons$Map$build_sprites$(_game$1, _scr$9, $915, _hero_obj$12);\n                                                                                        var $972 = $973;\n                                                                                        break;\n                                                                                    case 'Mons.Kind.inter.HEAL':\n                                                                                        var self = $971;\n                                                                                        if (self) {\n                                                                                            var _scr$77 = Mons$Map$build_sprites$(_game$1, _scr$9, $915, _hero_obj$12);\n                                                                                            var _scr$78 = Mons$draw$image$(Mons$draw$text_screen_bg, ((0 | 120 | (80 << 12) | (0 << 24))), _scr$77);\n                                                                                            var $975 = Mons$draw$text$(\"You already used the heal.\", Mons$Char_black$font, Mons$draw$msg_screen$line_0, _scr$78);\n                                                                                            var $974 = $975;\n                                                                                        } else {\n                                                                                            var _scr$77 = Mons$Map$build_sprites$(_game$1, _scr$9, $915, _hero_obj$12);\n                                                                                            var _scr$78 = Mons$draw$image$(Mons$draw$text_screen_bg, ((0 | 120 | (80 << 12) | (0 << 24))), _scr$77);\n                                                                                            var _scr$79 = Mons$draw$text$(\"Press [c] to heal 15HP on all of\", Mons$Char_black$font, Mons$draw$msg_screen$line_0, _scr$78);\n                                                                                            var $976 = Mons$draw$text$(\"your Mons\", Mons$Char_black$font, Mons$draw$msg_screen$line_1, _scr$79);\n                                                                                            var $974 = $976;\n                                                                                        };\n                                                                                        var $972 = $974;\n                                                                                        break;\n                                                                                };\n                                                                                var $949 = $972;\n                                                                                break;\n                                                                            case 'Mons.Kind.Const':\n                                                                                var self = (_is_standing$60 && Mons$Kind$is_portal$($920));\n                                                                                if (self) {\n                                                                                    var _game$75 = Mons$Map$build_sprites$(_game$1, _scr$9, $915, _hero_obj$12);\n                                                                                    var self = (Mons$Game$defeated_lvl_mons$(Pair$fst$($918), _dim$15) || ((Number((list_length($917)))) === ((_dim$15 / 2) >>> 0)));\n                                                                                    if (self) {\n                                                                                        var _scr$76 = Mons$draw$image$(Mons$draw$text_screen_bg, ((0 | 120 | (80 << 12) | (0 << 24))), _scr$9);\n                                                                                        var $979 = Mons$draw$text$(\"Press [c] to access next level\", Mons$Char_black$font, ((0 | 30 | (135 << 12) | (0 << 24))), _scr$76);\n                                                                                        var $978 = $979;\n                                                                                    } else {\n                                                                                        var _scr$76 = Mons$draw$image$(Mons$draw$text_screen_bg, ((0 | 120 | (80 << 12) | (0 << 24))), _scr$9);\n                                                                                        var _scr$77 = Mons$draw$text$(\"To access the next level you must\", Mons$Char_black$font, Mons$draw$msg_screen$line_0, _scr$76);\n                                                                                        var $980 = Mons$draw$text$(\"first defeat all enemies.\", Mons$Char_black$font, Mons$draw$msg_screen$line_1, _scr$77);\n                                                                                        var $978 = $980;\n                                                                                    };\n                                                                                    var $977 = $978;\n                                                                                } else {\n                                                                                    var $981 = Mons$Map$build_sprites$(_game$1, _scr$9, $915, _hero_obj$12);\n                                                                                    var $977 = $981;\n                                                                                };\n                                                                                var $949 = $977;\n                                                                                break;\n                                                                            case 'Mons.Kind.Terrain':\n                                                                                var $982 = Mons$Map$build_sprites$(_game$1, _scr$9, $915, _hero_obj$12);\n                                                                                var $949 = $982;\n                                                                                break;\n                                                                        };\n                                                                        var $945 = $949;\n                                                                        break;\n                                                                };\n                                                                var $931 = $945;\n                                                                break;\n                                                            case 'Mons.Screen.capture_mon':\n                                                                var $983 = self.full_bag;\n                                                                var self = $983;\n                                                                if (self) {\n                                                                    var $985 = Mons$draw$full_bag$(_hero_obj$12, _adve_obj$14, _dim$15, _scr$9);\n                                                                    var $984 = $985;\n                                                                } else {\n                                                                    var $986 = Mons$Map$build_sprites$(_game$1, _scr$9, $915, _hero_obj$12);\n                                                                    var $984 = $986;\n                                                                };\n                                                                var $931 = $984;\n                                                                break;\n                                                            case 'Mons.Screen.credits':\n                                                                var _battle_normal_bg_full$61 = Image3D$empty;\n                                                                var _scr$62 = Mons$draw$image$(_battle_normal_bg_full$61, ((0 | 120 | (80 << 12) | (0 << 24))), _scr$9);\n                                                                var _artists0$63 = List$cons$(\"Alexandre Avila\", List$cons$(\"Caio Carvalho\", List$cons$(\"Johnny Azevedo\", List$cons$(\"Lucca Tuelher\", List$cons$(\"Maisa Milena\", List$cons$(\"Marcio Maia\", List$cons$(\"Marcos Medeiros\", List$nil)))))));\n                                                                var _artists1$64 = List$cons$(\"Marcos Motta\", List$cons$(\"Nathan Danjo\", List$cons$(\"Paulo Reis\", List$cons$(\"Pedro Taka\", List$cons$(\"Rodrigo Rodrigues\", List$cons$(\"Victor Maia\", List$cons$(\"Yuri Carvalho\", List$nil)))))));\n                                                                var _scr$65 = Mons$draw$text$(\"[z] Back\", Mons$Char_white$font, ((0 | 20 | (15 << 12) | (0 << 24))), _scr$62);\n                                                                var _scr$66 = Mons$draw$list$(_artists0$63, Bool$false, 15, Mons$Char_white$font, ((0 | 20 | (20 << 12) | (0 << 24))), _scr$65);\n                                                                var _scr$67 = Mons$draw$list$(_artists1$64, Bool$false, 15, Mons$Char_white$font, ((0 | 125 | (20 << 12) | (0 << 24))), _scr$66);\n                                                                var $987 = _scr$67;\n                                                                var $931 = $987;\n                                                                break;\n                                                            case 'Mons.Screen.intro_select':\n                                                                var _game$62 = Mons$Map$build_sprites$(_game$1, _scr$9, $915, _hero_obj$12);\n                                                                var $988 = Mons$draw$initial_mons$(_hero_obj$12, _scr$9);\n                                                                var $931 = $988;\n                                                                break;\n                                                            case 'Mons.Screen.inventory':\n                                                                var $989 = Mons$draw$bag$(_hero_obj$12, _dim$15, _scr$9);\n                                                                var $931 = $989;\n                                                                break;\n                                                            case 'Mons.Screen.game_over':\n                                                                var $990 = Mons$draw$text$(\"GAME OVER\", Mons$Char_white$font, ((0 | 90 | (80 << 12) | (0 << 24))), _scr$9);\n                                                                var $931 = $990;\n                                                                break;\n                                                        };\n                                                        var $927 = $931;\n                                                        break;\n                                                };\n                                                var $923 = $927;\n                                                break;\n                                        };\n                                        var $919 = $923;\n                                        break;\n                                };\n                                var $916 = $919;\n                                break;\n                        };\n                        var $914 = $916;\n                        break;\n                    case 'Maybe.none':\n                        var $991 = _scr$9;\n                        var $914 = $991;\n                        break;\n                };\n                var $911 = $914;\n                break;\n        };\n        return $911;\n    };\n    const Mons$draw = x0 => x1 => Mons$draw$(x0, x1);\n\n    function App$Action$(_S$1) {\n        var $992 = null;\n        return $992;\n    };\n    const App$Action = x0 => App$Action$(x0);\n\n    function App$Action$print$(_text$2) {\n        var $993 = ({\n            _: 'App.Action.print',\n            'text': _text$2\n        });\n        return $993;\n    };\n    const App$Action$print = x0 => App$Action$print$(x0);\n\n    function App$Action$resize$(_width$2, _height$3) {\n        var $994 = ({\n            _: 'App.Action.resize',\n            'width': _width$2,\n            'height': _height$3\n        });\n        return $994;\n    };\n    const App$Action$resize = x0 => x1 => App$Action$resize$(x0, x1);\n    const Mons$scr_w = ((((Mons$scr_mid & 0xFFF)) * 2) >>> 0);\n    const Mons$scr_h = (((((Mons$scr_mid >>> 12) & 0xFFF)) * 2) >>> 0);\n\n    function App$Action$state$(_value$2) {\n        var $995 = ({\n            _: 'App.Action.state',\n            'value': _value$2\n        });\n        return $995;\n    };\n    const App$Action$state = x0 => App$Action$state$(x0);\n\n    function Mons$Game$set_usr$(_usr$1, _game$2) {\n        var self = _game$2;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $997 = self.pos;\n                var $998 = self.map;\n                var $999 = self.stt;\n                var $1000 = self.tik;\n                var $1001 = Mons$Game$new$(_usr$1, $997, $998, $999, $1000);\n                var $996 = $1001;\n                break;\n        };\n        return $996;\n    };\n    const Mons$Game$set_usr = x0 => x1 => Mons$Game$set_usr$(x0, x1);\n\n    function App$Action$watch$(_room$2) {\n        var $1002 = ({\n            _: 'App.Action.watch',\n            'room': _room$2\n        });\n        return $1002;\n    };\n    const App$Action$watch = x0 => App$Action$watch$(x0);\n\n    function Word$from_bits$(_size$1, _bits$2) {\n        var self = _size$1;\n        if (self === 0n) {\n            var $1004 = Word$e;\n            var $1003 = $1004;\n        } else {\n            var $1005 = (self - 1n);\n            var self = _bits$2;\n            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                case 'o':\n                    var $1007 = self.slice(0, -1);\n                    var $1008 = Word$o$(Word$from_bits$($1005, $1007));\n                    var $1006 = $1008;\n                    break;\n                case 'i':\n                    var $1009 = self.slice(0, -1);\n                    var $1010 = Word$i$(Word$from_bits$($1005, $1009));\n                    var $1006 = $1010;\n                    break;\n                case 'e':\n                    var $1011 = Word$o$(Word$from_bits$($1005, Bits$e));\n                    var $1006 = $1011;\n                    break;\n            };\n            var $1003 = $1006;\n        };\n        return $1003;\n    };\n    const Word$from_bits = x0 => x1 => Word$from_bits$(x0, x1);\n    const Bits$concat = a0 => a1 => (a1 + a0);\n\n    function String$to_bits$(_str$1) {\n        var self = _str$1;\n        if (self.length === 0) {\n            var $1013 = Bits$e;\n            var $1012 = $1013;\n        } else {\n            var $1014 = self.charCodeAt(0);\n            var $1015 = self.slice(1);\n            var $1016 = (String$to_bits$($1015) + (u16_to_bits($1014)));\n            var $1012 = $1016;\n        };\n        return $1012;\n    };\n    const String$to_bits = x0 => String$to_bits$(x0);\n    const Mons$App$room = Word$from_bits$(48n, String$to_bits$(\"MON\"));\n\n    function Cmp$as_gte$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n                var $1018 = Bool$false;\n                var $1017 = $1018;\n                break;\n            case 'Cmp.eql':\n            case 'Cmp.gtn':\n                var $1019 = Bool$true;\n                var $1017 = $1019;\n                break;\n        };\n        return $1017;\n    };\n    const Cmp$as_gte = x0 => Cmp$as_gte$(x0);\n\n    function Word$gte$(_a$2, _b$3) {\n        var $1020 = Cmp$as_gte$(Word$cmp$(_a$2, _b$3));\n        return $1020;\n    };\n    const Word$gte = x0 => x1 => Word$gte$(x0, x1);\n    const U16$gte = a0 => a1 => (a0 >= a1);\n    const U16$lte = a0 => a1 => (a0 <= a1);\n    const U16$sub = a0 => a1 => (Math.max(a0 - a1, 0));\n\n    function Char$to_upper$(_char$1) {\n        var self = ((_char$1 >= 97) && (_char$1 <= 122));\n        if (self) {\n            var $1022 = (Math.max(_char$1 - 32, 0));\n            var $1021 = $1022;\n        } else {\n            var $1023 = _char$1;\n            var $1021 = $1023;\n        };\n        return $1021;\n    };\n    const Char$to_upper = x0 => Char$to_upper$(x0);\n    const U16$add = a0 => a1 => ((a0 + a1) & 0xFFFF);\n\n    function Char$to_lower$(_char$1) {\n        var self = ((_char$1 >= 65) && (_char$1 <= 90));\n        if (self) {\n            var $1025 = ((_char$1 + 32) & 0xFFFF);\n            var $1024 = $1025;\n        } else {\n            var $1026 = _char$1;\n            var $1024 = $1026;\n        };\n        return $1024;\n    };\n    const Char$to_lower = x0 => Char$to_lower$(x0);\n\n    function Mons$Input$char$(_down$1, _code$2) {\n        var self = _down$1;\n        if (self) {\n            var $1028 = Char$to_upper$(_code$2);\n            var $1027 = $1028;\n        } else {\n            var $1029 = Char$to_lower$(_code$2);\n            var $1027 = $1029;\n        };\n        return $1027;\n    };\n    const Mons$Input$char = x0 => x1 => Mons$Input$char$(x0, x1);\n    const Mons$Input$list = (() => {\n        var _b0$1 = Bits$o;\n        var _b1$2 = Bits$i;\n        var _bn$3 = Bits$e;\n        var $1030 = List$cons$(Pair$new$(68, _b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_bn$3))))))))), List$cons$(Pair$new$(87, _b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_bn$3))))))))), List$cons$(Pair$new$(65, _b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_b0$1(_bn$3))))))))), List$cons$(Pair$new$(83, _b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_b1$2(_bn$3))))))))), List$cons$(Pair$new$(85, _b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_b0$1(_b0$1(_bn$3))))))))), List$cons$(Pair$new$(73, _b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_b0$1(_b1$2(_bn$3))))))))), List$cons$(Pair$new$(74, _b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_b1$2(_b0$1(_bn$3))))))))), List$cons$(Pair$new$(75, _b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_b1$2(_b1$2(_bn$3))))))))), List$cons$(Pair$new$(100, _b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_b0$1(_b0$1(_b0$1(_bn$3))))))))), List$cons$(Pair$new$(119, _b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_b0$1(_b0$1(_b1$2(_bn$3))))))))), List$cons$(Pair$new$(97, _b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_b0$1(_b1$2(_b0$1(_bn$3))))))))), List$cons$(Pair$new$(115, _b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_b0$1(_b1$2(_b1$2(_bn$3))))))))), List$cons$(Pair$new$(117, _b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_b1$2(_b0$1(_b0$1(_bn$3))))))))), List$cons$(Pair$new$(105, _b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_b1$2(_b0$1(_b1$2(_bn$3))))))))), List$cons$(Pair$new$(106, _b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_b1$2(_b1$2(_b0$1(_bn$3))))))))), List$cons$(Pair$new$(107, _b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_b1$2(_b1$2(_b1$2(_bn$3))))))))), List$cons$(Pair$new$(101, _b0$1(_b0$1(_b0$1(_b1$2(_b0$1(_b0$1(_b0$1(_b0$1(_bn$3))))))))), List$cons$(Pair$new$(69, _b0$1(_b0$1(_b0$1(_b1$2(_b0$1(_b0$1(_b0$1(_b1$2(_bn$3))))))))), List$cons$(Pair$new$(99, _b0$1(_b0$1(_b0$1(_b1$2(_b0$1(_b0$1(_b1$2(_b1$2(_bn$3))))))))), List$cons$(Pair$new$(67, _b0$1(_b0$1(_b0$1(_b1$2(_b0$1(_b1$2(_b1$2(_b1$2(_bn$3))))))))), List$cons$(Pair$new$(122, _b0$1(_b0$1(_b0$1(_b1$2(_b1$2(_b1$2(_b1$2(_b1$2(_bn$3))))))))), List$cons$(Pair$new$(90, _b0$1(_b0$1(_b1$2(_b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_bn$3))))))))), List$cons$(Pair$new$(82, _b0$1(_b0$1(_b1$2(_b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_bn$3))))))))), List$cons$(Pair$new$(114, _b0$1(_b0$1(_b0$1(_b1$2(_b1$2(_b1$2(_b1$2(_b1$2(_bn$3))))))))), List$nil))))))))))))))))))))))));\n        return $1030;\n    })();\n    const Mons$Input$char_to_code_map = (() => {\n        var _map$1 = Map$new;\n        var _map$2 = (() => {\n            var $1033 = _map$1;\n            var $1034 = Mons$Input$list;\n            let _map$3 = $1033;\n            let _char_code$2;\n            while ($1034._ === 'List.cons') {\n                _char_code$2 = $1034.head;\n                var self = _char_code$2;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $1035 = self.fst;\n                        var $1036 = self.snd;\n                        var $1037 = Map$set$((u16_to_bits($1035)), $1036, _map$3);\n                        var $1033 = $1037;\n                        break;\n                };\n                _map$3 = $1033;\n                $1034 = $1034.tail;\n            }\n            return _map$3;\n        })();\n        var $1031 = _map$2;\n        return $1031;\n    })();\n\n    function Mons$Input$serialize$(_char$1) {\n        var self = Map$get$((u16_to_bits(_char$1)), Mons$Input$char_to_code_map);\n        switch (self._) {\n            case 'Maybe.some':\n                var $1039 = self.value;\n                var $1040 = Maybe$some$(Word$from_bits$(256n, $1039));\n                var $1038 = $1040;\n                break;\n            case 'Maybe.none':\n                var $1041 = Maybe$none;\n                var $1038 = $1041;\n                break;\n        };\n        return $1038;\n    };\n    const Mons$Input$serialize = x0 => Mons$Input$serialize$(x0);\n\n    function App$Action$post$(_room$2, _data$3) {\n        var $1042 = ({\n            _: 'App.Action.post',\n            'room': _room$2,\n            'data': _data$3\n        });\n        return $1042;\n    };\n    const App$Action$post = x0 => x1 => App$Action$post$(x0, x1);\n\n    function Mons$Object$set_ani$(_obj$1, _ani$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1044 = self.kin;\n                var $1045 = self.dir;\n                var $1046 = self.pad;\n                var $1047 = self.dmg;\n                var $1048 = self.bag;\n                var $1049 = self.mon;\n                var $1050 = self.bos;\n                var $1051 = self.cap;\n                var $1052 = self.idl;\n                var $1053 = self.eff;\n                var $1054 = Mons$Object$new$($1044, $1045, $1046, _ani$2, $1047, $1048, $1049, $1050, $1051, $1052, $1053);\n                var $1043 = $1054;\n                break;\n        };\n        return $1043;\n    };\n    const Mons$Object$set_ani = x0 => x1 => Mons$Object$set_ani$(x0, x1);\n\n    function Mons$Object$set_dir$(_obj$1, _dir$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1056 = self.kin;\n                var $1057 = self.pad;\n                var $1058 = self.ani;\n                var $1059 = self.dmg;\n                var $1060 = self.bag;\n                var $1061 = self.mon;\n                var $1062 = self.bos;\n                var $1063 = self.cap;\n                var $1064 = self.idl;\n                var $1065 = self.eff;\n                var $1066 = Mons$Object$new$($1056, _dir$2, $1057, $1058, $1059, $1060, $1061, $1062, $1063, $1064, $1065);\n                var $1055 = $1066;\n                break;\n        };\n        return $1055;\n    };\n    const Mons$Object$set_dir = x0 => x1 => Mons$Object$set_dir$(x0, x1);\n\n    function Mons$Object$is_free_to_move$(_obj$1) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1068 = self.ani;\n                var $1069 = ($1068 === 0);\n                var $1067 = $1069;\n                break;\n        };\n        return $1067;\n    };\n    const Mons$Object$is_free_to_move = x0 => Mons$Object$is_free_to_move$(x0);\n    const Mons$Dir$up = ({\n        _: 'Mons.Dir.up'\n    });\n    const Mons$Dir$left = ({\n        _: 'Mons.Dir.left'\n    });\n    const Mons$Dir$right = ({\n        _: 'Mons.Dir.right'\n    });\n\n    function Mons$Object$tick$(_obj$1) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1071 = self.dir;\n                var $1072 = self.pad;\n                var $1073 = self.ani;\n                var _obj$13 = Mons$Object$set_ani$(_obj$1, (() => {\n                    var self = ($1073 > 0);\n                    if (self) {\n                        var $1075 = (Math.max($1073 - 2, 0));\n                        return $1075;\n                    } else {\n                        var $1076 = $1073;\n                        return $1076;\n                    };\n                })());\n                var _obj$14 = Mons$Object$set_dir$(_obj$13, (() => {\n                    var self = Mons$Object$is_free_to_move$(_obj$13);\n                    if (self) {\n                        var self = $1072;\n                        switch (self._) {\n                            case 'Mons.Pad.new':\n                                var $1078 = self.r;\n                                var $1079 = self.u;\n                                var $1080 = self.l;\n                                var $1081 = self.d;\n                                var self = $1079;\n                                if (self) {\n                                    var $1083 = Mons$Dir$up;\n                                    var $1082 = $1083;\n                                } else {\n                                    var self = $1080;\n                                    if (self) {\n                                        var $1085 = Mons$Dir$left;\n                                        var $1084 = $1085;\n                                    } else {\n                                        var self = $1081;\n                                        if (self) {\n                                            var $1087 = Mons$Dir$down;\n                                            var $1086 = $1087;\n                                        } else {\n                                            var self = $1078;\n                                            if (self) {\n                                                var $1089 = Mons$Dir$right;\n                                                var $1088 = $1089;\n                                            } else {\n                                                var $1090 = $1071;\n                                                var $1088 = $1090;\n                                            };\n                                            var $1086 = $1088;\n                                        };\n                                        var $1084 = $1086;\n                                    };\n                                    var $1082 = $1084;\n                                };\n                                var $1077 = $1082;\n                                break;\n                        };\n                        return $1077;\n                    } else {\n                        var $1091 = $1071;\n                        return $1091;\n                    };\n                })());\n                var $1074 = _obj$14;\n                var $1070 = $1074;\n                break;\n        };\n        return $1070;\n    };\n    const Mons$Object$tick = x0 => Mons$Object$tick$(x0);\n\n    function Mons$Dir$move$(_dir$1, _pos$2) {\n        var self = _dir$1;\n        switch (self._) {\n            case 'Mons.Dir.right':\n                var $1093 = Pos32$add$(_pos$2, ((0 | 1 | (0 << 12) | (0 << 24))));\n                var $1092 = $1093;\n                break;\n            case 'Mons.Dir.up':\n                var $1094 = Pos32$sub$(_pos$2, ((0 | 0 | (1 << 12) | (0 << 24))));\n                var $1092 = $1094;\n                break;\n            case 'Mons.Dir.left':\n                var $1095 = Pos32$sub$(_pos$2, ((0 | 1 | (0 << 12) | (0 << 24))));\n                var $1092 = $1095;\n                break;\n            case 'Mons.Dir.down':\n                var $1096 = Pos32$add$(_pos$2, ((0 | 0 | (1 << 12) | (0 << 24))));\n                var $1092 = $1096;\n                break;\n        };\n        return $1092;\n    };\n    const Mons$Dir$move = x0 => x1 => Mons$Dir$move$(x0, x1);\n\n    function Mons$Map$pop$(_pos$1, _map$2) {\n        var _objs$3 = Mons$Map$get_list$(_pos$1, _map$2);\n        var self = _objs$3;\n        switch (self._) {\n            case 'List.cons':\n                var $1098 = self.head;\n                var $1099 = self.tail;\n                var _map$6 = Mons$Map$set_list$(_pos$1, $1099, _map$2);\n                var $1100 = Pair$new$(_map$6, $1098);\n                var $1097 = $1100;\n                break;\n            case 'List.nil':\n                var $1101 = Pair$new$(_map$2, Mons$Object$void);\n                var $1097 = $1101;\n                break;\n        };\n        return $1097;\n    };\n    const Mons$Map$pop = x0 => x1 => Mons$Map$pop$(x0, x1);\n\n    function Mons$Map$get_top$(_pos$1, _map$2) {\n        var $1102 = Pair$snd$(Mons$Map$pop$(_pos$1, _map$2));\n        return $1102;\n    };\n    const Mons$Map$get_top = x0 => x1 => Mons$Map$get_top$(x0, x1);\n\n    function Mons$Object$is_walking$(_obj$1) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1104 = self.pad;\n                var self = $1104;\n                switch (self._) {\n                    case 'Mons.Pad.new':\n                        var $1106 = self.r;\n                        var $1107 = self.u;\n                        var $1108 = self.l;\n                        var $1109 = self.d;\n                        var _is_walking_x$17 = ($1107 || $1109);\n                        var _is_walking_y$18 = ($1108 || $1106);\n                        var $1110 = (_is_walking_x$17 || _is_walking_y$18);\n                        var $1105 = $1110;\n                        break;\n                };\n                var $1103 = $1105;\n                break;\n        };\n        return $1103;\n    };\n    const Mons$Object$is_walking = x0 => Mons$Object$is_walking$(x0);\n\n    function Mons$Kind$get_blocks$(_kind$1) {\n        var self = Mons$Kind$attr$(_kind$1);\n        switch (self._) {\n            case 'Mons.Attr.new':\n                var $1112 = self.blocks;\n                var $1113 = $1112;\n                var $1111 = $1113;\n                break;\n        };\n        return $1111;\n    };\n    const Mons$Kind$get_blocks = x0 => Mons$Kind$get_blocks$(x0);\n\n    function Mons$Game$move_obj$(_from$1, _idx$2, _to$3, _obj$4, _game$5) {\n        var _game$6 = Mons$Game$map_del$(_from$1, _idx$2, _game$5);\n        var _game$7 = Mons$Game$map_push$(_to$3, _obj$4, _game$6);\n        var $1114 = _game$7;\n        return $1114;\n    };\n    const Mons$Game$move_obj = x0 => x1 => x2 => x3 => x4 => Mons$Game$move_obj$(x0, x1, x2, x3, x4);\n\n    function Mons$Game$set_user_pos$(_user$1, _pos$2, _game$3) {\n        var self = _game$3;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $1116 = self.usr;\n                var $1117 = self.pos;\n                var $1118 = self.map;\n                var $1119 = self.stt;\n                var $1120 = self.tik;\n                var $1121 = Mons$Game$new$($1116, Map$set$(Word$to_bits$(_user$1), _pos$2, $1117), $1118, $1119, $1120);\n                var $1115 = $1121;\n                break;\n        };\n        return $1115;\n    };\n    const Mons$Game$set_user_pos = x0 => x1 => x2 => Mons$Game$set_user_pos$(x0, x1, x2);\n\n    function Mons$Game$tick_user$(_user$1, _pos$2, _game$3) {\n        var self = _game$3;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $1123 = self.map;\n                var _map$9 = $1123;\n                var _obj_idx$10 = Mons$Map$get_hero$(_pos$2, _map$9);\n                var _obj$11 = Pair$fst$(_obj_idx$10);\n                var _idx$12 = Pair$snd$(_obj_idx$10);\n                var _obj$13 = Mons$Object$tick$(_obj$11);\n                var self = _obj$13;\n                switch (self._) {\n                    case 'Mons.Object.new':\n                        var $1125 = self.dir;\n                        var _old_pos$25 = _pos$2;\n                        var _new_pos$26 = Mons$Dir$move$($1125, _pos$2);\n                        var _trg$27 = Mons$Map$get_top$(_new_pos$26, _map$9);\n                        var self = _trg$27;\n                        switch (self._) {\n                            case 'Mons.Object.new':\n                                var $1127 = self.kin;\n                                var _is_walking$39 = Mons$Object$is_walking$(_obj$13);\n                                var _is_movfree$40 = Mons$Object$is_free_to_move$(_obj$13);\n                                var _is_blocked$41 = Mons$Kind$get_blocks$($1127);\n                                var self = (_is_walking$39 && (_is_movfree$40 && (!_is_blocked$41)));\n                                if (self) {\n                                    var _obj$42 = Mons$Object$set_ani$(_obj$13, 16);\n                                    var _game$43 = Mons$Game$move_obj$(_old_pos$25, _idx$12, _new_pos$26, _obj$42, _game$3);\n                                    var _game$44 = Mons$Game$set_user_pos$(_user$1, _new_pos$26, _game$43);\n                                    var $1129 = _game$44;\n                                    var $1128 = $1129;\n                                } else {\n                                    var $1130 = Mons$Game$map_set$(_pos$2, _idx$12, _obj$13, _game$3);\n                                    var $1128 = $1130;\n                                };\n                                var $1126 = $1128;\n                                break;\n                        };\n                        var $1124 = $1126;\n                        break;\n                };\n                var $1122 = $1124;\n                break;\n        };\n        return $1122;\n    };\n    const Mons$Game$tick_user = x0 => x1 => x2 => Mons$Game$tick_user$(x0, x1, x2);\n\n    function Mons$Game$set_tik$(_tik$1, _game$2) {\n        var self = _game$2;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $1132 = self.usr;\n                var $1133 = self.pos;\n                var $1134 = self.map;\n                var $1135 = self.stt;\n                var $1136 = Mons$Game$new$($1132, $1133, $1134, $1135, _tik$1);\n                var $1131 = $1136;\n                break;\n        };\n        return $1131;\n    };\n    const Mons$Game$set_tik = x0 => x1 => Mons$Game$set_tik$(x0, x1);\n\n    function Mons$Game$tick_game$(_game$1) {\n        var self = _game$1;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $1138 = self.tik;\n                var $1139 = Mons$Game$set_tik$((($1138 + 1) >>> 0), _game$1);\n                var $1137 = $1139;\n                break;\n        };\n        return $1137;\n    };\n    const Mons$Game$tick_game = x0 => Mons$Game$tick_game$(x0);\n\n    function Mons$Game$tick$(_game$1, _time$2) {\n        var self = _game$1;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $1141 = self.usr;\n                var self = Mons$Game$get_user_pos$($1141, _game$1);\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $1143 = self.value;\n                        var $1144 = $1143;\n                        var _pos$8 = $1144;\n                        break;\n                    case 'Maybe.none':\n                        var $1145 = Mons$scr_mid;\n                        var _pos$8 = $1145;\n                        break;\n                };\n                var _game$9 = Mons$Game$tick_user$($1141, _pos$8, _game$1);\n                var _game$10 = Mons$Game$tick_game$(_game$9);\n                var $1142 = _game$10;\n                var $1140 = $1142;\n                break;\n        };\n        return $1140;\n    };\n    const Mons$Game$tick = x0 => x1 => Mons$Game$tick$(x0, x1);\n\n    function Bits$slice$(_len$1, _bits$2) {\n        var self = _len$1;\n        if (self === 0n) {\n            var $1147 = Bits$e;\n            var $1146 = $1147;\n        } else {\n            var $1148 = (self - 1n);\n            var self = _bits$2;\n            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                case 'o':\n                    var $1150 = self.slice(0, -1);\n                    var $1151 = (Bits$slice$($1148, $1150) + '0');\n                    var $1149 = $1151;\n                    break;\n                case 'i':\n                    var $1152 = self.slice(0, -1);\n                    var $1153 = (Bits$slice$($1148, $1152) + '1');\n                    var $1149 = $1153;\n                    break;\n                case 'e':\n                    var $1154 = Bits$e;\n                    var $1149 = $1154;\n                    break;\n            };\n            var $1146 = $1149;\n        };\n        return $1146;\n    };\n    const Bits$slice = x0 => x1 => Bits$slice$(x0, x1);\n    const Mons$Input$code_to_char_map = (() => {\n        var _map$1 = Map$new;\n        var _map$2 = (() => {\n            var $1157 = _map$1;\n            var $1158 = Mons$Input$list;\n            let _map$3 = $1157;\n            let _char_code$2;\n            while ($1158._ === 'List.cons') {\n                _char_code$2 = $1158.head;\n                var self = _char_code$2;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $1159 = self.fst;\n                        var $1160 = self.snd;\n                        var $1161 = Map$set$($1160, $1159, _map$3);\n                        var $1157 = $1161;\n                        break;\n                };\n                _map$3 = $1157;\n                $1158 = $1158.tail;\n            }\n            return _map$3;\n        })();\n        var $1155 = _map$2;\n        return $1155;\n    })();\n\n    function Mons$Input$deserialize$(_code$1) {\n        var $1162 = Map$get$(Bits$slice$(8n, Word$to_bits$(_code$1)), Mons$Input$code_to_char_map);\n        return $1162;\n    };\n    const Mons$Input$deserialize = x0 => Mons$Input$deserialize$(x0);\n\n    function Mons$Game$set_stt$(_stt$1, _game$2) {\n        var self = _game$2;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $1164 = self.usr;\n                var $1165 = self.pos;\n                var $1166 = self.map;\n                var $1167 = self.tik;\n                var $1168 = Mons$Game$new$($1164, $1165, $1166, _stt$1, $1167);\n                var $1163 = $1168;\n                break;\n        };\n        return $1163;\n    };\n    const Mons$Game$set_stt = x0 => x1 => Mons$Game$set_stt$(x0, x1);\n    const Mons$Kind$mons$HERO = ({\n        _: 'Mons.Kind.mons.HERO'\n    });\n    const Mons$Type$fire = ({\n        _: 'Mons.Type.fire'\n    });\n    const Mons$Object$hero = Mons$Object$new_of_kind$(Mons$Kind$Mons$(Mons$Kind$mons$HERO, Bool$false, Mons$Type$fire, 1));\n\n    function Mons$Object$ended_battle$(_adve$1, _hero$2) {\n        var self = _adve$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1170 = self.kin;\n                var self = _hero$2;\n                switch (self._) {\n                    case 'Mons.Object.new':\n                        var $1172 = self.kin;\n                        var self = $1170;\n                        switch (self._) {\n                            case 'Mons.Kind.Mons':\n                                var _adve_kin$29 = Mons$Kind$attr$($1170);\n                                var _hero_kin$30 = Mons$Kind$attr$($1172);\n                                var self = _adve_kin$29;\n                                switch (self._) {\n                                    case 'Mons.Attr.new':\n                                        var self = _hero_kin$30;\n                                        switch (self._) {\n                                            case 'Mons.Attr.new':\n                                                var _adve_status$51 = Mons$Object$is_obj_defeated$(_adve$1);\n                                                var _hero_status$52 = Mons$Object$is_obj_defeated$(_hero$2);\n                                                var $1176 = (_adve_status$51 || _hero_status$52);\n                                                var $1175 = $1176;\n                                                break;\n                                        };\n                                        var $1174 = $1175;\n                                        break;\n                                };\n                                var $1173 = $1174;\n                                break;\n                            case 'Mons.Kind.Const':\n                            case 'Mons.Kind.Terrain':\n                            case 'Mons.Kind.Interactive':\n                                var $1177 = Bool$false;\n                                var $1173 = $1177;\n                                break;\n                        };\n                        var $1171 = $1173;\n                        break;\n                };\n                var $1169 = $1171;\n                break;\n        };\n        return $1169;\n    };\n    const Mons$Object$ended_battle = x0 => x1 => Mons$Object$ended_battle$(x0, x1);\n\n    function Mons$Screen$introduction$(_step$1) {\n        var $1178 = ({\n            _: 'Mons.Screen.introduction',\n            'step': _step$1\n        });\n        return $1178;\n    };\n    const Mons$Screen$introduction = x0 => Mons$Screen$introduction$(x0);\n    const Mons$Screen$credits = ({\n        _: 'Mons.Screen.credits'\n    });\n\n    function Mons$Screen$welcome$(_idx$1) {\n        var $1179 = ({\n            _: 'Mons.Screen.welcome',\n            'idx': _idx$1\n        });\n        return $1179;\n    };\n    const Mons$Screen$welcome = x0 => Mons$Screen$welcome$(x0);\n\n    function List$elem$(_p$2, _a$3, _as$4) {\n        var List$elem$ = (_p$2, _a$3, _as$4) => ({\n            ctr: 'TCO',\n            arg: [_p$2, _a$3, _as$4]\n        });\n        var List$elem = _p$2 => _a$3 => _as$4 => List$elem$(_p$2, _a$3, _as$4);\n        var arg = [_p$2, _a$3, _as$4];\n        while (true) {\n            let [_p$2, _a$3, _as$4] = arg;\n            var R = (() => {\n                var self = _as$4;\n                switch (self._) {\n                    case 'List.cons':\n                        var $1180 = self.head;\n                        var $1181 = self.tail;\n                        var self = _p$2(_a$3)($1180);\n                        if (self) {\n                            var $1183 = Bool$true;\n                            var $1182 = $1183;\n                        } else {\n                            var $1184 = List$elem$(_p$2, _a$3, $1181);\n                            var $1182 = $1184;\n                        };\n                        return $1182;\n                    case 'List.nil':\n                        var $1185 = Bool$false;\n                        return $1185;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$elem = x0 => x1 => x2 => List$elem$(x0, x1, x2);\n\n    function Char$eql$(_a$1, _b$2) {\n        var $1186 = (_a$1 === _b$2);\n        return $1186;\n    };\n    const Char$eql = x0 => x1 => Char$eql$(x0, x1);\n\n    function Mons$is_walk_cmd$(_cmd$1) {\n        var $1187 = List$elem$(Char$eql, _cmd$1, List$cons$(87, List$cons$(65, List$cons$(83, List$cons$(68, List$cons$(119, List$cons$(97, List$cons$(115, List$cons$(100, List$nil)))))))));\n        return $1187;\n    };\n    const Mons$is_walk_cmd = x0 => Mons$is_walk_cmd$(x0);\n\n    function Mons$key_to_dir$(_key_code$1) {\n        var self = ((_key_code$1 === 65) || (_key_code$1 === 97));\n        if (self) {\n            var $1189 = Maybe$some$(Mons$Dir$left);\n            var $1188 = $1189;\n        } else {\n            var self = ((_key_code$1 === 68) || (_key_code$1 === 100));\n            if (self) {\n                var $1191 = Maybe$some$(Mons$Dir$right);\n                var $1190 = $1191;\n            } else {\n                var self = ((_key_code$1 === 87) || (_key_code$1 === 119));\n                if (self) {\n                    var $1193 = Maybe$some$(Mons$Dir$up);\n                    var $1192 = $1193;\n                } else {\n                    var self = ((_key_code$1 === 83) || (_key_code$1 === 115));\n                    if (self) {\n                        var $1195 = Maybe$some$(Mons$Dir$down);\n                        var $1194 = $1195;\n                    } else {\n                        var $1196 = Maybe$none;\n                        var $1194 = $1196;\n                    };\n                    var $1192 = $1194;\n                };\n                var $1190 = $1192;\n            };\n            var $1188 = $1190;\n        };\n        return $1188;\n    };\n    const Mons$key_to_dir = x0 => Mons$key_to_dir$(x0);\n\n    function Mons$Object$set_pad$(_obj$1, _pad$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1198 = self.kin;\n                var $1199 = self.dir;\n                var $1200 = self.ani;\n                var $1201 = self.dmg;\n                var $1202 = self.bag;\n                var $1203 = self.mon;\n                var $1204 = self.bos;\n                var $1205 = self.cap;\n                var $1206 = self.idl;\n                var $1207 = self.eff;\n                var $1208 = Mons$Object$new$($1198, $1199, _pad$2, $1200, $1201, $1202, $1203, $1204, $1205, $1206, $1207);\n                var $1197 = $1208;\n                break;\n        };\n        return $1197;\n    };\n    const Mons$Object$set_pad = x0 => x1 => Mons$Object$set_pad$(x0, x1);\n\n    function Mons$Pad$set_r$(_pad$1, _val$2) {\n        var self = _pad$1;\n        switch (self._) {\n            case 'Mons.Pad.new':\n                var $1210 = self.u;\n                var $1211 = self.l;\n                var $1212 = self.d;\n                var $1213 = Mons$Pad$new$(_val$2, $1210, $1211, $1212);\n                var $1209 = $1213;\n                break;\n        };\n        return $1209;\n    };\n    const Mons$Pad$set_r = x0 => x1 => Mons$Pad$set_r$(x0, x1);\n\n    function Mons$Object$set_pad_r$(_obj$1, _val$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1215 = self.pad;\n                var $1216 = Mons$Object$set_pad$(_obj$1, Mons$Pad$set_r$($1215, _val$2));\n                var $1214 = $1216;\n                break;\n        };\n        return $1214;\n    };\n    const Mons$Object$set_pad_r = x0 => x1 => Mons$Object$set_pad_r$(x0, x1);\n\n    function Mons$Pad$set_u$(_pad$1, _val$2) {\n        var self = _pad$1;\n        switch (self._) {\n            case 'Mons.Pad.new':\n                var $1218 = self.r;\n                var $1219 = self.l;\n                var $1220 = self.d;\n                var $1221 = Mons$Pad$new$($1218, _val$2, $1219, $1220);\n                var $1217 = $1221;\n                break;\n        };\n        return $1217;\n    };\n    const Mons$Pad$set_u = x0 => x1 => Mons$Pad$set_u$(x0, x1);\n\n    function Mons$Object$set_pad_u$(_obj$1, _val$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1223 = self.pad;\n                var $1224 = Mons$Object$set_pad$(_obj$1, Mons$Pad$set_u$($1223, _val$2));\n                var $1222 = $1224;\n                break;\n        };\n        return $1222;\n    };\n    const Mons$Object$set_pad_u = x0 => x1 => Mons$Object$set_pad_u$(x0, x1);\n\n    function Mons$Pad$set_l$(_pad$1, _val$2) {\n        var self = _pad$1;\n        switch (self._) {\n            case 'Mons.Pad.new':\n                var $1226 = self.r;\n                var $1227 = self.u;\n                var $1228 = self.d;\n                var $1229 = Mons$Pad$new$($1226, $1227, _val$2, $1228);\n                var $1225 = $1229;\n                break;\n        };\n        return $1225;\n    };\n    const Mons$Pad$set_l = x0 => x1 => Mons$Pad$set_l$(x0, x1);\n\n    function Mons$Object$set_pad_l$(_obj$1, _val$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1231 = self.pad;\n                var $1232 = Mons$Object$set_pad$(_obj$1, Mons$Pad$set_l$($1231, _val$2));\n                var $1230 = $1232;\n                break;\n        };\n        return $1230;\n    };\n    const Mons$Object$set_pad_l = x0 => x1 => Mons$Object$set_pad_l$(x0, x1);\n\n    function Mons$Pad$set_d$(_pad$1, _val$2) {\n        var self = _pad$1;\n        switch (self._) {\n            case 'Mons.Pad.new':\n                var $1234 = self.r;\n                var $1235 = self.u;\n                var $1236 = self.l;\n                var $1237 = Mons$Pad$new$($1234, $1235, $1236, _val$2);\n                var $1233 = $1237;\n                break;\n        };\n        return $1233;\n    };\n    const Mons$Pad$set_d = x0 => x1 => Mons$Pad$set_d$(x0, x1);\n\n    function Mons$Object$set_pad_d$(_obj$1, _val$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1239 = self.pad;\n                var $1240 = Mons$Object$set_pad$(_obj$1, Mons$Pad$set_d$($1239, _val$2));\n                var $1238 = $1240;\n                break;\n        };\n        return $1238;\n    };\n    const Mons$Object$set_pad_d = x0 => x1 => Mons$Object$set_pad_d$(x0, x1);\n\n    function Mons$dir_to_set_pad$(_dir$1) {\n        var self = _dir$1;\n        switch (self._) {\n            case 'Mons.Dir.right':\n                var $1242 = Mons$Object$set_pad_r;\n                var $1241 = $1242;\n                break;\n            case 'Mons.Dir.up':\n                var $1243 = Mons$Object$set_pad_u;\n                var $1241 = $1243;\n                break;\n            case 'Mons.Dir.left':\n                var $1244 = Mons$Object$set_pad_l;\n                var $1241 = $1244;\n                break;\n            case 'Mons.Dir.down':\n                var $1245 = Mons$Object$set_pad_d;\n                var $1241 = $1245;\n                break;\n        };\n        return $1241;\n    };\n    const Mons$dir_to_set_pad = x0 => Mons$dir_to_set_pad$(x0);\n\n    function Char$is_upper$(_char$1) {\n        var $1246 = ((_char$1 >= 65) && (_char$1 <= 90));\n        return $1246;\n    };\n    const Char$is_upper = x0 => Char$is_upper$(x0);\n\n    function Mons$Game$update$(_fn$1, _pos$2, _idx$3, _game$4) {\n        var self = _game$4;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $1248 = self.map;\n                var _obj$10 = _fn$1(Mons$Map$get$(_pos$2, _idx$3, $1248));\n                var _map$11 = Mons$Map$set$(_pos$2, _idx$3, _obj$10, $1248);\n                var $1249 = Mons$Game$set_map$(_map$11, _game$4);\n                var $1247 = $1249;\n                break;\n        };\n        return $1247;\n    };\n    const Mons$Game$update = x0 => x1 => x2 => x3 => Mons$Game$update$(x0, x1, x2, x3);\n\n    function Mons$Game$walk$(_cmd$1, _pos$2, _idx$3, _game$4) {\n        var self = _game$4;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var self = Mons$key_to_dir$(_cmd$1);\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $1252 = self.value;\n                        var _dir$11 = $1252;\n                        var _set_pad$12 = Mons$dir_to_set_pad$(_dir$11);\n                        var _flag$13 = Char$is_upper$(_cmd$1);\n                        var $1253 = Mons$Game$update$((_obj$14 => {\n                            var $1254 = _set_pad$12(_obj$14)(_flag$13);\n                            return $1254;\n                        }), _pos$2, _idx$3, _game$4);\n                        var $1251 = $1253;\n                        break;\n                    case 'Maybe.none':\n                        var $1255 = _game$4;\n                        var $1251 = $1255;\n                        break;\n                };\n                var $1250 = $1251;\n                break;\n        };\n        return $1250;\n    };\n    const Mons$Game$walk = x0 => x1 => x2 => x3 => Mons$Game$walk$(x0, x1, x2, x3);\n\n    function Mons$Kind$is_mage$(_kind$1) {\n        var self = _kind$1;\n        switch (self._) {\n            case 'Mons.Kind.Mons':\n                var $1257 = self.ele;\n                var self = $1257;\n                switch (self._) {\n                    case 'Mons.Kind.mons.HERO':\n                    case 'Mons.Kind.mons.BEHOLDER':\n                    case 'Mons.Kind.mons.ZOIO':\n                    case 'Mons.Kind.mons.CYCLOPE':\n                    case 'Mons.Kind.mons.POISOLICK':\n                    case 'Mons.Kind.mons.TROWL':\n                    case 'Mons.Kind.mons.MIMIC':\n                    case 'Mons.Kind.mons.MIMIC2':\n                    case 'Mons.Kind.mons.AZULA':\n                    case 'Mons.Kind.mons.EMERELDER':\n                    case 'Mons.Kind.mons.EMERELDER2':\n                        var $1259 = Bool$false;\n                        var $1258 = $1259;\n                        break;\n                    case 'Mons.Kind.mons.MAGE':\n                        var $1260 = Bool$true;\n                        var $1258 = $1260;\n                        break;\n                };\n                var $1256 = $1258;\n                break;\n            case 'Mons.Kind.Const':\n            case 'Mons.Kind.Terrain':\n            case 'Mons.Kind.Interactive':\n                var $1261 = Bool$false;\n                var $1256 = $1261;\n                break;\n        };\n        return $1256;\n    };\n    const Mons$Kind$is_mage = x0 => Mons$Kind$is_mage$(x0);\n\n    function Mons$Object$set_bag$(_bag$1, _obj$2) {\n        var self = _obj$2;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1263 = self.kin;\n                var $1264 = self.dir;\n                var $1265 = self.pad;\n                var $1266 = self.ani;\n                var $1267 = self.dmg;\n                var $1268 = self.mon;\n                var $1269 = self.bos;\n                var $1270 = self.cap;\n                var $1271 = self.idl;\n                var $1272 = self.eff;\n                var $1273 = Mons$Object$new$($1263, $1264, $1265, $1266, $1267, _bag$1, $1268, $1269, $1270, $1271, $1272);\n                var $1262 = $1273;\n                break;\n        };\n        return $1262;\n    };\n    const Mons$Object$set_bag = x0 => x1 => Mons$Object$set_bag$(x0, x1);\n    const Mons$Kind$mons$POISOLICK = ({\n        _: 'Mons.Kind.mons.POISOLICK'\n    });\n    const Mons$Kind$mons$AZULA = ({\n        _: 'Mons.Kind.mons.AZULA'\n    });\n    const Mons$Kind$mons$EMERELDER = ({\n        _: 'Mons.Kind.mons.EMERELDER'\n    });\n\n    function Mons$Object$set_dmg$(_obj$1, _dmg$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1275 = self.kin;\n                var $1276 = self.dir;\n                var $1277 = self.pad;\n                var $1278 = self.ani;\n                var $1279 = self.bag;\n                var $1280 = self.mon;\n                var $1281 = self.bos;\n                var $1282 = self.cap;\n                var $1283 = self.idl;\n                var $1284 = self.eff;\n                var $1285 = Mons$Object$new$($1275, $1276, $1277, $1278, _dmg$2, $1279, $1280, $1281, $1282, $1283, $1284);\n                var $1274 = $1285;\n                break;\n        };\n        return $1274;\n    };\n    const Mons$Object$set_dmg = x0 => x1 => Mons$Object$set_dmg$(x0, x1);\n    const Nat$ltn = a0 => a1 => (a0 < a1);\n\n    function List$pure$(_x$2) {\n        var $1286 = List$cons$(_x$2, List$nil);\n        return $1286;\n    };\n    const List$pure = x0 => List$pure$(x0);\n\n    function List$append$(_as$2, _a$3) {\n        var self = _as$2;\n        switch (self._) {\n            case 'List.cons':\n                var $1288 = self.head;\n                var $1289 = self.tail;\n                var $1290 = List$cons$($1288, List$append$($1289, _a$3));\n                var $1287 = $1290;\n                break;\n            case 'List.nil':\n                var $1291 = List$pure$(_a$3);\n                var $1287 = $1291;\n                break;\n        };\n        return $1287;\n    };\n    const List$append = x0 => x1 => List$append$(x0, x1);\n\n    function Mons$Object$push_to_bag$(_obj$1, _hero$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1293 = self.kin;\n                var self = _hero$2;\n                switch (self._) {\n                    case 'Mons.Object.new':\n                        var $1295 = self.bag;\n                        var _qtd$25 = (list_length($1295));\n                        var self = $1293;\n                        switch (self._) {\n                            case 'Mons.Kind.Mons':\n                                var _obj$30 = Mons$Object$set_dmg$(_obj$1, 0);\n                                var self = (_qtd$25 < 3n);\n                                if (self) {\n                                    var _new_bag$31 = List$append$($1295, _obj$30);\n                                    var $1298 = Mons$Object$set_bag$(_new_bag$31, _hero$2);\n                                    var $1297 = $1298;\n                                } else {\n                                    var $1299 = _hero$2;\n                                    var $1297 = $1299;\n                                };\n                                var $1296 = $1297;\n                                break;\n                            case 'Mons.Kind.Const':\n                            case 'Mons.Kind.Terrain':\n                            case 'Mons.Kind.Interactive':\n                                var $1300 = _hero$2;\n                                var $1296 = $1300;\n                                break;\n                        };\n                        var $1294 = $1296;\n                        break;\n                };\n                var $1292 = $1294;\n                break;\n        };\n        return $1292;\n    };\n    const Mons$Object$push_to_bag = x0 => x1 => Mons$Object$push_to_bag$(x0, x1);\n\n    function Mons$initial_mons$(_hero_obj$1, _pos$2, _hero_idx$3, _game$4) {\n        var self = _hero_obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var _hero_obj$16 = Mons$Object$set_bag$(List$nil, _hero_obj$1);\n                var _mon0_bag$17 = Mons$Object$new_of_kind$(Mons$Kind$Mons$(Mons$Kind$mons$POISOLICK, Bool$false, Mons$Type$normal, 2));\n                var _mon1_bag$18 = Mons$Object$new_of_kind$(Mons$Kind$Mons$(Mons$Kind$mons$AZULA, Bool$false, Mons$Type$normal, 2));\n                var _mon2_bag$19 = Mons$Object$new_of_kind$(Mons$Kind$Mons$(Mons$Kind$mons$EMERELDER, Bool$false, Mons$Type$normal, 2));\n                var _hero_obj$20 = Mons$Object$push_to_bag$(_mon0_bag$17, _hero_obj$16);\n                var _hero_obj$21 = Mons$Object$push_to_bag$(_mon1_bag$18, _hero_obj$20);\n                var _hero_obj$22 = Mons$Object$push_to_bag$(_mon2_bag$19, _hero_obj$21);\n                var $1302 = Mons$Game$map_set$(_pos$2, _hero_idx$3, _hero_obj$22, _game$4);\n                var $1301 = $1302;\n                break;\n        };\n        return $1301;\n    };\n    const Mons$initial_mons = x0 => x1 => x2 => x3 => Mons$initial_mons$(x0, x1, x2, x3);\n\n    function Mons$Screen$intro_select$(_idx$1) {\n        var $1303 = ({\n            _: 'Mons.Screen.intro_select',\n            'idx': _idx$1\n        });\n        return $1303;\n    };\n    const Mons$Screen$intro_select = x0 => Mons$Screen$intro_select$(x0);\n    const Mons$Type$earth = ({\n        _: 'Mons.Type.earth'\n    });\n\n    function Mons$Object$set_mon$(_idx$1, _obj$2) {\n        var self = _obj$2;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1305 = self.kin;\n                var $1306 = self.dir;\n                var $1307 = self.pad;\n                var $1308 = self.ani;\n                var $1309 = self.dmg;\n                var $1310 = self.bag;\n                var $1311 = self.bos;\n                var $1312 = self.cap;\n                var $1313 = self.idl;\n                var $1314 = self.eff;\n                var $1315 = Mons$Object$new$($1305, $1306, $1307, $1308, $1309, $1310, _idx$1, $1311, $1312, $1313, $1314);\n                var $1304 = $1315;\n                break;\n        };\n        return $1304;\n    };\n    const Mons$Object$set_mon = x0 => x1 => Mons$Object$set_mon$(x0, x1);\n\n    function Mons$Object$delete_init_mons$(_hero_obj$1) {\n        var self = _hero_obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1317 = self.bag;\n                var $1318 = self.mon;\n                var _get_mon$13 = List$at$(U32$to_nat$($1318), $1317);\n                var self = _get_mon$13;\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $1320 = self.value;\n                        var $1321 = $1320;\n                        var _cur_mon$14 = $1321;\n                        break;\n                    case 'Maybe.none':\n                        var $1322 = Mons$Object$new_of_kind$(Mons$Kind$Mons$(Mons$Kind$mons$HERO, Bool$false, Mons$Type$earth, 2));\n                        var _cur_mon$14 = $1322;\n                        break;\n                };\n                var _hero_obj$15 = Mons$Object$set_bag$(List$nil, _hero_obj$1);\n                var _hero_obj$16 = Mons$Object$push_to_bag$(_cur_mon$14, _hero_obj$15);\n                var _hero_obj$17 = Mons$Object$set_mon$(0, _hero_obj$16);\n                var $1319 = _hero_obj$17;\n                var $1316 = $1319;\n                break;\n        };\n        return $1316;\n    };\n    const Mons$Object$delete_init_mons = x0 => Mons$Object$delete_init_mons$(x0);\n    const U32$gte = a0 => a1 => (a0 >= a1);\n\n    function Mons$Game$adve_turn$(_hero_obj$1, _adve_obj$2, _game$3) {\n        var self = _game$3;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var self = _hero_obj$1;\n                switch (self._) {\n                    case 'Mons.Object.new':\n                        var $1325 = self.bag;\n                        var self = _adve_obj$2;\n                        switch (self._) {\n                            case 'Mons.Object.new':\n                                var _adve_hp$31 = Mons$Object$remaining_hp$(_adve_obj$2);\n                                var _hero_hp$32 = Mons$Object$remaining_hp$(_hero_obj$1);\n                                var _qtd_mon_bag$33 = (Number((list_length($1325))));\n                                var _hero_pos$34 = Mons$Game$get_hero_pos$(_game$3);\n                                var self = _hero_pos$34;\n                                switch (self._) {\n                                    case 'Maybe.some':\n                                        var $1328 = self.value;\n                                        var $1329 = (($1328 & 0xFFF));\n                                        var _pos_x$35 = $1329;\n                                        break;\n                                    case 'Maybe.none':\n                                        var $1330 = 80;\n                                        var _pos_x$35 = $1330;\n                                        break;\n                                };\n                                var self = ((Math.max(_hero_hp$32 - _adve_hp$31, 0)) > 15);\n                                if (self) {\n                                    var $1331 = 2n;\n                                    var $1327 = $1331;\n                                } else {\n                                    var self = ((_hero_hp$32 > 30) && (_hero_hp$32 < 25));\n                                    if (self) {\n                                        var $1333 = 2n;\n                                        var $1332 = $1333;\n                                    } else {\n                                        var self = ((Math.max(_adve_hp$31 - _hero_hp$32, 0)) >= 8);\n                                        if (self) {\n                                            var $1335 = 1n;\n                                            var $1334 = $1335;\n                                        } else {\n                                            var self = ((_qtd_mon_bag$33 > 1) && (_hero_hp$32 > 30));\n                                            if (self) {\n                                                var $1337 = 1n;\n                                                var $1336 = $1337;\n                                            } else {\n                                                var self = (_hero_hp$32 === _adve_hp$31);\n                                                if (self) {\n                                                    var $1339 = 3n;\n                                                    var $1338 = $1339;\n                                                } else {\n                                                    var self = ((!((_pos_x$35 % 2) === 0)) && (_hero_hp$32 < 15));\n                                                    if (self) {\n                                                        var $1341 = 1n;\n                                                        var $1340 = $1341;\n                                                    } else {\n                                                        var self = ((Math.max(_adve_hp$31 - _hero_hp$32, 0)) > 15);\n                                                        if (self) {\n                                                            var $1343 = 0n;\n                                                            var $1342 = $1343;\n                                                        } else {\n                                                            var self = ((_adve_hp$31 > _hero_hp$32) && (_hero_hp$32 > 30));\n                                                            if (self) {\n                                                                var $1345 = 0n;\n                                                                var $1344 = $1345;\n                                                            } else {\n                                                                var self = (_hero_hp$32 > 20);\n                                                                if (self) {\n                                                                    var $1347 = 1n;\n                                                                    var $1346 = $1347;\n                                                                } else {\n                                                                    var self = (((_pos_x$35 % 2) === 0) && (_hero_hp$32 < 15));\n                                                                    if (self) {\n                                                                        var $1349 = 1n;\n                                                                        var $1348 = $1349;\n                                                                    } else {\n                                                                        var self = (_hero_hp$32 < 5);\n                                                                        if (self) {\n                                                                            var $1351 = 0n;\n                                                                            var $1350 = $1351;\n                                                                        } else {\n                                                                            var $1352 = 0n;\n                                                                            var $1350 = $1352;\n                                                                        };\n                                                                        var $1348 = $1350;\n                                                                    };\n                                                                    var $1346 = $1348;\n                                                                };\n                                                                var $1344 = $1346;\n                                                            };\n                                                            var $1342 = $1344;\n                                                        };\n                                                        var $1340 = $1342;\n                                                    };\n                                                    var $1338 = $1340;\n                                                };\n                                                var $1336 = $1338;\n                                            };\n                                            var $1334 = $1336;\n                                        };\n                                        var $1332 = $1334;\n                                    };\n                                    var $1327 = $1332;\n                                };\n                                var $1326 = $1327;\n                                break;\n                        };\n                        var $1324 = $1326;\n                        break;\n                };\n                var $1323 = $1324;\n                break;\n        };\n        return $1323;\n    };\n    const Mons$Game$adve_turn = x0 => x1 => x2 => Mons$Game$adve_turn$(x0, x1, x2);\n\n    function Mons$Effect$upd_initial_eff$(_eff$1) {\n        var self = _eff$1;\n        switch (self._) {\n            case 'Mons.Effect.new':\n                var $1354 = self.sleep;\n                var $1355 = self.burn;\n                var $1356 = self.protect;\n                var $1357 = self.minimize;\n                var $1358 = self.invulnerable;\n                var $1359 = self.poison;\n                var $1360 = Mons$Effect$new$($1354, (Math.max($1355 - 1, 0)), $1356, $1357, $1358, 0, $1359, Bool$false);\n                var $1353 = $1360;\n                break;\n        };\n        return $1353;\n    };\n    const Mons$Effect$upd_initial_eff = x0 => Mons$Effect$upd_initial_eff$(x0);\n\n    function Mons$Object$set_eff$(_eff$1, _obj$2) {\n        var self = _obj$2;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1362 = self.kin;\n                var $1363 = self.dir;\n                var $1364 = self.pad;\n                var $1365 = self.ani;\n                var $1366 = self.dmg;\n                var $1367 = self.bag;\n                var $1368 = self.mon;\n                var $1369 = self.bos;\n                var $1370 = self.cap;\n                var $1371 = self.idl;\n                var $1372 = Mons$Object$new$($1362, $1363, $1364, $1365, $1366, $1367, $1368, $1369, $1370, $1371, _eff$1);\n                var $1361 = $1372;\n                break;\n        };\n        return $1361;\n    };\n    const Mons$Object$set_eff = x0 => x1 => Mons$Object$set_eff$(x0, x1);\n\n    function Mons$Skill$update_mon_obj$(_hero_obj$1, _obj_updated$2, _pos$3, _idx$4, _game$5) {\n        var self = _hero_obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1374 = self.bag;\n                var $1375 = self.mon;\n                var _qtd$17 = (list_length($1374));\n                var self = (_qtd$17 === 0n);\n                if (self) {\n                    var $1377 = Mons$Game$map_set$(_pos$3, _idx$4, _obj_updated$2, _game$5);\n                    var $1376 = $1377;\n                } else {\n                    var _idx_nat$18 = U32$to_nat$($1375);\n                    var _new_bag$19 = List$update_at$(_idx_nat$18, (_a$19 => {\n                        var $1379 = _obj_updated$2;\n                        return $1379;\n                    }), $1374);\n                    var _hero_obj$20 = Mons$Object$set_bag$(_new_bag$19, _hero_obj$1);\n                    var $1378 = Mons$Game$map_set$(_pos$3, _idx$4, _hero_obj$20, _game$5);\n                    var $1376 = $1378;\n                };\n                var $1373 = $1376;\n                break;\n        };\n        return $1373;\n    };\n    const Mons$Skill$update_mon_obj = x0 => x1 => x2 => x3 => x4 => Mons$Skill$update_mon_obj$(x0, x1, x2, x3, x4);\n\n    function Mons$Effect$has_invulnerable$(_eff$1) {\n        var self = _eff$1;\n        switch (self._) {\n            case 'Mons.Effect.new':\n                var $1381 = self.invulnerable;\n                var self = $1381;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $1383 = self.fst;\n                        var $1384 = $1383;\n                        var $1382 = $1384;\n                        break;\n                };\n                var $1380 = $1382;\n                break;\n        };\n        return $1380;\n    };\n    const Mons$Effect$has_invulnerable = x0 => Mons$Effect$has_invulnerable$(x0);\n\n    function Mons$Effect$has_burn$(_eff$1) {\n        var self = _eff$1;\n        switch (self._) {\n            case 'Mons.Effect.new':\n                var $1386 = self.burn;\n                var $1387 = ($1386 > 0);\n                var $1385 = $1387;\n                break;\n        };\n        return $1385;\n    };\n    const Mons$Effect$has_burn = x0 => Mons$Effect$has_burn$(x0);\n\n    function Mons$Effect$has_hit$(_eff$1) {\n        var self = _eff$1;\n        switch (self._) {\n            case 'Mons.Effect.new':\n                var $1389 = self.hit;\n                var $1390 = ($1389 > 0);\n                var $1388 = $1390;\n                break;\n        };\n        return $1388;\n    };\n    const Mons$Effect$has_hit = x0 => Mons$Effect$has_hit$(x0);\n\n    function Mons$Effect$has_poison$(_eff$1) {\n        var self = _eff$1;\n        switch (self._) {\n            case 'Mons.Effect.new':\n                var $1392 = self.poison;\n                var $1393 = $1392;\n                var $1391 = $1393;\n                break;\n        };\n        return $1391;\n    };\n    const Mons$Effect$has_poison = x0 => Mons$Effect$has_poison$(x0);\n\n    function Mons$Skill$apply_inital_eff_dmg$(_eff$1, _mhp$2, _idx$3) {\n        var self = _eff$1;\n        switch (self._) {\n            case 'Mons.Effect.new':\n                var $1395 = self.hit;\n                var self = (_idx$3 === 1);\n                if (self) {\n                    var $1397 = \"adve \";\n                    var _player$12 = $1397;\n                } else {\n                    var $1398 = \"hero \";\n                    var _player$12 = $1398;\n                };\n                var self = Mons$Effect$has_invulnerable$(_eff$1);\n                if (self) {\n                    var $1399 = 0;\n                    var $1396 = $1399;\n                } else {\n                    var self = Mons$Effect$has_burn$(_eff$1);\n                    if (self) {\n                        var $1401 = ((_mhp$2 / 16) >>> 0);\n                        var _dmg_burn$13 = $1401;\n                    } else {\n                        var $1402 = 0;\n                        var _dmg_burn$13 = $1402;\n                    };\n                    var self = Mons$Effect$has_hit$(_eff$1);\n                    if (self) {\n                        var $1403 = $1395;\n                        var _dmg_hit$14 = $1403;\n                    } else {\n                        var $1404 = 0;\n                        var _dmg_hit$14 = $1404;\n                    };\n                    var self = Mons$Effect$has_poison$(_eff$1);\n                    if (self) {\n                        var $1405 = ((_mhp$2 / 16) >>> 0);\n                        var _dmg_poison$15 = $1405;\n                    } else {\n                        var $1406 = 0;\n                        var _dmg_poison$15 = $1406;\n                    };\n                    var _dmg$16 = ((_dmg_poison$15 + ((_dmg_burn$13 + _dmg_hit$14) >>> 0)) >>> 0);\n                    var $1400 = _dmg$16;\n                    var $1396 = $1400;\n                };\n                var $1394 = $1396;\n                break;\n        };\n        return $1394;\n    };\n    const Mons$Skill$apply_inital_eff_dmg = x0 => x1 => x2 => Mons$Skill$apply_inital_eff_dmg$(x0, x1, x2);\n\n    function Mons$Effect$has_protect$(_eff$1) {\n        var self = _eff$1;\n        switch (self._) {\n            case 'Mons.Effect.new':\n                var $1408 = self.protect;\n                var _turn$10 = Pair$fst$($1408);\n                var $1409 = (_turn$10 === 1);\n                var $1407 = $1409;\n                break;\n        };\n        return $1407;\n    };\n    const Mons$Effect$has_protect = x0 => Mons$Effect$has_protect$(x0);\n\n    function Mons$Effect$has_minimize$(_eff$1) {\n        var self = _eff$1;\n        switch (self._) {\n            case 'Mons.Effect.new':\n                var $1411 = self.minimize;\n                var self = $1411;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $1413 = self.fst;\n                        var $1414 = ($1413 > 0);\n                        var $1412 = $1414;\n                        break;\n                };\n                var $1410 = $1412;\n                break;\n        };\n        return $1410;\n    };\n    const Mons$Effect$has_minimize = x0 => Mons$Effect$has_minimize$(x0);\n\n    function Mons$Object$get_dmg$(_obj$1) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1416 = self.dmg;\n                var $1417 = $1416;\n                var $1415 = $1417;\n                break;\n        };\n        return $1415;\n    };\n    const Mons$Object$get_dmg = x0 => Mons$Object$get_dmg$(x0);\n\n    function Mons$Object$hit$(_obj$1, _dmg$2) {\n        var $1418 = Mons$Object$set_dmg$(_obj$1, ((Mons$Object$get_dmg$(_obj$1) + _dmg$2) >>> 0));\n        return $1418;\n    };\n    const Mons$Object$hit = x0 => x1 => Mons$Object$hit$(x0, x1);\n\n    function Mons$Skill$damage_eff$(_obj$1, _pos$2, _idx$3, _dmg$4, _game$5) {\n        var _obj_mon$6 = Mons$Object$get_current_mon$(_obj$1);\n        var self = _obj_mon$6;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1420 = self.eff;\n                var self = Mons$Effect$has_invulnerable$($1420);\n                if (self) {\n                    var $1422 = _game$5;\n                    var $1421 = $1422;\n                } else {\n                    var self = (_idx$3 === 1);\n                    if (self) {\n                        var $1424 = \"adve \";\n                        var _player$18 = $1424;\n                    } else {\n                        var $1425 = \"hero \";\n                        var _player$18 = $1425;\n                    };\n                    var self = Mons$Effect$has_protect$($1420);\n                    if (self) {\n                        var $1426 = ((_dmg$4 / 2) >>> 0);\n                        var _dmg$19 = $1426;\n                    } else {\n                        var $1427 = _dmg$4;\n                        var _dmg$19 = $1427;\n                    };\n                    var self = Mons$Effect$has_minimize$($1420);\n                    if (self) {\n                        var $1428 = (Math.max(_dmg$19 - ((_dmg$19 / 4) >>> 0), 0));\n                        var _dmg$20 = $1428;\n                    } else {\n                        var $1429 = _dmg$19;\n                        var _dmg$20 = $1429;\n                    };\n                    var _obj_mon$21 = Mons$Object$hit$(_obj_mon$6, _dmg$20);\n                    var $1423 = Mons$Skill$update_mon_obj$(_obj$1, _obj_mon$21, _pos$2, _idx$3, _game$5);\n                    var $1421 = $1423;\n                };\n                var $1419 = $1421;\n                break;\n        };\n        return $1419;\n    };\n    const Mons$Skill$damage_eff = x0 => x1 => x2 => x3 => x4 => Mons$Skill$damage_eff$(x0, x1, x2, x3, x4);\n\n    function Mons$Skill$apply_inital_eff$(_hero_idx$1, _adve_idx$2, _pos$3, _game$4) {\n        var self = _game$4;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $1431 = self.map;\n                var _hero_obj$10 = Mons$Map$get$(_pos$3, _hero_idx$1, $1431);\n                var _hero_mon_obj$11 = Mons$Object$get_current_mon$(_hero_obj$10);\n                var self = _hero_mon_obj$11;\n                switch (self._) {\n                    case 'Mons.Object.new':\n                        var $1433 = self.kin;\n                        var $1434 = self.eff;\n                        var self = Mons$Kind$attr$($1433);\n                        switch (self._) {\n                            case 'Mons.Attr.new':\n                                var $1436 = self.mhp;\n                                var _upd_effect$33 = Mons$Effect$upd_initial_eff$($1434);\n                                var _hero_mon_obj$34 = Mons$Object$set_eff$(_upd_effect$33, _hero_mon_obj$11);\n                                var _game$35 = Mons$Skill$update_mon_obj$(_hero_obj$10, _hero_mon_obj$34, _pos$3, _hero_idx$1, _game$4);\n                                var _hero_dmg$36 = Mons$Skill$apply_inital_eff_dmg$($1434, $1436, _hero_idx$1);\n                                var _game$37 = Mons$Skill$damage_eff$(_hero_obj$10, _pos$3, _hero_idx$1, _hero_dmg$36, _game$35);\n                                var _adve_obj$38 = Mons$Map$get$(_pos$3, _adve_idx$2, $1431);\n                                var self = _adve_obj$38;\n                                switch (self._) {\n                                    case 'Mons.Object.new':\n                                        var $1438 = self.kin;\n                                        var $1439 = self.eff;\n                                        var self = Mons$Kind$attr$($1438);\n                                        switch (self._) {\n                                            case 'Mons.Attr.new':\n                                                var $1441 = self.mhp;\n                                                var _upd_effect$60 = Mons$Effect$upd_initial_eff$($1439);\n                                                var _adve_obj$61 = Mons$Object$set_eff$(_upd_effect$60, _adve_obj$38);\n                                                var _adve_dmg$62 = Mons$Skill$apply_inital_eff_dmg$($1439, $1441, _adve_idx$2);\n                                                var _game$63 = Mons$Skill$damage_eff$(_adve_obj$61, _pos$3, _adve_idx$2, _adve_dmg$62, _game$37);\n                                                var $1442 = _game$63;\n                                                var $1440 = $1442;\n                                                break;\n                                        };\n                                        var $1437 = $1440;\n                                        break;\n                                };\n                                var $1435 = $1437;\n                                break;\n                        };\n                        var $1432 = $1435;\n                        break;\n                };\n                var $1430 = $1432;\n                break;\n        };\n        return $1430;\n    };\n    const Mons$Skill$apply_inital_eff = x0 => x1 => x2 => x3 => Mons$Skill$apply_inital_eff$(x0, x1, x2, x3);\n\n    function Mons$Effect$has_sleep$(_eff$1) {\n        var self = _eff$1;\n        switch (self._) {\n            case 'Mons.Effect.new':\n                var $1444 = self.sleep;\n                var _turn$10 = Pair$fst$($1444);\n                var $1445 = (_turn$10 === 1);\n                var $1443 = $1445;\n                break;\n        };\n        return $1443;\n    };\n    const Mons$Effect$has_sleep = x0 => Mons$Effect$has_sleep$(x0);\n\n    function Mons$Type$skill_n_type$(_val$1, _source_obj$2, _target_obj$3) {\n        var $1446 = 1;\n        return $1446;\n    };\n    const Mons$Type$skill_n_type = x0 => x1 => x2 => Mons$Type$skill_n_type$(x0, x1, x2);\n\n    function Mons$Object$heal$(_obj$1, _val$2) {\n        var $1447 = Mons$Object$set_dmg$(_obj$1, (Math.max(Mons$Object$get_dmg$(_obj$1) - _val$2, 0)));\n        return $1447;\n    };\n    const Mons$Object$heal = x0 => x1 => Mons$Object$heal$(x0, x1);\n\n    function Mons$Skill$heal_eff$(_obj$1, _pos$2, _idx$3, _val$4, _game$5) {\n        var _obj_updated$6 = Mons$Object$heal$(Mons$Object$get_current_mon$(_obj$1), _val$4);\n        var self = Mons$Object$is_obj_defeated$(_obj_updated$6);\n        if (self) {\n            var $1449 = _game$5;\n            var $1448 = $1449;\n        } else {\n            var $1450 = Mons$Skill$update_mon_obj$(_obj$1, _obj_updated$6, _pos$2, _idx$3, _game$5);\n            var $1448 = $1450;\n        };\n        return $1448;\n    };\n    const Mons$Skill$heal_eff = x0 => x1 => x2 => x3 => x4 => Mons$Skill$heal_eff$(x0, x1, x2, x3, x4);\n\n    function Mons$Effect$set_invulnerable$(_obj$1) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1452 = self.eff;\n                var self = $1452;\n                switch (self._) {\n                    case 'Mons.Effect.new':\n                        var $1454 = self.sleep;\n                        var $1455 = self.burn;\n                        var $1456 = self.protect;\n                        var $1457 = self.minimize;\n                        var $1458 = self.invulnerable;\n                        var $1459 = self.hit;\n                        var $1460 = self.poison;\n                        var $1461 = self.swap_agi;\n                        var self = $1458;\n                        switch (self._) {\n                            case 'Pair.new':\n                                var _new_eff$23 = Mons$Effect$new$($1454, $1455, $1456, $1457, Pair$new$(Bool$true, Bool$true), $1459, $1460, $1461);\n                                var $1463 = Mons$Object$set_eff$(_new_eff$23, _obj$1);\n                                var $1462 = $1463;\n                                break;\n                        };\n                        var $1453 = $1462;\n                        break;\n                };\n                var $1451 = $1453;\n                break;\n        };\n        return $1451;\n    };\n    const Mons$Effect$set_invulnerable = x0 => Mons$Effect$set_invulnerable$(x0);\n\n    function Mons$Skill$invulnerable_eff$(_obj$1, _pos$2, _idx$3, _game$4) {\n        var _obj_updated$5 = Mons$Effect$set_invulnerable$(Mons$Object$get_current_mon$(_obj$1));\n        var $1464 = Mons$Skill$update_mon_obj$(_obj$1, _obj_updated$5, _pos$2, _idx$3, _game$4);\n        return $1464;\n    };\n    const Mons$Skill$invulnerable_eff = x0 => x1 => x2 => x3 => Mons$Skill$invulnerable_eff$(x0, x1, x2, x3);\n\n    function Mons$Effect$set_hit$(_obj$1, _val$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1466 = self.eff;\n                var self = $1466;\n                switch (self._) {\n                    case 'Mons.Effect.new':\n                        var $1468 = self.sleep;\n                        var $1469 = self.burn;\n                        var $1470 = self.protect;\n                        var $1471 = self.minimize;\n                        var $1472 = self.invulnerable;\n                        var $1473 = self.poison;\n                        var $1474 = self.swap_agi;\n                        var _new_eff$22 = Mons$Effect$new$($1468, $1469, $1470, $1471, $1472, _val$2, $1473, $1474);\n                        var $1475 = Mons$Object$set_eff$(_new_eff$22, _obj$1);\n                        var $1467 = $1475;\n                        break;\n                };\n                var $1465 = $1467;\n                break;\n        };\n        return $1465;\n    };\n    const Mons$Effect$set_hit = x0 => x1 => Mons$Effect$set_hit$(x0, x1);\n\n    function Mons$Skill$hit_next_eff$(_obj$1, _val$2, _pos$3, _idx$4, _game$5) {\n        var _obj_updated$6 = Mons$Effect$set_hit$(Mons$Object$get_current_mon$(_obj$1), _val$2);\n        var $1476 = Mons$Skill$update_mon_obj$(_obj$1, _obj_updated$6, _pos$3, _idx$4, _game$5);\n        return $1476;\n    };\n    const Mons$Skill$hit_next_eff = x0 => x1 => x2 => x3 => x4 => Mons$Skill$hit_next_eff$(x0, x1, x2, x3, x4);\n\n    function Mons$Effect$set_burn$(_obj$1, _turns$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1478 = self.eff;\n                var self = $1478;\n                switch (self._) {\n                    case 'Mons.Effect.new':\n                        var $1480 = self.sleep;\n                        var $1481 = self.protect;\n                        var $1482 = self.minimize;\n                        var $1483 = self.invulnerable;\n                        var $1484 = self.hit;\n                        var $1485 = self.poison;\n                        var $1486 = self.swap_agi;\n                        var _new_eff$22 = Mons$Effect$new$($1480, _turns$2, $1481, $1482, $1483, $1484, $1485, $1486);\n                        var $1487 = Mons$Object$set_eff$(_new_eff$22, _obj$1);\n                        var $1479 = $1487;\n                        break;\n                };\n                var $1477 = $1479;\n                break;\n        };\n        return $1477;\n    };\n    const Mons$Effect$set_burn = x0 => x1 => Mons$Effect$set_burn$(x0, x1);\n\n    function Mons$Skill$burn_eff$(_obj$1, _pos$2, _idx$3, _turns$4, _game$5) {\n        var _obj_updated$6 = Mons$Effect$set_burn$(Mons$Object$get_current_mon$(_obj$1), _turns$4);\n        var $1488 = Mons$Skill$update_mon_obj$(_obj$1, _obj_updated$6, _pos$2, _idx$3, _game$5);\n        return $1488;\n    };\n    const Mons$Skill$burn_eff = x0 => x1 => x2 => x3 => x4 => Mons$Skill$burn_eff$(x0, x1, x2, x3, x4);\n\n    function Mons$Effect$set_protect$(_obj$1, _turn$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1490 = self.eff;\n                var self = $1490;\n                switch (self._) {\n                    case 'Mons.Effect.new':\n                        var $1492 = self.sleep;\n                        var $1493 = self.burn;\n                        var $1494 = self.minimize;\n                        var $1495 = self.invulnerable;\n                        var $1496 = self.hit;\n                        var $1497 = self.poison;\n                        var $1498 = self.swap_agi;\n                        var _new_eff$22 = Mons$Effect$new$($1492, $1493, Pair$new$(_turn$2, Bool$true), $1494, $1495, $1496, $1497, $1498);\n                        var $1499 = Mons$Object$set_eff$(_new_eff$22, _obj$1);\n                        var $1491 = $1499;\n                        break;\n                };\n                var $1489 = $1491;\n                break;\n        };\n        return $1489;\n    };\n    const Mons$Effect$set_protect = x0 => x1 => Mons$Effect$set_protect$(x0, x1);\n\n    function Mons$Skill$protect_eff$(_obj$1, _pos$2, _idx$3, _turn$4, _game$5) {\n        var _obj_updated$6 = Mons$Effect$set_protect$(Mons$Object$get_current_mon$(_obj$1), _turn$4);\n        var $1500 = Mons$Skill$update_mon_obj$(_obj$1, _obj_updated$6, _pos$2, _idx$3, _game$5);\n        return $1500;\n    };\n    const Mons$Skill$protect_eff = x0 => x1 => x2 => x3 => x4 => Mons$Skill$protect_eff$(x0, x1, x2, x3, x4);\n\n    function Mons$Effect$set_poison$(_obj$1) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1502 = self.eff;\n                var self = $1502;\n                switch (self._) {\n                    case 'Mons.Effect.new':\n                        var $1504 = self.sleep;\n                        var $1505 = self.burn;\n                        var $1506 = self.protect;\n                        var $1507 = self.minimize;\n                        var $1508 = self.invulnerable;\n                        var $1509 = self.hit;\n                        var $1510 = self.swap_agi;\n                        var _new_eff$21 = Mons$Effect$new$($1504, $1505, $1506, $1507, $1508, $1509, Bool$true, $1510);\n                        var $1511 = Mons$Object$set_eff$(_new_eff$21, _obj$1);\n                        var $1503 = $1511;\n                        break;\n                };\n                var $1501 = $1503;\n                break;\n        };\n        return $1501;\n    };\n    const Mons$Effect$set_poison = x0 => Mons$Effect$set_poison$(x0);\n\n    function Mons$Skill$poison_eff$(_obj$1, _pos$2, _idx$3, _game$4) {\n        var $1512 = Mons$Skill$update_mon_obj$(_obj$1, Mons$Effect$set_poison$(Mons$Object$get_current_mon$(_obj$1)), _pos$2, _idx$3, _game$4);\n        return $1512;\n    };\n    const Mons$Skill$poison_eff = x0 => x1 => x2 => x3 => Mons$Skill$poison_eff$(x0, x1, x2, x3);\n\n    function Mons$Skill$critical_hit$(_mhp$1, _hit_val$2, _perc$3, _tik$4) {\n        var self = ((_tik$4 % _perc$3) === 0);\n        if (self) {\n            var $1514 = ((((_mhp$1 / 16) >>> 0) + _hit_val$2) >>> 0);\n            var $1513 = $1514;\n        } else {\n            var $1515 = _hit_val$2;\n            var $1513 = $1515;\n        };\n        return $1513;\n    };\n    const Mons$Skill$critical_hit = x0 => x1 => x2 => x3 => Mons$Skill$critical_hit$(x0, x1, x2, x3);\n\n    function Mons$Skill$is_critical$(_perc$1, _tik$2) {\n        var $1516 = ((_tik$2 % _perc$1) === 0);\n        return $1516;\n    };\n    const Mons$Skill$is_critical = x0 => x1 => Mons$Skill$is_critical$(x0, x1);\n\n    function Mons$Kind$get_agi$(_kind$1) {\n        var self = _kind$1;\n        switch (self._) {\n            case 'Mons.Kind.Mons':\n                var $1518 = self.agi;\n                var $1519 = $1518;\n                var $1517 = $1519;\n                break;\n            case 'Mons.Kind.Const':\n            case 'Mons.Kind.Terrain':\n            case 'Mons.Kind.Interactive':\n                var $1520 = 3;\n                var $1517 = $1520;\n                break;\n        };\n        return $1517;\n    };\n    const Mons$Kind$get_agi = x0 => Mons$Kind$get_agi$(x0);\n\n    function Mons$Effect$set_minimize$(_obj$1) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1522 = self.eff;\n                var self = $1522;\n                switch (self._) {\n                    case 'Mons.Effect.new':\n                        var $1524 = self.sleep;\n                        var $1525 = self.burn;\n                        var $1526 = self.protect;\n                        var $1527 = self.invulnerable;\n                        var $1528 = self.hit;\n                        var $1529 = self.poison;\n                        var $1530 = self.swap_agi;\n                        var _new_eff$21 = Mons$Effect$new$($1524, $1525, $1526, Pair$new$(2, Bool$true), $1527, $1528, $1529, $1530);\n                        var $1531 = Mons$Object$set_eff$(_new_eff$21, _obj$1);\n                        var $1523 = $1531;\n                        break;\n                };\n                var $1521 = $1523;\n                break;\n        };\n        return $1521;\n    };\n    const Mons$Effect$set_minimize = x0 => Mons$Effect$set_minimize$(x0);\n\n    function Mons$Skill$minimize_eff$(_obj$1, _pos$2, _idx$3, _game$4) {\n        var _obj_updated$5 = Mons$Effect$set_minimize$(Mons$Object$get_current_mon$(_obj$1));\n        var $1532 = Mons$Skill$update_mon_obj$(_obj$1, _obj_updated$5, _pos$2, _idx$3, _game$4);\n        return $1532;\n    };\n    const Mons$Skill$minimize_eff = x0 => x1 => x2 => x3 => Mons$Skill$minimize_eff$(x0, x1, x2, x3);\n\n    function Mons$Effect$set_sleep$(_obj$1, _turn$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1534 = self.eff;\n                var self = $1534;\n                switch (self._) {\n                    case 'Mons.Effect.new':\n                        var $1536 = self.burn;\n                        var $1537 = self.protect;\n                        var $1538 = self.minimize;\n                        var $1539 = self.invulnerable;\n                        var $1540 = self.hit;\n                        var $1541 = self.poison;\n                        var $1542 = self.swap_agi;\n                        var _new_eff$22 = Mons$Effect$new$(Pair$new$(_turn$2, Bool$true), $1536, $1537, $1538, $1539, $1540, $1541, $1542);\n                        var $1543 = Mons$Object$set_eff$(_new_eff$22, _obj$1);\n                        var $1535 = $1543;\n                        break;\n                };\n                var $1533 = $1535;\n                break;\n        };\n        return $1533;\n    };\n    const Mons$Effect$set_sleep = x0 => x1 => Mons$Effect$set_sleep$(x0, x1);\n\n    function Mons$Skill$sleep_eff$(_obj$1, _pos$2, _idx$3, _turn$4, _game$5) {\n        var _obj_updated$6 = Mons$Effect$set_sleep$(Mons$Object$get_current_mon$(_obj$1), _turn$4);\n        var $1544 = Mons$Skill$update_mon_obj$(_obj$1, _obj_updated$6, _pos$2, _idx$3, _game$5);\n        return $1544;\n    };\n    const Mons$Skill$sleep_eff = x0 => x1 => x2 => x3 => x4 => Mons$Skill$sleep_eff$(x0, x1, x2, x3, x4);\n\n    function Mons$Skill$cast$(_pos$1, _source$2, _target$3, _skill$4, _game$5) {\n        var self = _game$5;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $1546 = self.map;\n                var $1547 = self.tik;\n                var _source_obj$11 = Mons$Map$get$(_pos$1, _source$2, $1546);\n                var _source_mon$12 = Mons$Object$get_current_mon$(_source_obj$11);\n                var _target_obj$13 = Mons$Map$get$(_pos$1, _target$3, $1546);\n                var _target_mon$14 = Mons$Object$get_current_mon$(_target_obj$13);\n                var self = _source_mon$12;\n                switch (self._) {\n                    case 'Mons.Object.new':\n                        var $1549 = self.kin;\n                        var $1550 = self.eff;\n                        var self = $1550;\n                        switch (self._) {\n                            case 'Mons.Effect.new':\n                                var $1552 = self.protect;\n                                var self = _target_mon$14;\n                                switch (self._) {\n                                    case 'Mons.Object.new':\n                                        var $1554 = self.kin;\n                                        var $1555 = self.eff;\n                                        var self = $1555;\n                                        switch (self._) {\n                                            case 'Mons.Effect.new':\n                                                var self = Mons$Kind$attr$($1549);\n                                                switch (self._) {\n                                                    case 'Mons.Attr.new':\n                                                        var self = Mons$Kind$attr$($1554);\n                                                        switch (self._) {\n                                                            case 'Mons.Attr.new':\n                                                                var $1559 = self.mhp;\n                                                                var _light_val$73 = 2;\n                                                                var _medium_val$74 = 4;\n                                                                var _high_val$75 = 6;\n                                                                var _can_attack$76 = (!Mons$Effect$has_sleep$($1550));\n                                                                var self = _can_attack$76;\n                                                                if (self) {\n                                                                    var self = _skill$4;\n                                                                    switch (self._) {\n                                                                        case 'Mons.Skill.hit_4':\n                                                                            var _val$77 = Mons$Type$skill_n_type$(_medium_val$74, _source_mon$12, _target_mon$14);\n                                                                            var $1562 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$5);\n                                                                            var $1561 = $1562;\n                                                                            break;\n                                                                        case 'Mons.Skill.hit_2':\n                                                                            var _val$77 = Mons$Type$skill_n_type$(_light_val$73, _source_mon$12, _target_mon$14);\n                                                                            var $1563 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$5);\n                                                                            var $1561 = $1563;\n                                                                            break;\n                                                                        case 'Mons.Skill.heal':\n                                                                            var $1564 = Mons$Skill$heal_eff$(_source_obj$11, _pos$1, _source$2, 3, _game$5);\n                                                                            var $1561 = $1564;\n                                                                            break;\n                                                                        case 'Mons.Skill.none':\n                                                                        case 'Mons.Skill.run':\n                                                                        case 'Mons.Skill.agility':\n                                                                            var $1565 = _game$5;\n                                                                            var $1561 = $1565;\n                                                                            break;\n                                                                        case 'Mons.Skill.dig':\n                                                                            var _game$77 = Mons$Skill$invulnerable_eff$(_source_obj$11, _pos$1, _source$2, _game$5);\n                                                                            var _game$78 = Mons$Skill$hit_next_eff$(_target_obj$13, 3, _pos$1, _target$3, _game$77);\n                                                                            var $1566 = _game$78;\n                                                                            var $1561 = $1566;\n                                                                            break;\n                                                                        case 'Mons.Skill.sand_tomb':\n                                                                            var _game$77 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, Mons$Type$skill_n_type$(_light_val$73, _source_mon$12, _target_mon$14), _game$5);\n                                                                            var _game$78 = Mons$Skill$burn_eff$(_target_obj$13, _pos$1, _target$3, 5, _game$77);\n                                                                            var $1567 = _game$78;\n                                                                            var $1561 = $1567;\n                                                                            break;\n                                                                        case 'Mons.Skill.protect':\n                                                                            var self = Pair$snd$($1552);\n                                                                            if (self) {\n                                                                                var $1569 = _game$5;\n                                                                                var $1568 = $1569;\n                                                                            } else {\n                                                                                var $1570 = Mons$Skill$protect_eff$(_source_obj$11, _pos$1, _source$2, 2, _game$5);\n                                                                                var $1568 = $1570;\n                                                                            };\n                                                                            var $1561 = $1568;\n                                                                            break;\n                                                                        case 'Mons.Skill.slam':\n                                                                        case 'Mons.Skill.wing_attack':\n                                                                        case 'Mons.Skill.thunder_wave':\n                                                                            var _val$77 = Mons$Type$skill_n_type$(_high_val$75, _source_mon$12, _target_mon$14);\n                                                                            var $1571 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$5);\n                                                                            var $1561 = $1571;\n                                                                            break;\n                                                                        case 'Mons.Skill.counter':\n                                                                            var _game$77 = Mons$Skill$heal_eff$(_source_obj$11, _pos$1, _source$2, _light_val$73, _game$5);\n                                                                            var $1572 = Mons$Skill$burn_eff$(_target_obj$13, _pos$1, _target$3, 5, _game$77);\n                                                                            var $1561 = $1572;\n                                                                            break;\n                                                                        case 'Mons.Skill.recover':\n                                                                            var _val$77 = ((Mons$Object$remaining_hp$(_source_mon$12) / 4) >>> 0);\n                                                                            var _game$78 = Mons$Skill$poison_eff$(_source_obj$11, _pos$1, _source$2, _game$5);\n                                                                            var $1573 = Mons$Skill$heal_eff$(_source_obj$11, _pos$1, _source$2, _val$77, _game$78);\n                                                                            var $1561 = $1573;\n                                                                            break;\n                                                                        case 'Mons.Skill.rock_smash':\n                                                                            var _val$77 = Mons$Skill$critical_hit$($1559, _light_val$73, 2, $1547);\n                                                                            var _game$78 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$5);\n                                                                            var $1574 = _game$78;\n                                                                            var $1561 = $1574;\n                                                                            break;\n                                                                        case 'Mons.Skill.crunch':\n                                                                            var _val$77 = Mons$Skill$critical_hit$($1559, _medium_val$74, 4, $1547);\n                                                                            var _game$78 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$5);\n                                                                            var $1575 = _game$78;\n                                                                            var $1561 = $1575;\n                                                                            break;\n                                                                        case 'Mons.Skill.sludge_bomb':\n                                                                            var _val$77 = Mons$Type$skill_n_type$(_light_val$73, _source_mon$12, _target_mon$14);\n                                                                            var _game$78 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$5);\n                                                                            var self = Mons$Skill$is_critical$(3, $1547);\n                                                                            if (self) {\n                                                                                var $1577 = Mons$Skill$poison_eff$(_target_obj$13, _pos$1, _target$3, _game$78);\n                                                                                var $1576 = $1577;\n                                                                            } else {\n                                                                                var $1578 = _game$78;\n                                                                                var $1576 = $1578;\n                                                                            };\n                                                                            var $1561 = $1576;\n                                                                            break;\n                                                                        case 'Mons.Skill.gyro_ball':\n                                                                            var _val$77 = Mons$Type$skill_n_type$(_medium_val$74, _source_mon$12, _target_mon$14);\n                                                                            var self = (Mons$Kind$get_agi$($1554) > Mons$Kind$get_agi$($1549));\n                                                                            if (self) {\n                                                                                var $1580 = ((((_val$77 / 2) >>> 0) + _val$77) >>> 0);\n                                                                                var _val$78 = $1580;\n                                                                            } else {\n                                                                                var $1581 = _val$77;\n                                                                                var _val$78 = $1581;\n                                                                            };\n                                                                            var _game$79 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$78, _game$5);\n                                                                            var $1579 = _game$79;\n                                                                            var $1561 = $1579;\n                                                                            break;\n                                                                        case 'Mons.Skill.iron_defense':\n                                                                            var $1582 = Mons$Skill$minimize_eff$(_source_obj$11, _pos$1, _source$2, _game$5);\n                                                                            var $1561 = $1582;\n                                                                            break;\n                                                                        case 'Mons.Skill.super_fang':\n                                                                            var _adve_dmg$77 = ((Mons$Object$remaining_hp$(_source_mon$12) / 4) >>> 0);\n                                                                            var _game$78 = Mons$Skill$burn_eff$(_source_obj$11, _pos$1, _target$3, 2, _game$5);\n                                                                            var _game$79 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _adve_dmg$77, _game$78);\n                                                                            var $1583 = _game$79;\n                                                                            var $1561 = $1583;\n                                                                            break;\n                                                                        case 'Mons.Skill.hypnosis':\n                                                                            var self = (Mons$Skill$is_critical$(2, $1547) && Mons$Effect$has_sleep$($1555));\n                                                                            if (self) {\n                                                                                var $1585 = Mons$Skill$sleep_eff$(_target_obj$13, _pos$1, _target$3, 2, _game$5);\n                                                                                var $1584 = $1585;\n                                                                            } else {\n                                                                                var $1586 = _game$5;\n                                                                                var $1584 = $1586;\n                                                                            };\n                                                                            var $1561 = $1584;\n                                                                            break;\n                                                                        case 'Mons.Skill.dream_eater':\n                                                                            var self = Mons$Effect$has_sleep$($1555);\n                                                                            if (self) {\n                                                                                var _val$77 = Mons$Type$skill_n_type$(_high_val$75, _source_mon$12, _target_mon$14);\n                                                                                var _game$78 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$5);\n                                                                                var $1588 = Mons$Skill$heal_eff$(_source_obj$11, _pos$1, _source$2, _val$77, _game$78);\n                                                                                var $1587 = $1588;\n                                                                            } else {\n                                                                                var $1589 = _game$5;\n                                                                                var $1587 = $1589;\n                                                                            };\n                                                                            var $1561 = $1587;\n                                                                            break;\n                                                                        case 'Mons.Skill.moonlight':\n                                                                            var _val$77 = Mons$Type$skill_n_type$(_medium_val$74, _source_mon$12, _target_mon$14);\n                                                                            var self = Mons$Skill$is_critical$(5, $1547);\n                                                                            if (self) {\n                                                                                var _game$78 = Mons$Skill$sleep_eff$(_target_obj$13, _pos$1, _target$3, 2, _game$5);\n                                                                                var $1591 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$78);\n                                                                                var $1590 = $1591;\n                                                                            } else {\n                                                                                var $1592 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$5);\n                                                                                var $1590 = $1592;\n                                                                            };\n                                                                            var $1561 = $1590;\n                                                                            break;\n                                                                        case 'Mons.Skill.play_rough':\n                                                                            var _val$77 = Mons$Skill$critical_hit$($1559, _medium_val$74, 5, $1547);\n                                                                            var $1593 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$5);\n                                                                            var $1561 = $1593;\n                                                                            break;\n                                                                        case 'Mons.Skill.psychic':\n                                                                            var _val$77 = Mons$Type$skill_n_type$(_light_val$73, _source_mon$12, _target_mon$14);\n                                                                            var self = Mons$Skill$is_critical$(10, $1547);\n                                                                            if (self) {\n                                                                                var _game$78 = Mons$Skill$sleep_eff$(_target_obj$13, _pos$1, _target$3, 1, _game$5);\n                                                                                var _game$79 = Mons$Skill$hit_next_eff$(_target_obj$13, 3, _pos$1, _target$3, _game$78);\n                                                                                var $1595 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$79);\n                                                                                var $1594 = $1595;\n                                                                            } else {\n                                                                                var $1596 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$5);\n                                                                                var $1594 = $1596;\n                                                                            };\n                                                                            var $1561 = $1594;\n                                                                            break;\n                                                                        case 'Mons.Skill.ancient_power':\n                                                                            var _val$77 = Mons$Type$skill_n_type$(_medium_val$74, _source_mon$12, _target_mon$14);\n                                                                            var self = Mons$Skill$is_critical$(10, $1547);\n                                                                            if (self) {\n                                                                                var _game$78 = Mons$Skill$sleep_eff$(_target_obj$13, _pos$1, _target$3, 1, _game$5);\n                                                                                var $1598 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$78);\n                                                                                var $1597 = $1598;\n                                                                            } else {\n                                                                                var $1599 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$5);\n                                                                                var $1597 = $1599;\n                                                                            };\n                                                                            var $1561 = $1597;\n                                                                            break;\n                                                                        case 'Mons.Skill.charge':\n                                                                            var _val$77 = Mons$Type$skill_n_type$(_medium_val$74, _source_mon$12, _target_mon$14);\n                                                                            var self = Mons$Effect$has_minimize$($1555);\n                                                                            if (self) {\n                                                                                var $1601 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, ((_val$77 * 2) >>> 0), _game$5);\n                                                                                var $1600 = $1601;\n                                                                            } else {\n                                                                                var $1602 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$5);\n                                                                                var $1600 = $1602;\n                                                                            };\n                                                                            var $1561 = $1600;\n                                                                            break;\n                                                                        case 'Mons.Skill.hero_kill':\n                                                                            var $1603 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, 40, _game$5);\n                                                                            var $1561 = $1603;\n                                                                            break;\n                                                                        case 'Mons.Skill.nightmare':\n                                                                            var self = Mons$Effect$has_sleep$($1555);\n                                                                            if (self) {\n                                                                                var _hp$77 = Mons$Object$remaining_hp$(_target_mon$14);\n                                                                                var $1605 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, ((_hp$77 / 5) >>> 0), _game$5);\n                                                                                var $1604 = $1605;\n                                                                            } else {\n                                                                                var $1606 = _game$5;\n                                                                                var $1604 = $1606;\n                                                                            };\n                                                                            var $1561 = $1604;\n                                                                            break;\n                                                                    };\n                                                                    var $1560 = $1561;\n                                                                } else {\n                                                                    var $1607 = _game$5;\n                                                                    var $1560 = $1607;\n                                                                };\n                                                                var $1558 = $1560;\n                                                                break;\n                                                        };\n                                                        var $1557 = $1558;\n                                                        break;\n                                                };\n                                                var $1556 = $1557;\n                                                break;\n                                        };\n                                        var $1553 = $1556;\n                                        break;\n                                };\n                                var $1551 = $1553;\n                                break;\n                        };\n                        var $1548 = $1551;\n                        break;\n                };\n                var $1545 = $1548;\n                break;\n        };\n        return $1545;\n    };\n    const Mons$Skill$cast = x0 => x1 => x2 => x3 => x4 => Mons$Skill$cast$(x0, x1, x2, x3, x4);\n    const Mons$Skill$run = ({\n        _: 'Mons.Skill.run'\n    });\n\n    function Mons$Game$hero_start_attacking$(_hero_kin$1, _adve_kin$2) {\n        var _hero_agi$3 = Mons$Kind$get_agi$(_hero_kin$1);\n        var _adve_agi$4 = Mons$Kind$get_agi$(_adve_kin$2);\n        var $1608 = ((_hero_agi$3 < _adve_agi$4) || (_hero_agi$3 === _adve_agi$4));\n        return $1608;\n    };\n    const Mons$Game$hero_start_attacking = x0 => x1 => Mons$Game$hero_start_attacking$(x0, x1);\n\n    function Mons$Game$exec_turn$(_hero_obj$1, _adve_obj$2, _pos$3, _hero_idx$4, _adve_idx$5, _code_skill$6, _turn$7, _game$8) {\n        var self = _game$8;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var _hero_mon_obj$14 = Mons$Object$get_current_mon$(_hero_obj$1);\n                var self = _hero_mon_obj$14;\n                switch (self._) {\n                    case 'Mons.Object.new':\n                        var $1611 = self.kin;\n                        var self = _adve_obj$2;\n                        switch (self._) {\n                            case 'Mons.Object.new':\n                                var $1613 = self.kin;\n                                var _hero_skill$37 = Mons$Game$get_skills_at$(_code_skill$6, _hero_mon_obj$14);\n                                var _adve_skill_code$38 = Mons$Game$adve_turn$(_hero_obj$1, _adve_obj$2, _game$8);\n                                var _adve_skill$39 = Mons$Game$get_skills_at$(_adve_skill_code$38, _adve_obj$2);\n                                var self = (!Mons$Turn$is_active$(_turn$7));\n                                if (self) {\n                                    var _game$40 = Mons$Skill$apply_inital_eff$(_hero_idx$4, _adve_idx$5, _pos$3, _game$8);\n                                    var self = (_code_skill$6 === 4n);\n                                    if (self) {\n                                        var _game$41 = Mons$Skill$cast$(_pos$3, _adve_idx$5, _hero_idx$4, _adve_skill$39, _game$40);\n                                        var _game$42 = Mons$Skill$cast$(_pos$3, _hero_idx$4, _adve_idx$5, Mons$Skill$run, _game$41);\n                                        var _turn$43 = Mons$Turn$new$(Bool$true, Mons$Skill$run, _adve_skill$39, 5);\n                                        var $1616 = Mons$Game$set_stt$(Mons$Screen$game$(46, _turn$43), _game$42);\n                                        var $1615 = $1616;\n                                    } else {\n                                        var self = Mons$Game$hero_start_attacking$($1611, $1613);\n                                        if (self) {\n                                            var _game$41 = Mons$Skill$cast$(_pos$3, _hero_idx$4, _adve_idx$5, _hero_skill$37, _game$40);\n                                            var _game$42 = Mons$Skill$cast$(_pos$3, _adve_idx$5, _hero_idx$4, _adve_skill$39, _game$41);\n                                            var _turn$43 = Mons$Turn$new$(Bool$true, _hero_skill$37, _adve_skill$39, 2);\n                                            var $1618 = Mons$Game$set_stt$(Mons$Screen$game$(46, _turn$43), _game$42);\n                                            var $1617 = $1618;\n                                        } else {\n                                            var _game$41 = Mons$Skill$cast$(_pos$3, _adve_idx$5, _hero_idx$4, _adve_skill$39, _game$40);\n                                            var _game$42 = Mons$Skill$cast$(_pos$3, _hero_idx$4, _adve_idx$5, _hero_skill$37, _game$41);\n                                            var _turn$43 = Mons$Turn$new$(Bool$false, _hero_skill$37, _adve_skill$39, 2);\n                                            var $1619 = Mons$Game$set_stt$(Mons$Screen$game$(46, _turn$43), _game$42);\n                                            var $1617 = $1619;\n                                        };\n                                        var $1615 = $1617;\n                                    };\n                                    var $1614 = $1615;\n                                } else {\n                                    var $1620 = _game$8;\n                                    var $1614 = $1620;\n                                };\n                                var $1612 = $1614;\n                                break;\n                        };\n                        var $1610 = $1612;\n                        break;\n                };\n                var $1609 = $1610;\n                break;\n        };\n        return $1609;\n    };\n    const Mons$Game$exec_turn = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Mons$Game$exec_turn$(x0, x1, x2, x3, x4, x5, x6, x7);\n\n    function Mons$Kind$is_mon_area$(_adve_kin$1) {\n        var self = _adve_kin$1;\n        switch (self._) {\n            case 'Mons.Kind.Terrain':\n                var $1622 = self.ele;\n                var self = $1622;\n                switch (self._) {\n                    case 'Mons.Kind.terrain.VOID':\n                    case 'Mons.Kind.terrain.VOID_BLACK':\n                    case 'Mons.Kind.terrain.FLOOR':\n                    case 'Mons.Kind.terrain.GRASS_PLANT':\n                    case 'Mons.Kind.terrain.BUSH':\n                    case 'Mons.Kind.terrain.PLANT_0':\n                    case 'Mons.Kind.terrain.SAND_0':\n                    case 'Mons.Kind.terrain.PATH_BLOCKER':\n                    case 'Mons.Kind.terrain.MID_CITY':\n                    case 'Mons.Kind.terrain.STAIRS':\n                        var $1624 = Bool$false;\n                        var $1623 = $1624;\n                        break;\n                    case 'Mons.Kind.terrain.MON_AREA':\n                        var $1625 = Bool$true;\n                        var $1623 = $1625;\n                        break;\n                };\n                var $1621 = $1623;\n                break;\n            case 'Mons.Kind.Mons':\n            case 'Mons.Kind.Const':\n            case 'Mons.Kind.Interactive':\n                var $1626 = Bool$false;\n                var $1621 = $1626;\n                break;\n        };\n        return $1621;\n    };\n    const Mons$Kind$is_mon_area = x0 => Mons$Kind$is_mon_area$(x0);\n\n    function Mons$Kind$area_mon_pos$(_adve_kin$1, _hero_pos$2) {\n        var self = _adve_kin$1;\n        switch (self._) {\n            case 'Mons.Kind.Terrain':\n                var $1628 = self.ele;\n                var self = $1628;\n                switch (self._) {\n                    case 'Mons.Kind.terrain.MON_AREA':\n                        var $1630 = self.pos_mon;\n                        var $1631 = $1630;\n                        var $1629 = $1631;\n                        break;\n                    case 'Mons.Kind.terrain.VOID':\n                    case 'Mons.Kind.terrain.VOID_BLACK':\n                    case 'Mons.Kind.terrain.FLOOR':\n                    case 'Mons.Kind.terrain.GRASS_PLANT':\n                    case 'Mons.Kind.terrain.BUSH':\n                    case 'Mons.Kind.terrain.PLANT_0':\n                    case 'Mons.Kind.terrain.SAND_0':\n                    case 'Mons.Kind.terrain.PATH_BLOCKER':\n                    case 'Mons.Kind.terrain.MID_CITY':\n                    case 'Mons.Kind.terrain.STAIRS':\n                        var $1632 = _hero_pos$2;\n                        var $1629 = $1632;\n                        break;\n                };\n                var $1627 = $1629;\n                break;\n            case 'Mons.Kind.Mons':\n            case 'Mons.Kind.Const':\n            case 'Mons.Kind.Interactive':\n                var $1633 = _hero_pos$2;\n                var $1627 = $1633;\n                break;\n        };\n        return $1627;\n    };\n    const Mons$Kind$area_mon_pos = x0 => x1 => Mons$Kind$area_mon_pos$(x0, x1);\n\n    function Mons$Screen$inventory$(_idx$1) {\n        var $1634 = ({\n            _: 'Mons.Screen.inventory',\n            'idx': _idx$1\n        });\n        return $1634;\n    };\n    const Mons$Screen$inventory = x0 => Mons$Screen$inventory$(x0);\n\n    function Mons$Skill$clear_after_battle$(_hero_idx$1, _adve_idx$2, _pos$3, _game$4) {\n        var self = _game$4;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $1636 = self.map;\n                var _hero_obj$10 = Mons$Map$get$(_pos$3, _hero_idx$1, $1636);\n                var _hero_mon_obj$11 = Mons$Object$get_current_mon$(_hero_obj$10);\n                var _adve_obj$12 = Mons$Map$get$(_pos$3, _adve_idx$2, $1636);\n                var _hero_mon_obj$13 = Mons$Object$set_eff$(Mons$Effect$clear, _hero_mon_obj$11);\n                var _game$14 = Mons$Skill$update_mon_obj$(_hero_obj$10, _hero_mon_obj$13, _pos$3, _hero_idx$1, _game$4);\n                var _adve_obj$15 = Mons$Object$set_eff$(Mons$Effect$clear, _adve_obj$12);\n                var _game$16 = Mons$Skill$update_mon_obj$(_adve_obj$15, _adve_obj$15, _pos$3, _adve_idx$2, _game$14);\n                var $1637 = _game$16;\n                var $1635 = $1637;\n                break;\n        };\n        return $1635;\n    };\n    const Mons$Skill$clear_after_battle = x0 => x1 => x2 => x3 => Mons$Skill$clear_after_battle$(x0, x1, x2, x3);\n\n    function Mons$Object$set_cap$(_cap$1, _obj$2) {\n        var self = _obj$2;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1639 = self.kin;\n                var $1640 = self.dir;\n                var $1641 = self.pad;\n                var $1642 = self.ani;\n                var $1643 = self.dmg;\n                var $1644 = self.bag;\n                var $1645 = self.mon;\n                var $1646 = self.bos;\n                var $1647 = self.idl;\n                var $1648 = self.eff;\n                var $1649 = Mons$Object$new$($1639, $1640, $1641, $1642, $1643, $1644, $1645, $1646, _cap$1, $1647, $1648);\n                var $1638 = $1649;\n                break;\n        };\n        return $1638;\n    };\n    const Mons$Object$set_cap = x0 => x1 => Mons$Object$set_cap$(x0, x1);\n\n    function Mons$Object$add_defeated_mon$(_obj$1, _hero$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1651 = self.kin;\n                var self = _hero$2;\n                switch (self._) {\n                    case 'Mons.Object.new':\n                        var $1653 = self.cap;\n                        var self = $1651;\n                        switch (self._) {\n                            case 'Mons.Kind.Mons':\n                                var _qtd_mons$29 = Pair$fst$($1653);\n                                var _mons_defeated$30 = Pair$snd$($1653);\n                                var _new_cap$31 = Pair$new$(_qtd_mons$29, List$append$(_mons_defeated$30, _obj$1));\n                                var $1655 = Mons$Object$set_cap$(_new_cap$31, _hero$2);\n                                var $1654 = $1655;\n                                break;\n                            case 'Mons.Kind.Const':\n                            case 'Mons.Kind.Terrain':\n                            case 'Mons.Kind.Interactive':\n                                var $1656 = _hero$2;\n                                var $1654 = $1656;\n                                break;\n                        };\n                        var $1652 = $1654;\n                        break;\n                };\n                var $1650 = $1652;\n                break;\n        };\n        return $1650;\n    };\n    const Mons$Object$add_defeated_mon = x0 => x1 => Mons$Object$add_defeated_mon$(x0, x1);\n\n    function Mons$Object$set_bos$(_bos$1, _obj$2) {\n        var self = _obj$2;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1658 = self.kin;\n                var $1659 = self.dir;\n                var $1660 = self.pad;\n                var $1661 = self.ani;\n                var $1662 = self.dmg;\n                var $1663 = self.bag;\n                var $1664 = self.mon;\n                var $1665 = self.cap;\n                var $1666 = self.idl;\n                var $1667 = self.eff;\n                var $1668 = Mons$Object$new$($1658, $1659, $1660, $1661, $1662, $1663, $1664, _bos$1, $1665, $1666, $1667);\n                var $1657 = $1668;\n                break;\n        };\n        return $1657;\n    };\n    const Mons$Object$set_bos = x0 => x1 => Mons$Object$set_bos$(x0, x1);\n\n    function Mons$Object$capture_boss$(_boss$1, _hero$2) {\n        var self = _boss$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1670 = self.kin;\n                var self = _hero$2;\n                switch (self._) {\n                    case 'Mons.Object.new':\n                        var $1672 = self.bos;\n                        var self = $1670;\n                        switch (self._) {\n                            case 'Mons.Kind.Mons':\n                                var _new_boss_bag$29 = List$append$($1672, _boss$1);\n                                var $1674 = Mons$Object$set_bos$(_new_boss_bag$29, _hero$2);\n                                var $1673 = $1674;\n                                break;\n                            case 'Mons.Kind.Const':\n                            case 'Mons.Kind.Terrain':\n                            case 'Mons.Kind.Interactive':\n                                var $1675 = _hero$2;\n                                var $1673 = $1675;\n                                break;\n                        };\n                        var $1671 = $1673;\n                        break;\n                };\n                var $1669 = $1671;\n                break;\n        };\n        return $1669;\n    };\n    const Mons$Object$capture_boss = x0 => x1 => Mons$Object$capture_boss$(x0, x1);\n\n    function Mons$Game$delete_adve_obj$(_adve_obj$1, _hero_obj$2, _pos$3, _hero_idx$4, _adve_idx$5, _game$6) {\n        var _game$7 = Mons$Game$map_del$(_pos$3, _adve_idx$5, _game$6);\n        var _game$8 = Mons$Game$map_set$(_pos$3, _hero_idx$4, _hero_obj$2, _game$7);\n        var $1676 = Mons$Game$set_stt$(Mons$Screen$game$(46, Mons$Turn$empty), _game$8);\n        return $1676;\n    };\n    const Mons$Game$delete_adve_obj = x0 => x1 => x2 => x3 => x4 => x5 => Mons$Game$delete_adve_obj$(x0, x1, x2, x3, x4, x5);\n\n    function Mons$Object$is_full_bag$(_obj$1) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1678 = self.bag;\n                var _len$13 = (list_length($1678));\n                var $1679 = (_len$13 === 3n);\n                var $1677 = $1679;\n                break;\n        };\n        return $1677;\n    };\n    const Mons$Object$is_full_bag = x0 => Mons$Object$is_full_bag$(x0);\n\n    function Mons$Screen$capture_mon$(_idx$1, _full_bag$2) {\n        var $1680 = ({\n            _: 'Mons.Screen.capture_mon',\n            'idx': _idx$1,\n            'full_bag': _full_bag$2\n        });\n        return $1680;\n    };\n    const Mons$Screen$capture_mon = x0 => x1 => Mons$Screen$capture_mon$(x0, x1);\n\n    function Mons$Kind$get_pos$(_kin$1) {\n        var self = Mons$Kind$attr$(_kin$1);\n        switch (self._) {\n            case 'Mons.Attr.new':\n                var $1682 = self.pos;\n                var $1683 = $1682;\n                var $1681 = $1683;\n                break;\n        };\n        return $1681;\n    };\n    const Mons$Kind$get_pos = x0 => Mons$Kind$get_pos$(x0);\n\n    function Mons$Game$add_mon$(_kind_mon$1, _agi$2, _type$3, _game$4) {\n        var $1684 = Mons$Game$move_obj$(Mons$global_scr_mid, 0, Mons$Kind$get_pos$(Mons$Kind$Mons$(_kind_mon$1, Bool$false, _type$3, _agi$2)), Mons$Object$new_of_kind$(Mons$Kind$Mons$(_kind_mon$1, Bool$false, _type$3, _agi$2)), _game$4);\n        return $1684;\n    };\n    const Mons$Game$add_mon = x0 => x1 => x2 => x3 => Mons$Game$add_mon$(x0, x1, x2, x3);\n\n    function List$delete_at$(_idx$2, _list$3) {\n        var self = _idx$2;\n        if (self === 0n) {\n            var $1686 = List$tail$(_list$3);\n            var $1685 = $1686;\n        } else {\n            var $1687 = (self - 1n);\n            var self = _list$3;\n            switch (self._) {\n                case 'List.cons':\n                    var $1689 = self.head;\n                    var $1690 = self.tail;\n                    var $1691 = List$cons$($1689, List$delete_at$($1687, $1690));\n                    var $1688 = $1691;\n                    break;\n                case 'List.nil':\n                    var $1692 = _list$3;\n                    var $1688 = $1692;\n                    break;\n            };\n            var $1685 = $1688;\n        };\n        return $1685;\n    };\n    const List$delete_at = x0 => x1 => List$delete_at$(x0, x1);\n\n    function Mons$Object$delete_from_bag$(_idx$1, _hero_obj$2) {\n        var _idx_nat$3 = U32$to_nat$(_idx$1);\n        var self = _hero_obj$2;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1694 = self.bag;\n                var _qtd$15 = (list_length($1694));\n                var self = (_qtd$15 === 0n);\n                if (self) {\n                    var $1696 = _hero_obj$2;\n                    var $1695 = $1696;\n                } else {\n                    var _new_bag$16 = List$delete_at$(_idx_nat$3, $1694);\n                    var _hero_obj$17 = Mons$Object$set_bag$(_new_bag$16, _hero_obj$2);\n                    var $1697 = Mons$Object$set_mon$(0, _hero_obj$17);\n                    var $1695 = $1697;\n                };\n                var $1693 = $1695;\n                break;\n        };\n        return $1693;\n    };\n    const Mons$Object$delete_from_bag = x0 => x1 => Mons$Object$delete_from_bag$(x0, x1);\n    const Mons$Screen$game_over = ({\n        _: 'Mons.Screen.game_over'\n    });\n\n    function Mons$Turn$is_last_player_move$(_turn$1) {\n        var self = _turn$1;\n        switch (self._) {\n            case 'Mons.Turn.new':\n                var $1699 = self.play;\n                var $1700 = ($1699 === 1);\n                var $1698 = $1700;\n                break;\n        };\n        return $1698;\n    };\n    const Mons$Turn$is_last_player_move = x0 => Mons$Turn$is_last_player_move$(x0);\n\n    function Mons$Turn$hero_run$(_turn$1) {\n        var self = _turn$1;\n        switch (self._) {\n            case 'Mons.Turn.new':\n                var $1702 = self.play;\n                var $1703 = ($1702 === 5);\n                var $1701 = $1703;\n                break;\n        };\n        return $1701;\n    };\n    const Mons$Turn$hero_run = x0 => Mons$Turn$hero_run$(x0);\n\n    function Mons$Effect$upd_end_turn_eff$(_eff$1) {\n        var self = _eff$1;\n        switch (self._) {\n            case 'Mons.Effect.new':\n                var $1705 = self.sleep;\n                var $1706 = self.burn;\n                var $1707 = self.protect;\n                var $1708 = self.minimize;\n                var $1709 = self.invulnerable;\n                var $1710 = self.hit;\n                var $1711 = self.poison;\n                var $1712 = self.swap_agi;\n                var _sleep_turn$10 = Pair$fst$($1705);\n                var _protect_turn$11 = Pair$fst$($1707);\n                var _minimize_turn$12 = Pair$fst$($1708);\n                var _invulnerable$13 = Pair$fst$($1709);\n                var _update_turn_counter$14 = (_val$14 => {\n                    var $1714 = Pair$new$((Math.max(_val$14 - 1, 0)), (_val$14 === 2));\n                    return $1714;\n                });\n                var $1713 = Mons$Effect$new$(_update_turn_counter$14(_sleep_turn$10), $1706, _update_turn_counter$14(_protect_turn$11), _update_turn_counter$14(_minimize_turn$12), (() => {\n                    var self = _invulnerable$13;\n                    if (self) {\n                        var $1715 = Pair$new$(Bool$false, Bool$true);\n                        return $1715;\n                    } else {\n                        var $1716 = Pair$new$(Bool$false, Bool$false);\n                        return $1716;\n                    };\n                })(), $1710, $1711, $1712);\n                var $1704 = $1713;\n                break;\n        };\n        return $1704;\n    };\n    const Mons$Effect$upd_end_turn_eff = x0 => Mons$Effect$upd_end_turn_eff$(x0);\n\n    function Mons$Skill$apply_end_turn_eff$(_hero_idx$1, _adve_idx$2, _pos$3, _game$4) {\n        var self = _game$4;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $1718 = self.map;\n                var _hero_obj$10 = Mons$Map$get$(_pos$3, _hero_idx$1, $1718);\n                var _hero_mon_obj$11 = Mons$Object$get_current_mon$(_hero_obj$10);\n                var _adve_obj$12 = Mons$Map$get$(_pos$3, _adve_idx$2, $1718);\n                var self = _hero_mon_obj$11;\n                switch (self._) {\n                    case 'Mons.Object.new':\n                        var $1720 = self.eff;\n                        var _eff_upd$24 = Mons$Effect$upd_end_turn_eff$($1720);\n                        var _hero_mon_obj$25 = Mons$Object$set_eff$(_eff_upd$24, _hero_mon_obj$11);\n                        var _game$26 = Mons$Skill$update_mon_obj$(_hero_obj$10, _hero_mon_obj$25, _pos$3, _hero_idx$1, _game$4);\n                        var self = _adve_obj$12;\n                        switch (self._) {\n                            case 'Mons.Object.new':\n                                var $1722 = self.eff;\n                                var _upd_effect$38 = Mons$Effect$upd_end_turn_eff$($1722);\n                                var _adve_obj$39 = Mons$Object$set_eff$(_upd_effect$38, _adve_obj$12);\n                                var _game$40 = Mons$Game$map_set$(_pos$3, _adve_idx$2, _adve_obj$39, _game$26);\n                                var $1723 = _game$40;\n                                var $1721 = $1723;\n                                break;\n                        };\n                        var $1719 = $1721;\n                        break;\n                };\n                var $1717 = $1719;\n                break;\n        };\n        return $1717;\n    };\n    const Mons$Skill$apply_end_turn_eff = x0 => x1 => x2 => x3 => Mons$Skill$apply_end_turn_eff$(x0, x1, x2, x3);\n\n    function Mons$Game$move_hero_down$(_usr$1, _hero_obj$2, _pos$3, _hero_idx$4, _game$5) {\n        var _y$6 = (((_pos$3 >>> 12) & 0xFFF));\n        var _x$7 = ((_pos$3 & 0xFFF));\n        var _z$8 = ((_pos$3 >>> 24));\n        var _new_pos$9 = ((0 | _x$7 | (((_y$6 + 1) >>> 0) << 12) | (_z$8 << 24)));\n        var _game$10 = Mons$Game$move_obj$(_pos$3, _hero_idx$4, _new_pos$9, _hero_obj$2, _game$5);\n        var $1724 = Mons$Game$set_user_pos$(_usr$1, _new_pos$9, _game$10);\n        return $1724;\n    };\n    const Mons$Game$move_hero_down = x0 => x1 => x2 => x3 => x4 => Mons$Game$move_hero_down$(x0, x1, x2, x3, x4);\n    const Mons$Kind$mons$ZOIO = ({\n        _: 'Mons.Kind.mons.ZOIO'\n    });\n    const Mons$Kind$mons$MIMIC = ({\n        _: 'Mons.Kind.mons.MIMIC'\n    });\n    const Mons$Kind$mons$MIMIC2 = ({\n        _: 'Mons.Kind.mons.MIMIC2'\n    });\n    const Mons$Kind$mons$CYCLOPE = ({\n        _: 'Mons.Kind.mons.CYCLOPE'\n    });\n    const Mons$Kind$mons$TROWL = ({\n        _: 'Mons.Kind.mons.TROWL'\n    });\n    const Mons$Kind$mons$EMERELDER2 = ({\n        _: 'Mons.Kind.mons.EMERELDER2'\n    });\n\n    function Mons$Game$add_boss$(_kind_mon$1, _agi$2, _type$3, _game$4) {\n        var $1725 = Mons$Game$move_obj$(Mons$global_scr_mid, 0, Mons$Kind$get_pos$(Mons$Kind$Mons$(_kind_mon$1, Bool$true, _type$3, _agi$2)), Mons$Object$new_of_kind$(Mons$Kind$Mons$(_kind_mon$1, Bool$true, _type$3, _agi$2)), _game$4);\n        return $1725;\n    };\n    const Mons$Game$add_boss = x0 => x1 => x2 => x3 => Mons$Game$add_boss$(x0, x1, x2, x3);\n    const Mons$Kind$mons$BEHOLDER = ({\n        _: 'Mons.Kind.mons.BEHOLDER'\n    });\n\n    function Mons$Game$add_mons_to_map$(_pos$1, _game$2) {\n        var _lvl$3 = ((_pos$1 >>> 24));\n        var self = (_lvl$3 === 1);\n        if (self) {\n            var _type$4 = Mons$Type$normal;\n            var _game$5 = Mons$Game$add_mon$(Mons$Kind$mons$ZOIO, 2, _type$4, _game$2);\n            var _game$6 = Mons$Game$add_mon$(Mons$Kind$mons$MIMIC, 0, _type$4, _game$5);\n            var _game$7 = Mons$Game$add_mon$(Mons$Kind$mons$MIMIC2, 0, _type$4, _game$6);\n            var _game$8 = Mons$Game$add_mon$(Mons$Kind$mons$POISOLICK, 2, _type$4, _game$7);\n            var _game$9 = Mons$Game$add_mon$(Mons$Kind$mons$AZULA, 1, _type$4, _game$8);\n            var _game$10 = Mons$Game$add_mon$(Mons$Kind$mons$CYCLOPE, 2, _type$4, _game$9);\n            var _game$11 = Mons$Game$add_mon$(Mons$Kind$mons$TROWL, 0, _type$4, _game$10);\n            var _game$12 = Mons$Game$add_mon$(Mons$Kind$mons$EMERELDER, 2, _type$4, _game$11);\n            var _game$13 = Mons$Game$add_mon$(Mons$Kind$mons$EMERELDER2, 2, _type$4, _game$12);\n            var $1727 = _game$13;\n            var $1726 = $1727;\n        } else {\n            var self = (_lvl$3 === 2);\n            if (self) {\n                var $1729 = Mons$Game$add_boss$(Mons$Kind$mons$BEHOLDER, 2, Mons$Type$normal, _game$2);\n                var $1728 = $1729;\n            } else {\n                var $1730 = _game$2;\n                var $1728 = $1730;\n            };\n            var $1726 = $1728;\n        };\n        return $1726;\n    };\n    const Mons$Game$add_mons_to_map = x0 => x1 => Mons$Game$add_mons_to_map$(x0, x1);\n\n    function Mons$Game$hero_inital_position$(_usr$1, _hero_obj$2, _pos$3, _hero_idx$4, _game$5) {\n        var _x$6 = ((Mons$global_scr_mid & 0xFFF));\n        var _y$7 = (((Mons$global_scr_mid >>> 12) & 0xFFF));\n        var _z$8 = ((_pos$3 >>> 24));\n        var self = (_z$8 === 0);\n        if (self) {\n            var _new_pos$9 = ((0 | _x$6 | (((_y$7 + 12) >>> 0) << 12) | (0 << 24)));\n            var _game$10 = Mons$Game$move_obj$(_pos$3, _hero_idx$4, _new_pos$9, _hero_obj$2, _game$5);\n            var $1732 = Mons$Game$set_user_pos$(_usr$1, _new_pos$9, _game$10);\n            var $1731 = $1732;\n        } else {\n            var self = (_z$8 === 1);\n            if (self) {\n                var $1734 = ((0 | _x$6 | (((_y$7 + 38) >>> 0) << 12) | (1 << 24)));\n                var _new_pos$9 = $1734;\n            } else {\n                var self = (_z$8 === 2);\n                if (self) {\n                    var $1736 = ((0 | _x$6 | (((_y$7 + 5) >>> 0) << 12) | (2 << 24)));\n                    var $1735 = $1736;\n                } else {\n                    var $1737 = _pos$3;\n                    var $1735 = $1737;\n                };\n                var _new_pos$9 = $1735;\n            };\n            var _game$10 = Mons$Game$move_obj$(Mons$global_scr_mid, _hero_idx$4, _new_pos$9, _hero_obj$2, _game$5);\n            var _game$11 = Mons$Game$set_user_pos$(_usr$1, _new_pos$9, _game$10);\n            var $1733 = Mons$Game$add_mons_to_map$(_new_pos$9, _game$11);\n            var $1731 = $1733;\n        };\n        return $1731;\n    };\n    const Mons$Game$hero_inital_position = x0 => x1 => x2 => x3 => x4 => Mons$Game$hero_inital_position$(x0, x1, x2, x3, x4);\n\n    function Mons$Object$get_adjacent_obj$(_pos$1, _dir$2, _map$3) {\n        var _adjacent_pos$4 = Mons$Object$get_adjacent_pos$(_pos$1, _dir$2, _map$3);\n        var $1738 = Mons$Map$get_top$(_adjacent_pos$4, _map$3);\n        return $1738;\n    };\n    const Mons$Object$get_adjacent_obj = x0 => x1 => x2 => Mons$Object$get_adjacent_obj$(x0, x1, x2);\n\n    function Mons$Object$hero_can_push_obj$(_pos$1, _dir$2, _map$3) {\n        var self = Mons$Object$get_adjacent_obj$(_pos$1, _dir$2, _map$3);\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1740 = self.kin;\n                var self = $1740;\n                switch (self._) {\n                    case 'Mons.Kind.Interactive':\n                        var $1742 = self.ele;\n                        var self = $1742;\n                        switch (self._) {\n                            case 'Mons.Kind.inter.LEVER':\n                            case 'Mons.Kind.inter.MOVE':\n                                var $1744 = Bool$true;\n                                var $1743 = $1744;\n                                break;\n                            case 'Mons.Kind.inter.HEAL':\n                                var $1745 = Bool$false;\n                                var $1743 = $1745;\n                                break;\n                        };\n                        var $1741 = $1743;\n                        break;\n                    case 'Mons.Kind.Mons':\n                    case 'Mons.Kind.Const':\n                    case 'Mons.Kind.Terrain':\n                        var $1746 = Bool$false;\n                        var $1741 = $1746;\n                        break;\n                };\n                var $1739 = $1741;\n                break;\n        };\n        return $1739;\n    };\n    const Mons$Object$hero_can_push_obj = x0 => x1 => x2 => Mons$Object$hero_can_push_obj$(x0, x1, x2);\n\n    function Mons$Kind$exec_eff$(_kind$1, _game$2) {\n        var self = _kind$1;\n        switch (self._) {\n            case 'Mons.Kind.Interactive':\n                var $1748 = self.ele;\n                var $1749 = self.on;\n                var $1750 = self.eff;\n                var $1751 = $1750($1748)($1749)(_game$2);\n                var $1747 = $1751;\n                break;\n            case 'Mons.Kind.Mons':\n            case 'Mons.Kind.Const':\n            case 'Mons.Kind.Terrain':\n                var $1752 = _game$2;\n                var $1747 = $1752;\n                break;\n        };\n        return $1747;\n    };\n    const Mons$Kind$exec_eff = x0 => x1 => Mons$Kind$exec_eff$(x0, x1);\n\n    function Mons$Object$set_kin$(_obj$1, _kin$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1754 = self.dir;\n                var $1755 = self.pad;\n                var $1756 = self.ani;\n                var $1757 = self.dmg;\n                var $1758 = self.bag;\n                var $1759 = self.mon;\n                var $1760 = self.bos;\n                var $1761 = self.cap;\n                var $1762 = self.idl;\n                var $1763 = self.eff;\n                var $1764 = Mons$Object$new$(_kin$2, $1754, $1755, $1756, $1757, $1758, $1759, $1760, $1761, $1762, $1763);\n                var $1753 = $1764;\n                break;\n        };\n        return $1753;\n    };\n    const Mons$Object$set_kin = x0 => x1 => Mons$Object$set_kin$(x0, x1);\n\n    function Mons$Object$update_interactive$(_obj$1, _fun$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1766 = self.kin;\n                var $1767 = Mons$Object$set_kin$(_obj$1, _fun$2($1766));\n                var $1765 = $1767;\n                break;\n        };\n        return $1765;\n    };\n    const Mons$Object$update_interactive = x0 => x1 => Mons$Object$update_interactive$(x0, x1);\n\n    function Mons$Kind$set_on_interactive$(_kind$1) {\n        var self = _kind$1;\n        switch (self._) {\n            case 'Mons.Kind.Interactive':\n                var $1769 = self.ele;\n                var $1770 = self.eff;\n                var $1771 = Mons$Kind$Interactive$($1769, Bool$true, $1770);\n                var $1768 = $1771;\n                break;\n            case 'Mons.Kind.Mons':\n            case 'Mons.Kind.Const':\n            case 'Mons.Kind.Terrain':\n                var $1772 = _kind$1;\n                var $1768 = $1772;\n                break;\n        };\n        return $1768;\n    };\n    const Mons$Kind$set_on_interactive = x0 => Mons$Kind$set_on_interactive$(x0);\n\n    function Mons$Game$cmd$(_cmd$1, _usr$2, _game$3) {\n        var _pos$4 = Mons$Game$get_user_pos$(_usr$2, _game$3);\n        var _set_stt_game$5 = (_game$5 => {\n            var $1774 = Mons$Game$set_stt$(Mons$Screen$game$(46, Mons$Turn$empty), _game$5);\n            return $1774;\n        });\n        var self = _pos$4;\n        switch (self._) {\n            case 'Maybe.some':\n                var $1775 = self.value;\n                var self = _game$3;\n                switch (self._) {\n                    case 'Mons.Game.new':\n                        var $1777 = self.usr;\n                        var $1778 = self.map;\n                        var $1779 = self.stt;\n                        var _pos$12 = $1775;\n                        var _hero_pair$13 = Mons$Map$get_hero$(_pos$12, $1778);\n                        var _hero_obj$14 = Pair$fst$(_hero_pair$13);\n                        var _hero_idx$15 = Pair$snd$(_hero_pair$13);\n                        var _adve_idx$16 = 1;\n                        var _adve_obj$17 = Mons$Map$get$(_pos$12, _adve_idx$16, $1778);\n                        var _is_battling$18 = Mons$Object$is_battling$(_adve_obj$17, _hero_obj$14);\n                        var _end_battle$19 = Mons$Object$ended_battle$(_adve_obj$17, _hero_obj$14);\n                        var _curr_mon$20 = Mons$Object$get_current_mon$(_hero_obj$14);\n                        var self = _curr_mon$20;\n                        switch (self._) {\n                            case 'Mons.Object.new':\n                                var $1781 = self.kin;\n                                var _skills$32 = Mons$Kind$get_skills$($1781);\n                                var self = _hero_obj$14;\n                                switch (self._) {\n                                    case 'Mons.Object.new':\n                                        var $1783 = self.dir;\n                                        var $1784 = self.ani;\n                                        var $1785 = self.bag;\n                                        var $1786 = self.mon;\n                                        var self = _adve_obj$17;\n                                        switch (self._) {\n                                            case 'Mons.Object.new':\n                                                var $1788 = self.kin;\n                                                var self = $1779;\n                                                switch (self._) {\n                                                    case 'Mons.Screen.welcome':\n                                                        var $1790 = self.idx;\n                                                        var self = ((_cmd$1 === 99) || (_cmd$1 === 67));\n                                                        if (self) {\n                                                            var self = ($1790 === 0);\n                                                            if (self) {\n                                                                var $1793 = Mons$Game$set_stt$(Mons$Screen$introduction$(0), _game$3);\n                                                                var $1792 = $1793;\n                                                            } else {\n                                                                var $1794 = Mons$Game$set_stt$(Mons$Screen$credits, _game$3);\n                                                                var $1792 = $1794;\n                                                            };\n                                                            var $1791 = $1792;\n                                                        } else {\n                                                            var self = ((_cmd$1 === 119) || (_cmd$1 === 87));\n                                                            if (self) {\n                                                                var $1796 = Mons$Game$set_stt$(Mons$Screen$welcome$(0), _game$3);\n                                                                var $1795 = $1796;\n                                                            } else {\n                                                                var self = ((_cmd$1 === 115) || (_cmd$1 === 83));\n                                                                if (self) {\n                                                                    var $1798 = Mons$Game$set_stt$(Mons$Screen$welcome$(1), _game$3);\n                                                                    var $1797 = $1798;\n                                                                } else {\n                                                                    var $1799 = _game$3;\n                                                                    var $1797 = $1799;\n                                                                };\n                                                                var $1795 = $1797;\n                                                            };\n                                                            var $1791 = $1795;\n                                                        };\n                                                        var $1789 = $1791;\n                                                        break;\n                                                    case 'Mons.Screen.introduction':\n                                                        var $1800 = self.step;\n                                                        var _can_walk$56 = ($1800 === 0);\n                                                        var self = (_can_walk$56 && Mons$is_walk_cmd$(_cmd$1));\n                                                        if (self) {\n                                                            var $1802 = Mons$Game$walk$(_cmd$1, _pos$12, _hero_idx$15, _game$3);\n                                                            var $1801 = $1802;\n                                                        } else {\n                                                            var self = ((_cmd$1 === 99) && Mons$Kind$is_mage$($1788));\n                                                            if (self) {\n                                                                var self = ($1800 === 0);\n                                                                if (self) {\n                                                                    var _game$57 = Mons$initial_mons$(_hero_obj$14, _pos$12, 0, _game$3);\n                                                                    var $1805 = Mons$Game$set_stt$(Mons$Screen$introduction$(1), _game$57);\n                                                                    var $1804 = $1805;\n                                                                } else {\n                                                                    var self = ($1800 === 1);\n                                                                    if (self) {\n                                                                        var $1807 = Mons$Game$set_stt$(Mons$Screen$intro_select$(0), _game$3);\n                                                                        var $1806 = $1807;\n                                                                    } else {\n                                                                        var self = ($1800 === 2);\n                                                                        if (self) {\n                                                                            var _game$57 = Mons$Game$map_del$(_pos$12, _adve_idx$16, _game$3);\n                                                                            var _hero_obj$58 = Mons$Object$delete_init_mons$(_hero_obj$14);\n                                                                            var _game$59 = Mons$Game$map_set$(_pos$12, _hero_idx$15, _hero_obj$58, _game$57);\n                                                                            var $1809 = Mons$Game$set_stt$(Mons$Screen$game$(46, Mons$Turn$empty), _game$59);\n                                                                            var $1808 = $1809;\n                                                                        } else {\n                                                                            var $1810 = Mons$Game$set_stt$(Mons$Screen$game$(46, Mons$Turn$empty), _game$3);\n                                                                            var $1808 = $1810;\n                                                                        };\n                                                                        var $1806 = $1808;\n                                                                    };\n                                                                    var $1804 = $1806;\n                                                                };\n                                                                var $1803 = $1804;\n                                                            } else {\n                                                                var $1811 = _game$3;\n                                                                var $1803 = $1811;\n                                                            };\n                                                            var $1801 = $1803;\n                                                        };\n                                                        var $1789 = $1801;\n                                                        break;\n                                                    case 'Mons.Screen.game':\n                                                        var $1812 = self.turn;\n                                                        var self = (_cmd$1 === 85);\n                                                        if (self) {\n                                                            var $1814 = Mons$Game$exec_turn$(_hero_obj$14, _adve_obj$17, _pos$12, _hero_idx$15, _adve_idx$16, 0n, $1812, _game$3);\n                                                            var $1813 = $1814;\n                                                        } else {\n                                                            var self = (_cmd$1 === 73);\n                                                            if (self) {\n                                                                var $1816 = Mons$Game$exec_turn$(_hero_obj$14, _adve_obj$17, _pos$12, _hero_idx$15, _adve_idx$16, 1n, $1812, _game$3);\n                                                                var $1815 = $1816;\n                                                            } else {\n                                                                var self = (_cmd$1 === 74);\n                                                                if (self) {\n                                                                    var $1818 = Mons$Game$exec_turn$(_hero_obj$14, _adve_obj$17, _pos$12, _hero_idx$15, _adve_idx$16, 2n, $1812, _game$3);\n                                                                    var $1817 = $1818;\n                                                                } else {\n                                                                    var self = (_cmd$1 === 75);\n                                                                    if (self) {\n                                                                        var $1820 = Mons$Game$exec_turn$(_hero_obj$14, _adve_obj$17, _pos$12, _hero_idx$15, _adve_idx$16, 3n, $1812, _game$3);\n                                                                        var $1819 = $1820;\n                                                                    } else {\n                                                                        var self = (_cmd$1 === 82);\n                                                                        if (self) {\n                                                                            var $1822 = Mons$Game$exec_turn$(_hero_obj$14, _adve_obj$17, _pos$12, _hero_idx$15, _adve_idx$16, 4n, $1812, _game$3);\n                                                                            var $1821 = $1822;\n                                                                        } else {\n                                                                            var self = Mons$is_walk_cmd$(_cmd$1);\n                                                                            if (self) {\n                                                                                var self = Mons$Kind$is_mon_area$($1788);\n                                                                                if (self) {\n                                                                                    var _adve_pos$57 = Mons$Kind$area_mon_pos$($1788, _pos$12);\n                                                                                    var _mon_area_obj$58 = Mons$Map$get$(_adve_pos$57, 0, $1778);\n                                                                                    var self = _mon_area_obj$58;\n                                                                                    switch (self._) {\n                                                                                        case 'Mons.Object.new':\n                                                                                            var $1826 = self.kin;\n                                                                                            var self = $1826;\n                                                                                            switch (self._) {\n                                                                                                case 'Mons.Kind.Mons':\n                                                                                                    var _game$74 = Mons$Game$walk$(_cmd$1, _pos$12, _hero_idx$15, _game$3);\n                                                                                                    var self = ($1784 === 0);\n                                                                                                    if (self) {\n                                                                                                        var _game$75 = Mons$Game$move_obj$(_adve_pos$57, 0, _pos$12, _mon_area_obj$58, _game$74);\n                                                                                                        var _game$76 = Mons$Game$move_obj$(_pos$12, 1, _pos$12, _hero_obj$14, _game$75);\n                                                                                                        var $1829 = Mons$Game$set_user_pos$($1777, _pos$12, _game$76);\n                                                                                                        var $1828 = $1829;\n                                                                                                    } else {\n                                                                                                        var $1830 = _game$74;\n                                                                                                        var $1828 = $1830;\n                                                                                                    };\n                                                                                                    var $1827 = $1828;\n                                                                                                    break;\n                                                                                                case 'Mons.Kind.Const':\n                                                                                                case 'Mons.Kind.Terrain':\n                                                                                                case 'Mons.Kind.Interactive':\n                                                                                                    var $1831 = Mons$Game$walk$(_cmd$1, _pos$12, _hero_idx$15, _game$3);\n                                                                                                    var $1827 = $1831;\n                                                                                                    break;\n                                                                                            };\n                                                                                            var $1825 = $1827;\n                                                                                            break;\n                                                                                    };\n                                                                                    var $1824 = $1825;\n                                                                                } else {\n                                                                                    var self = (Mons$Object$is_battling$(_adve_obj$17, _hero_obj$14) && (!Mons$Kind$is_mage$($1788)));\n                                                                                    if (self) {\n                                                                                        var self = ($1784 === 0);\n                                                                                        if (self) {\n                                                                                            var $1834 = Mons$Game$move_obj$(_pos$12, 0, _pos$12, _hero_obj$14, _game$3);\n                                                                                            var $1833 = $1834;\n                                                                                        } else {\n                                                                                            var $1835 = Mons$Game$walk$(_cmd$1, _pos$12, _hero_idx$15, _game$3);\n                                                                                            var $1833 = $1835;\n                                                                                        };\n                                                                                        var $1832 = $1833;\n                                                                                    } else {\n                                                                                        var $1836 = Mons$Game$walk$(_cmd$1, _pos$12, _hero_idx$15, _game$3);\n                                                                                        var $1832 = $1836;\n                                                                                    };\n                                                                                    var $1824 = $1832;\n                                                                                };\n                                                                                var $1823 = $1824;\n                                                                            } else {\n                                                                                var self = (_cmd$1 === 101);\n                                                                                if (self) {\n                                                                                    var self = (_is_battling$18 || _end_battle$19);\n                                                                                    if (self) {\n                                                                                        var $1839 = _game$3;\n                                                                                        var $1838 = $1839;\n                                                                                    } else {\n                                                                                        var $1840 = Mons$Game$set_stt$(Mons$Screen$inventory$(0), _game$3);\n                                                                                        var $1838 = $1840;\n                                                                                    };\n                                                                                    var $1837 = $1838;\n                                                                                } else {\n                                                                                    var self = (_cmd$1 === 99);\n                                                                                    if (self) {\n                                                                                        var self = $1788;\n                                                                                        switch (self._) {\n                                                                                            case 'Mons.Kind.Mons':\n                                                                                                var $1843 = self.ele;\n                                                                                                var $1844 = self.boss;\n                                                                                                var $1845 = self.pri_type;\n                                                                                                var $1846 = self.agi;\n                                                                                                var self = Mons$Object$is_obj_defeated$(_adve_obj$17);\n                                                                                                if (self) {\n                                                                                                    var _game$61 = Mons$Skill$clear_after_battle$(_hero_idx$15, _adve_idx$16, _pos$12, _game$3);\n                                                                                                    var _hero_obj$62 = Mons$Object$add_defeated_mon$(_adve_obj$17, _hero_obj$14);\n                                                                                                    var self = $1844;\n                                                                                                    if (self) {\n                                                                                                        var _hero_obj$63 = Mons$Object$capture_boss$(_adve_obj$17, _hero_obj$62);\n                                                                                                        var $1849 = Mons$Game$delete_adve_obj$(_adve_obj$17, _hero_obj$63, _pos$12, _hero_idx$15, _adve_idx$16, _game$61);\n                                                                                                        var $1848 = $1849;\n                                                                                                    } else {\n                                                                                                        var self = Mons$Object$is_full_bag$(_hero_obj$62);\n                                                                                                        if (self) {\n                                                                                                            var _game$63 = Mons$Game$map_set$(_pos$12, _hero_idx$15, _hero_obj$62, _game$61);\n                                                                                                            var $1851 = Mons$Game$set_stt$(Mons$Screen$capture_mon$(0, Bool$true), _game$63);\n                                                                                                            var $1850 = $1851;\n                                                                                                        } else {\n                                                                                                            var _adve_obj$63 = Mons$Object$set_eff$(Mons$Effect$clear, _adve_obj$17);\n                                                                                                            var _hero_obj$64 = Mons$Object$push_to_bag$(_adve_obj$63, _hero_obj$62);\n                                                                                                            var $1852 = Mons$Game$delete_adve_obj$(_adve_obj$63, _hero_obj$64, _pos$12, _hero_idx$15, _adve_idx$16, _game$61);\n                                                                                                            var $1850 = $1852;\n                                                                                                        };\n                                                                                                        var $1848 = $1850;\n                                                                                                    };\n                                                                                                    var $1847 = $1848;\n                                                                                                } else {\n                                                                                                    var self = Mons$Object$is_obj_defeated$(_curr_mon$20);\n                                                                                                    if (self) {\n                                                                                                        var _game$61 = Mons$Skill$clear_after_battle$(_hero_idx$15, _adve_idx$16, _pos$12, _game$3);\n                                                                                                        var _game$62 = Mons$Game$add_mon$($1843, $1846, $1845, _game$61);\n                                                                                                        var _hero_obj$63 = Mons$Object$delete_from_bag$($1786, _hero_obj$14);\n                                                                                                        var _game$64 = Mons$Game$map_set$(_pos$12, _hero_idx$15, _hero_obj$63, _game$62);\n                                                                                                        var self = ((list_length($1785)) === 0n);\n                                                                                                        if (self) {\n                                                                                                            var $1855 = Mons$Game$set_stt$(Mons$Screen$game_over, _game$64);\n                                                                                                            var $1854 = $1855;\n                                                                                                        } else {\n                                                                                                            var _game$65 = Mons$Game$delete_adve_obj$(_adve_obj$17, _hero_obj$63, _pos$12, _hero_idx$15, _adve_idx$16, _game$64);\n                                                                                                            var $1856 = _set_stt_game$5(_game$65);\n                                                                                                            var $1854 = $1856;\n                                                                                                        };\n                                                                                                        var $1853 = $1854;\n                                                                                                    } else {\n                                                                                                        var self = $1812;\n                                                                                                        switch (self._) {\n                                                                                                            case 'Mons.Turn.new':\n                                                                                                                var $1858 = self.exec_hero;\n                                                                                                                var $1859 = self.hero_skill;\n                                                                                                                var $1860 = self.adve_skill;\n                                                                                                                var $1861 = self.play;\n                                                                                                                var self = Mons$Turn$is_active$($1812);\n                                                                                                                if (self) {\n                                                                                                                    var self = (Mons$Turn$is_last_player_move$($1812) || Mons$Turn$hero_run$($1812));\n                                                                                                                    if (self) {\n                                                                                                                        var _game$65 = Mons$Skill$apply_end_turn_eff$(_hero_idx$15, _adve_idx$16, _pos$12, _game$3);\n                                                                                                                        var self = Mons$Turn$hero_run$($1812);\n                                                                                                                        if (self) {\n                                                                                                                            var _game$66 = Mons$Skill$clear_after_battle$(_hero_idx$15, _adve_idx$16, _pos$12, _game$65);\n                                                                                                                            var _game$67 = Mons$Game$move_obj$(_pos$12, _adve_idx$16, Mons$Kind$get_pos$($1788), _adve_obj$17, _game$66);\n                                                                                                                            var _game$68 = Mons$Game$move_hero_down$($1777, _hero_obj$14, _pos$12, _hero_idx$15, _game$67);\n                                                                                                                            var $1865 = _set_stt_game$5(_game$68);\n                                                                                                                            var $1864 = $1865;\n                                                                                                                        } else {\n                                                                                                                            var $1866 = _set_stt_game$5(_game$65);\n                                                                                                                            var $1864 = $1866;\n                                                                                                                        };\n                                                                                                                        var $1863 = $1864;\n                                                                                                                    } else {\n                                                                                                                        var _turn$65 = Mons$Turn$new$((!$1858), $1859, $1860, (Math.max($1861 - 1, 0)));\n                                                                                                                        var $1867 = Mons$Game$set_stt$(Mons$Screen$game$(46, _turn$65), _game$3);\n                                                                                                                        var $1863 = $1867;\n                                                                                                                    };\n                                                                                                                    var $1862 = $1863;\n                                                                                                                } else {\n                                                                                                                    var $1868 = _set_stt_game$5(_game$3);\n                                                                                                                    var $1862 = $1868;\n                                                                                                                };\n                                                                                                                var $1857 = $1862;\n                                                                                                                break;\n                                                                                                        };\n                                                                                                        var $1853 = $1857;\n                                                                                                    };\n                                                                                                    var $1847 = $1853;\n                                                                                                };\n                                                                                                var $1842 = $1847;\n                                                                                                break;\n                                                                                            case 'Mons.Kind.Interactive':\n                                                                                                var $1869 = self.ele;\n                                                                                                var _inter_obj$60 = Mons$Object$update_interactive$(_adve_obj$17, Mons$Kind$set_on_interactive);\n                                                                                                var _game$61 = Mons$Game$map_set$(_pos$12, _adve_idx$16, _inter_obj$60, _game$3);\n                                                                                                var self = _inter_obj$60;\n                                                                                                switch (self._) {\n                                                                                                    case 'Mons.Object.new':\n                                                                                                        var $1871 = self.kin;\n                                                                                                        var $1872 = Mons$Kind$exec_eff$($1871, _game$61);\n                                                                                                        var _game_eff_after_interact$60 = $1872;\n                                                                                                        break;\n                                                                                                };\n                                                                                                var self = $1869;\n                                                                                                switch (self._) {\n                                                                                                    case 'Mons.Kind.inter.LEVER':\n                                                                                                    case 'Mons.Kind.inter.MOVE':\n                                                                                                        var $1873 = _game_eff_after_interact$60;\n                                                                                                        var $1870 = $1873;\n                                                                                                        break;\n                                                                                                    case 'Mons.Kind.inter.HEAL':\n                                                                                                        var _game$61 = Mons$Kind$exec_eff$($1788, _game$3);\n                                                                                                        var _inter_obj$62 = Mons$Object$update_interactive$(_adve_obj$17, Mons$Kind$set_on_interactive);\n                                                                                                        var $1874 = Mons$Game$map_set$(_pos$12, _adve_idx$16, _inter_obj$62, _game$61);\n                                                                                                        var $1870 = $1874;\n                                                                                                        break;\n                                                                                                };\n                                                                                                var $1842 = $1870;\n                                                                                                break;\n                                                                                            case 'Mons.Kind.Const':\n                                                                                                var self = Mons$Kind$is_portal$($1788);\n                                                                                                if (self) {\n                                                                                                    var _new_pos$58 = Pos32$add$(_pos$12, ((0 | 0 | (0 << 12) | (1 << 24))));\n                                                                                                    var $1876 = Mons$Game$hero_inital_position$(_usr$2, _hero_obj$14, _new_pos$58, _hero_idx$15, _game$3);\n                                                                                                    var $1875 = $1876;\n                                                                                                } else {\n                                                                                                    var $1877 = _game$3;\n                                                                                                    var $1875 = $1877;\n                                                                                                };\n                                                                                                var $1842 = $1875;\n                                                                                                break;\n                                                                                            case 'Mons.Kind.Terrain':\n                                                                                                var self = Mons$Object$hero_can_push_obj$(_pos$12, $1783, $1778);\n                                                                                                if (self) {\n                                                                                                    var _adjacent_obj$58 = Mons$Object$get_adjacent_obj$(_pos$12, $1783, $1778);\n                                                                                                    var self = _adjacent_obj$58;\n                                                                                                    switch (self._) {\n                                                                                                        case 'Mons.Object.new':\n                                                                                                            var $1880 = self.kin;\n                                                                                                            var $1881 = Mons$Kind$exec_eff$($1880, _game$3);\n                                                                                                            var $1879 = $1881;\n                                                                                                            break;\n                                                                                                    };\n                                                                                                    var $1878 = $1879;\n                                                                                                } else {\n                                                                                                    var $1882 = _set_stt_game$5(_game$3);\n                                                                                                    var $1878 = $1882;\n                                                                                                };\n                                                                                                var $1842 = $1878;\n                                                                                                break;\n                                                                                        };\n                                                                                        var $1841 = $1842;\n                                                                                    } else {\n                                                                                        var self = (_cmd$1 === 122);\n                                                                                        if (self) {\n                                                                                            var self = $1788;\n                                                                                            switch (self._) {\n                                                                                                case 'Mons.Kind.Mons':\n                                                                                                    var self = Mons$Object$is_obj_defeated$(_adve_obj$17);\n                                                                                                    if (self) {\n                                                                                                        var _hero_obj$61 = Mons$Object$add_defeated_mon$(_adve_obj$17, _hero_obj$14);\n                                                                                                        var _game$62 = Mons$Game$map_del$(_pos$12, _adve_idx$16, _game$3);\n                                                                                                        var _game$63 = Mons$Game$map_set$(_pos$12, _hero_idx$15, _hero_obj$61, _game$62);\n                                                                                                        var $1886 = _set_stt_game$5(_game$63);\n                                                                                                        var $1885 = $1886;\n                                                                                                    } else {\n                                                                                                        var $1887 = _game$3;\n                                                                                                        var $1885 = $1887;\n                                                                                                    };\n                                                                                                    var $1884 = $1885;\n                                                                                                    break;\n                                                                                                case 'Mons.Kind.Const':\n                                                                                                case 'Mons.Kind.Terrain':\n                                                                                                case 'Mons.Kind.Interactive':\n                                                                                                    var $1888 = _set_stt_game$5(_game$3);\n                                                                                                    var $1884 = $1888;\n                                                                                                    break;\n                                                                                            };\n                                                                                            var $1883 = $1884;\n                                                                                        } else {\n                                                                                            var $1889 = _game$3;\n                                                                                            var $1883 = $1889;\n                                                                                        };\n                                                                                        var $1841 = $1883;\n                                                                                    };\n                                                                                    var $1837 = $1841;\n                                                                                };\n                                                                                var $1823 = $1837;\n                                                                            };\n                                                                            var $1821 = $1823;\n                                                                        };\n                                                                        var $1819 = $1821;\n                                                                    };\n                                                                    var $1817 = $1819;\n                                                                };\n                                                                var $1815 = $1817;\n                                                            };\n                                                            var $1813 = $1815;\n                                                        };\n                                                        var $1789 = $1813;\n                                                        break;\n                                                    case 'Mons.Screen.credits':\n                                                        var self = ((_cmd$1 === 122) || (_cmd$1 === 90));\n                                                        if (self) {\n                                                            var $1891 = Mons$Game$set_stt$(Mons$Screen$welcome$(0), _game$3);\n                                                            var $1890 = $1891;\n                                                        } else {\n                                                            var $1892 = _game$3;\n                                                            var $1890 = $1892;\n                                                        };\n                                                        var $1789 = $1890;\n                                                        break;\n                                                    case 'Mons.Screen.intro_select':\n                                                        var self = (_cmd$1 === 99);\n                                                        if (self) {\n                                                            var $1894 = Mons$Game$set_stt$(Mons$Screen$introduction$(2), _game$3);\n                                                            var $1893 = $1894;\n                                                        } else {\n                                                            var $1895 = _game$3;\n                                                            var $1893 = $1895;\n                                                        };\n                                                        var $1789 = $1893;\n                                                        break;\n                                                    case 'Mons.Screen.inventory':\n                                                    case 'Mons.Screen.game_over':\n                                                        var $1896 = _game$3;\n                                                        var $1789 = $1896;\n                                                        break;\n                                                    case 'Mons.Screen.capture_mon':\n                                                        var self = (_cmd$1 === 99);\n                                                        if (self) {\n                                                            var _hero_obj$57 = Mons$Object$delete_from_bag$($1786, _hero_obj$14);\n                                                            var _hero_obj$58 = Mons$Object$push_to_bag$(_adve_obj$17, _hero_obj$57);\n                                                            var _hero_obj$59 = Mons$Object$set_mon$(2, _hero_obj$58);\n                                                            var _game$60 = Mons$Game$map_del$(_pos$12, _adve_idx$16, _game$3);\n                                                            var _game$61 = Mons$Game$map_set$(_pos$12, _hero_idx$15, _hero_obj$59, _game$60);\n                                                            var $1898 = _set_stt_game$5(_game$61);\n                                                            var $1897 = $1898;\n                                                        } else {\n                                                            var self = (_cmd$1 === 122);\n                                                            if (self) {\n                                                                var self = Mons$Object$is_obj_defeated$(_adve_obj$17);\n                                                                if (self) {\n                                                                    var _game$57 = Mons$Game$map_del$(_pos$12, _adve_idx$16, _game$3);\n                                                                    var _game$58 = Mons$Game$map_set$(_pos$12, _hero_idx$15, _hero_obj$14, _game$57);\n                                                                    var $1901 = _set_stt_game$5(_game$58);\n                                                                    var $1900 = $1901;\n                                                                } else {\n                                                                    var $1902 = _game$3;\n                                                                    var $1900 = $1902;\n                                                                };\n                                                                var $1899 = $1900;\n                                                            } else {\n                                                                var $1903 = _game$3;\n                                                                var $1899 = $1903;\n                                                            };\n                                                            var $1897 = $1899;\n                                                        };\n                                                        var $1789 = $1897;\n                                                        break;\n                                                };\n                                                var $1787 = $1789;\n                                                break;\n                                        };\n                                        var $1782 = $1787;\n                                        break;\n                                };\n                                var $1780 = $1782;\n                                break;\n                        };\n                        var $1776 = $1780;\n                        break;\n                };\n                var $1773 = $1776;\n                break;\n            case 'Maybe.none':\n                var _pos$6 = ((0 | 2048 | (2048 << 12) | (0 << 24)));\n                var _obj$7 = Mons$Object$hero;\n                var _game$8 = Mons$Game$map_push$(_pos$6, _obj$7, _game$3);\n                var _game$9 = Mons$Game$set_user_pos$(_usr$2, _pos$6, _game$8);\n                var $1904 = _game$9;\n                var $1773 = $1904;\n                break;\n        };\n        return $1773;\n    };\n    const Mons$Game$cmd = x0 => x1 => x2 => Mons$Game$cmd$(x0, x1, x2);\n\n    function App$new$(_init$2, _draw$3, _when$4) {\n        var $1905 = ({\n            _: 'App.new',\n            'init': _init$2,\n            'draw': _draw$3,\n            'when': _when$4\n        });\n        return $1905;\n    };\n    const App$new = x0 => x1 => x2 => App$new$(x0, x1, x2);\n\n    function Mons$start$(_online$1) {\n        var _screen$2 = Image3D$alloc_capacity$(524288);\n        var $1906 = App$new$((() => {\n            var _game_usr$3 = Word$zero$(160n);\n            var _game_pos$4 = Map$new;\n            var _game_map$5 = Mons$Map$build$(Mons$map_source);\n            var _game$6 = Mons$Game$new$(_game_usr$3, _game_pos$4, _game_map$5, Mons$Screen$game$(46, Mons$Turn$empty), 0);\n            var $1907 = _game$6;\n            return $1907;\n        })(), (_game$3 => {\n            var $1908 = App$Render$pix$(Mons$draw$(_game$3, _screen$2));\n            return $1908;\n        }), (_event$3 => _game$4 => {\n            var self = _online$1;\n            if (self) {\n                var self = _event$3;\n                switch (self._) {\n                    case 'App.Event.init':\n                        var $1911 = self.addr;\n                        var $1912 = List$cons$(App$Action$print$(\"Starting app.\"), List$cons$(App$Action$resize$(Mons$scr_w, Mons$scr_h), List$cons$(App$Action$state$(Mons$Game$set_usr$($1911, _game$4)), List$cons$(App$Action$watch$(Mons$App$room), List$cons$((() => {\n                            var _chr$9 = Mons$Input$char$(Bool$true, 46);\n                            var self = Mons$Input$serialize$(_chr$9);\n                            switch (self._) {\n                                case 'Maybe.some':\n                                    var $1914 = self.value;\n                                    var $1915 = App$Action$post$(Mons$App$room, $1914);\n                                    var $1913 = $1915;\n                                    break;\n                                case 'Maybe.none':\n                                    var $1916 = App$Action$print$(\"\");\n                                    var $1913 = $1916;\n                                    break;\n                            };\n                            return $1913;\n                        })(), List$nil)))));\n                        var $1910 = $1912;\n                        break;\n                    case 'App.Event.tick':\n                        var $1917 = self.time;\n                        var $1918 = List$cons$(App$Action$state$(Mons$Game$tick$(_game$4, $1917)), List$nil);\n                        var $1910 = $1918;\n                        break;\n                    case 'App.Event.xkey':\n                        var $1919 = self.down;\n                        var $1920 = self.code;\n                        var _chr$8 = Mons$Input$char$($1919, $1920);\n                        var self = Mons$Input$serialize$(_chr$8);\n                        switch (self._) {\n                            case 'Maybe.some':\n                                var $1922 = self.value;\n                                var $1923 = List$cons$(App$Action$post$(Mons$App$room, $1922), List$nil);\n                                var $1921 = $1923;\n                                break;\n                            case 'Maybe.none':\n                                var $1924 = List$nil;\n                                var $1921 = $1924;\n                                break;\n                        };\n                        var $1910 = $1921;\n                        break;\n                    case 'App.Event.post':\n                        var $1925 = self.addr;\n                        var $1926 = self.data;\n                        var self = Mons$Input$deserialize$($1926);\n                        switch (self._) {\n                            case 'Maybe.some':\n                                var $1928 = self.value;\n                                var $1929 = List$cons$((() => {\n                                    var self = _game$4;\n                                    switch (self._) {\n                                        case 'Mons.Game.new':\n                                            var $1930 = App$Action$state$(Mons$Game$cmd$($1928, $1925, _game$4));\n                                            return $1930;\n                                    };\n                                })(), List$nil);\n                                var $1927 = $1929;\n                                break;\n                            case 'Maybe.none':\n                                var $1931 = List$nil;\n                                var $1927 = $1931;\n                                break;\n                        };\n                        var $1910 = $1927;\n                        break;\n                };\n                var $1909 = $1910;\n            } else {\n                var self = _event$3;\n                switch (self._) {\n                    case 'App.Event.init':\n                        var $1933 = self.addr;\n                        var $1934 = List$cons$(App$Action$resize$(Mons$scr_w, Mons$scr_h), List$cons$((() => {\n                            var _game$9 = Mons$Game$set_usr$($1933, _game$4);\n                            var _game$10 = Mons$Game$cmd$(100, $1933, _game$9);\n                            var self = _game$10;\n                            switch (self._) {\n                                case 'Mons.Game.new':\n                                    var $1936 = self.usr;\n                                    var $1937 = self.map;\n                                    var self = Mons$Game$get_hero_pos$(_game$10);\n                                    switch (self._) {\n                                        case 'Maybe.some':\n                                            var $1939 = self.value;\n                                            var $1940 = $1939;\n                                            var _pos$16 = $1940;\n                                            break;\n                                        case 'Maybe.none':\n                                            var $1941 = Mons$scr_mid;\n                                            var _pos$16 = $1941;\n                                            break;\n                                    };\n                                    var _hero_info$17 = Mons$Map$get_hero$(_pos$16, $1937);\n                                    var _hero_obj$18 = Pair$fst$(_hero_info$17);\n                                    var _hero_idx$19 = Pair$snd$(_hero_info$17);\n                                    var _game$20 = Mons$Game$hero_inital_position$($1936, _hero_obj$18, _pos$16, 0, _game$10);\n                                    var $1938 = App$Action$state$(_game$20);\n                                    var $1935 = $1938;\n                                    break;\n                            };\n                            return $1935;\n                        })(), List$nil));\n                        var $1932 = $1934;\n                        break;\n                    case 'App.Event.tick':\n                        var $1942 = self.time;\n                        var $1943 = List$cons$(App$Action$state$(Mons$Game$tick$(_game$4, $1942)), List$nil);\n                        var $1932 = $1943;\n                        break;\n                    case 'App.Event.xkey':\n                        var $1944 = self.down;\n                        var $1945 = self.code;\n                        var $1946 = List$cons$((() => {\n                            var self = _game$4;\n                            switch (self._) {\n                                case 'Mons.Game.new':\n                                    var $1947 = self.usr;\n                                    var _chr$13 = Mons$Input$char$($1944, $1945);\n                                    var $1948 = App$Action$state$(Mons$Game$cmd$(_chr$13, $1947, _game$4));\n                                    return $1948;\n                            };\n                        })(), List$nil);\n                        var $1932 = $1946;\n                        break;\n                    case 'App.Event.post':\n                        var $1949 = List$nil;\n                        var $1932 = $1949;\n                        break;\n                };\n                var $1909 = $1932;\n            };\n            return $1909;\n        }));\n        return $1906;\n    };\n    const Mons$start = x0 => Mons$start$(x0);\n    const Mons$off = Mons$start$(Bool$false);\n    const Mons = Mons$off;\n    return {\n        'Buffer32.new': Buffer32$new,\n        'Array': Array,\n        'Array.tip': Array$tip,\n        'Array.tie': Array$tie,\n        'Array.alloc': Array$alloc,\n        'U32.new': U32$new,\n        'Word': Word,\n        'Word.e': Word$e,\n        'Word.o': Word$o,\n        'Word.zero': Word$zero,\n        'U32.zero': U32$zero,\n        'Buffer32.alloc': Buffer32$alloc,\n        'Bool.false': Bool$false,\n        'Bool.true': Bool$true,\n        'Cmp.as_eql': Cmp$as_eql,\n        'Cmp.ltn': Cmp$ltn,\n        'Cmp.gtn': Cmp$gtn,\n        'Word.cmp.go': Word$cmp$go,\n        'Cmp.eql': Cmp$eql,\n        'Word.cmp': Word$cmp,\n        'Word.eql': Word$eql,\n        'Nat.succ': Nat$succ,\n        'Nat.zero': Nat$zero,\n        'U32.eql': U32$eql,\n        'Nat.apply': Nat$apply,\n        'Word.i': Word$i,\n        'Word.inc': Word$inc,\n        'U32.inc': U32$inc,\n        'Nat.to_u32': Nat$to_u32,\n        'U32.shr': U32$shr,\n        'U32.needed_depth.go': U32$needed_depth$go,\n        'Word.subber': Word$subber,\n        'Word.sub': Word$sub,\n        'U32.sub': U32$sub,\n        'U32.needed_depth': U32$needed_depth,\n        'Word.mul': Word$mul,\n        'U32.mul': U32$mul,\n        'Image3D.new': Image3D$new,\n        'Image3D.alloc_capacity': Image3D$alloc_capacity,\n        'Map.new': Map$new,\n        'Word.adder': Word$adder,\n        'Word.add': Word$add,\n        'U32.add': U32$add,\n        'List.ifor_u32': List$ifor_u32,\n        'List': List,\n        'Map': Map,\n        'Mons.Map.new': Mons$Map$new,\n        'List.length_u32_go': List$length_u32_go,\n        'List.length_u32': List$length_u32,\n        'U32.for': U32$for,\n        'Word.div': Word$div,\n        'U32.div': U32$div,\n        'Word.or': Word$or,\n        'U32.or': U32$or,\n        'U32.shl': U32$shl,\n        'Pos32.new': Pos32$new,\n        'Word.fold': Word$fold,\n        'Nat.add': Nat$add,\n        'Nat.mul': Nat$mul,\n        'Word.to_nat': Word$to_nat,\n        'U32.to_nat': U32$to_nat,\n        'String.nil': String$nil,\n        'String.cons': String$cons,\n        'String.take': String$take,\n        'Nat.sub': Nat$sub,\n        'String.drop': String$drop,\n        'String.slice': String$slice,\n        'Map.tie': Map$tie,\n        'Maybe.some': Maybe$some,\n        'Maybe.none': Maybe$none,\n        'Map.set': Map$set,\n        'Bits.e': Bits$e,\n        'Bits.o': Bits$o,\n        'Bits.i': Bits$i,\n        'Word.to_bits': Word$to_bits,\n        'U32.to_bits': U32$to_bits,\n        'Mons.Map.set_list': Mons$Map$set_list,\n        'Mons.Object.new': Mons$Object$new,\n        'Mons.Dir.down': Mons$Dir$down,\n        'Mons.Pad.new': Mons$Pad$new,\n        'Mons.Pad.null': Mons$Pad$null,\n        'List.nil': List$nil,\n        'Pair.new': Pair$new,\n        'Mons.Effect.new': Mons$Effect$new,\n        'Mons.Effect.clear': Mons$Effect$clear,\n        'Mons.Object.new_of_kind': Mons$Object$new_of_kind,\n        'Mons.Kind.Terrain': Mons$Kind$Terrain,\n        'Mons.Kind.new_terrain': Mons$Kind$new_terrain,\n        'Mons.Kind.terrain.FLOOR': Mons$Kind$terrain$FLOOR,\n        'Mons.Kind.terrain.PATH_BLOCKER': Mons$Kind$terrain$PATH_BLOCKER,\n        'Bool.and': Bool$and,\n        'U16.eql': U16$eql,\n        'String.eql': String$eql,\n        'Mons.Map.code_to_tile.aux': Mons$Map$code_to_tile$aux,\n        'List.cons': List$cons,\n        'Pair': Pair,\n        'Mons.Kind.Mons': Mons$Kind$Mons,\n        'Mons.Kind.new_mons': Mons$Kind$new_mons,\n        'Mons.Kind.mons.MAGE': Mons$Kind$mons$MAGE,\n        'Mons.Type.normal': Mons$Type$normal,\n        'Mons.Kind.Const': Mons$Kind$Const,\n        'Mons.Kind.new_const': Mons$Kind$new_const,\n        'Mons.Kind.const.CRYSTAL': Mons$Kind$const$CRYSTAL,\n        'Mons.Kind.const.FOUNTAIN': Mons$Kind$const$FOUNTAIN,\n        'Mons.Kind.const.PORTAL': Mons$Kind$const$PORTAL,\n        'Mons.Kind.terrain.VOID_BLACK': Mons$Kind$terrain$VOID_BLACK,\n        'Mons.Kind.terrain.MID_CITY': Mons$Kind$terrain$MID_CITY,\n        'Mons.Kind.terrain.STAIRS': Mons$Kind$terrain$STAIRS,\n        'Mons.Kind.Interactive': Mons$Kind$Interactive,\n        'Mons.Kind.new_interactive_tool': Mons$Kind$new_interactive_tool,\n        'Mons.Kind.inter.HEAL': Mons$Kind$inter$HEAL,\n        'Maybe': Maybe,\n        'Map.get': Map$get,\n        'Mons.Game.get_user_pos': Mons$Game$get_user_pos,\n        'Mons.Game.get_hero_pos': Mons$Game$get_hero_pos,\n        'Word.and': Word$and,\n        'U32.and': U32$and,\n        'Pos32.get_x': Pos32$get_x,\n        'Pos32.get_y': Pos32$get_y,\n        'Pos32.get_z': Pos32$get_z,\n        'Mons.Map.get_list': Mons$Map$get_list,\n        'Mons.Kind.is_hero': Mons$Kind$is_hero,\n        'Mons.Object.get_kin': Mons$Object$get_kin,\n        'List.ifind.go': List$ifind$go,\n        'List.ifind': List$ifind,\n        'Mons.Kind.terrain.VOID': Mons$Kind$terrain$VOID,\n        'Mons.Object.void': Mons$Object$void,\n        'Pair.fst': Pair$fst,\n        'Pair.snd': Pair$snd,\n        'Mons.Map.get_hero': Mons$Map$get_hero,\n        'Mons.Kind.const.CHEST': Mons$Kind$const$CHEST,\n        'Mons.Map.push': Mons$Map$push,\n        'Mons.Game.new': Mons$Game$new,\n        'Mons.Game.set_map': Mons$Game$set_map,\n        'Mons.Game.map_push': Mons$Game$map_push,\n        'Mons.Object.get_adjacent_pos': Mons$Object$get_adjacent_pos,\n        'Mons.Game.get_tile': Mons$Game$get_tile,\n        'Mons.Object.get_adjacent_obj_list': Mons$Object$get_adjacent_obj_list,\n        'Nat.eql': Nat$eql,\n        'List.length': List$length,\n        'Mons.Object.can_move_forward': Mons$Object$can_move_forward,\n        'List.tail': List$tail,\n        'List.delete_at_u32': List$delete_at_u32,\n        'Mons.Map.del': Mons$Map$del,\n        'Mons.Game.map_del': Mons$Game$map_del,\n        'Mons.Object.heal_all_mons': Mons$Object$heal_all_mons,\n        'List.update_at': List$update_at,\n        'Mons.Map.set': Mons$Map$set,\n        'Mons.Game.map_set': Mons$Game$map_set,\n        'Mons.Kind.inter_lever_eff': Mons$Kind$inter_lever_eff,\n        'Mons.Kind.inter.LEVER': Mons$Kind$inter$LEVER,\n        'Mons.Kind.terrain.GRASS_PLANT': Mons$Kind$terrain$GRASS_PLANT,\n        'Mons.Kind.terrain.PLANT_0': Mons$Kind$terrain$PLANT_0,\n        'Mons.Map.code_to_tile': Mons$Map$code_to_tile,\n        'Mons.Map.build': Mons$Map$build,\n        'Mons.map_source': Mons$map_source,\n        'Mons.Screen.game': Mons$Screen$game,\n        'Mons.Turn.new': Mons$Turn$new,\n        'Mons.Skill.none': Mons$Skill$none,\n        'Mons.Turn.empty': Mons$Turn$empty,\n        'App.Render.pix': App$Render$pix,\n        'Image3D.set_length': Image3D$set_length,\n        'Image3D.clear': Image3D$clear,\n        'List.at': List$at,\n        'Mons.Map.get': Mons$Map$get,\n        'Mons.Game.dim': Mons$Game$dim,\n        'Mons.Object.get_current_mon': Mons$Object$get_current_mon,\n        'Mons.global_scr_mid': Mons$global_scr_mid,\n        'Cmp.as_gtn': Cmp$as_gtn,\n        'Word.gtn': Word$gtn,\n        'U32.gtn': U32$gtn,\n        'Cmp.as_ltn': Cmp$as_ltn,\n        'Word.ltn': Word$ltn,\n        'U32.ltn': U32$ltn,\n        'Mons.image_to_global': Mons$image_to_global,\n        'Mons.Attr.new': Mons$Attr$new,\n        'Word.mod': Word$mod,\n        'U32.mod': U32$mod,\n        'Mons.walk_char_pack': Mons$walk_char_pack,\n        'U32.length': U32$length,\n        'U32.slice': U32$slice,\n        'U32.read_base': U32$read_base,\n        'Image3D.parse_byte': Image3D$parse_byte,\n        'Col32.new': Col32$new,\n        'Word.trim': Word$trim,\n        'Unit.new': Unit$new,\n        'Array.extract_tip': Array$extract_tip,\n        'Array.extract_tie': Array$extract_tie,\n        'Word.foldl': Word$foldl,\n        'Array.mut': Array$mut,\n        'Array.set': Array$set,\n        'Buffer32.set': Buffer32$set,\n        'Image3D.set_pos': Image3D$set_pos,\n        'Image3D.set_col': Image3D$set_col,\n        'Image3D.push': Image3D$push,\n        'Image3D.parse': Image3D$parse,\n        'Mons.Assets.char.boy_r_0': Mons$Assets$char$boy_r_0,\n        'Mons.Assets.char.boy_u_0': Mons$Assets$char$boy_u_0,\n        'Mons.Assets.char.boy_l_0': Mons$Assets$char$boy_l_0,\n        'Mons.Assets.char.boy_d_0': Mons$Assets$char$boy_d_0,\n        'Mons.Assets.char.boy_r_1': Mons$Assets$char$boy_r_1,\n        'Mons.Assets.char.boy_u_1': Mons$Assets$char$boy_u_1,\n        'Mons.Assets.char.boy_l_1': Mons$Assets$char$boy_l_1,\n        'Mons.Assets.char.boy_d_1': Mons$Assets$char$boy_d_1,\n        'Mons.Assets.char.boy_r_2': Mons$Assets$char$boy_r_2,\n        'Mons.Assets.char.boy_u_2': Mons$Assets$char$boy_u_2,\n        'Mons.Assets.char.boy_l_2': Mons$Assets$char$boy_l_2,\n        'Mons.Assets.char.boy_d_2': Mons$Assets$char$boy_d_2,\n        'Bool.if': Bool$if,\n        'Mons.Assets.char.battle_boy_u': Mons$Assets$char$battle_boy_u,\n        'Mons.Skill.hero_kill': Mons$Skill$hero_kill,\n        'Mons.Attr.new_hero': Mons$Attr$new_hero,\n        'Mons.Kind.set_static_sprites': Mons$Kind$set_static_sprites,\n        'Mons.Assets.char.mons_mage': Mons$Assets$char$mons_mage,\n        'Mons.Assets.char.battle_mage_d': Mons$Assets$char$battle_mage_d,\n        'Mons.Skill.hit_4': Mons$Skill$hit_4,\n        'Mons.Skill.hit_2': Mons$Skill$hit_2,\n        'Mons.Skill.heal': Mons$Skill$heal,\n        'Mons.Skill.dummy_skills': Mons$Skill$dummy_skills,\n        'Mons.Attr.new_mage': Mons$Attr$new_mage,\n        'Image3D.empty': Image3D$empty,\n        'Mons.Kind.set_pic': Mons$Kind$set_pic,\n        'Mons.Kind.set_default_battle_spr': Mons$Kind$set_default_battle_spr,\n        'Mons.Attr.new_neutral': Mons$Attr$new_neutral,\n        'Mons.Kind.attr': Mons$Kind$attr,\n        'Mons.Object.get_ani': Mons$Object$get_ani,\n        'Mons.Object.is_standing': Mons$Object$is_standing,\n        'Image3D.get_length': Image3D$get_length,\n        'Array.get': Array$get,\n        'Buffer32.get': Buffer32$get,\n        'Image3D.get_pos': Image3D$get_pos,\n        'Image3D.get_col': Image3D$get_col,\n        'Pos32.sub': Pos32$sub,\n        'Pos32.add': Pos32$add,\n        'Mons.vox_mid': Mons$vox_mid,\n        'Mons.draw.image': Mons$draw$image,\n        'Mons.f_exe': Mons$f_exe,\n        'List.for': List$for,\n        'List.imap': List$imap,\n        'List.indices.u32': List$indices$u32,\n        'String.to_list': String$to_list,\n        'U16.to_bits': U16$to_bits,\n        'Mons.font.get_img': Mons$font$get_img,\n        'Mons.draw.char': Mons$draw$char,\n        'Mons.draw.text': Mons$draw$text,\n        'Mons.draw.list.go': Mons$draw$list$go,\n        'Mons.draw.list': Mons$draw$list,\n        'Mons.font.set_img': Mons$font$set_img,\n        'U16.new': U16$new,\n        'U16.inc': U16$inc,\n        'U16.zero': U16$zero,\n        'Nat.to_u16': Nat$to_u16,\n        'Mons.Char_black.100': Mons$Char_black$100,\n        'Mons.Char_black.101': Mons$Char_black$101,\n        'Mons.Char_black.102': Mons$Char_black$102,\n        'Mons.Char_black.103': Mons$Char_black$103,\n        'Mons.Char_black.104': Mons$Char_black$104,\n        'Mons.Char_black.105': Mons$Char_black$105,\n        'Mons.Char_black.106': Mons$Char_black$106,\n        'Mons.Char_black.107': Mons$Char_black$107,\n        'Mons.Char_black.108': Mons$Char_black$108,\n        'Mons.Char_black.109': Mons$Char_black$109,\n        'Mons.Char_black.110': Mons$Char_black$110,\n        'Mons.Char_black.111': Mons$Char_black$111,\n        'Mons.Char_black.112': Mons$Char_black$112,\n        'Mons.Char_black.113': Mons$Char_black$113,\n        'Mons.Char_black.114': Mons$Char_black$114,\n        'Mons.Char_black.115': Mons$Char_black$115,\n        'Mons.Char_black.116': Mons$Char_black$116,\n        'Mons.Char_black.117': Mons$Char_black$117,\n        'Mons.Char_black.118': Mons$Char_black$118,\n        'Mons.Char_black.119': Mons$Char_black$119,\n        'Mons.Char_black.120': Mons$Char_black$120,\n        'Mons.Char_black.121': Mons$Char_black$121,\n        'Mons.Char_black.122': Mons$Char_black$122,\n        'Mons.Char_black.123': Mons$Char_black$123,\n        'Mons.Char_black.124': Mons$Char_black$124,\n        'Mons.Char_black.125': Mons$Char_black$125,\n        'Mons.Char_black.126': Mons$Char_black$126,\n        'Mons.Char_black.32': Mons$Char_black$32,\n        'Mons.Char_black.33': Mons$Char_black$33,\n        'Mons.Char_black.34': Mons$Char_black$34,\n        'Mons.Char_black.35': Mons$Char_black$35,\n        'Mons.Char_black.36': Mons$Char_black$36,\n        'Mons.Char_black.37': Mons$Char_black$37,\n        'Mons.Char_black.38': Mons$Char_black$38,\n        'Mons.Char_black.39': Mons$Char_black$39,\n        'Mons.Char_black.40': Mons$Char_black$40,\n        'Mons.Char_black.41': Mons$Char_black$41,\n        'Mons.Char_black.42': Mons$Char_black$42,\n        'Mons.Char_black.43': Mons$Char_black$43,\n        'Mons.Char_black.44': Mons$Char_black$44,\n        'Mons.Char_black.45': Mons$Char_black$45,\n        'Mons.Char_black.46': Mons$Char_black$46,\n        'Mons.Char_black.47': Mons$Char_black$47,\n        'Mons.Char_black.48': Mons$Char_black$48,\n        'Mons.Char_black.49': Mons$Char_black$49,\n        'Mons.Char_black.50': Mons$Char_black$50,\n        'Mons.Char_black.51': Mons$Char_black$51,\n        'Mons.Char_black.52': Mons$Char_black$52,\n        'Mons.Char_black.53': Mons$Char_black$53,\n        'Mons.Char_black.54': Mons$Char_black$54,\n        'Mons.Char_black.55': Mons$Char_black$55,\n        'Mons.Char_black.56': Mons$Char_black$56,\n        'Mons.Char_black.57': Mons$Char_black$57,\n        'Mons.Char_black.58': Mons$Char_black$58,\n        'Mons.Char_black.59': Mons$Char_black$59,\n        'Mons.Char_black.60': Mons$Char_black$60,\n        'Mons.Char_black.61': Mons$Char_black$61,\n        'Mons.Char_black.62': Mons$Char_black$62,\n        'Mons.Char_black.63': Mons$Char_black$63,\n        'Mons.Char_black.64': Mons$Char_black$64,\n        'Mons.Char_black.65': Mons$Char_black$65,\n        'Mons.Char_black.66': Mons$Char_black$66,\n        'Mons.Char_black.67': Mons$Char_black$67,\n        'Mons.Char_black.68': Mons$Char_black$68,\n        'Mons.Char_black.69': Mons$Char_black$69,\n        'Mons.Char_black.70': Mons$Char_black$70,\n        'Mons.Char_black.71': Mons$Char_black$71,\n        'Mons.Char_black.72': Mons$Char_black$72,\n        'Mons.Char_black.73': Mons$Char_black$73,\n        'Mons.Char_black.74': Mons$Char_black$74,\n        'Mons.Char_black.75': Mons$Char_black$75,\n        'Mons.Char_black.76': Mons$Char_black$76,\n        'Mons.Char_black.77': Mons$Char_black$77,\n        'Mons.Char_black.78': Mons$Char_black$78,\n        'Mons.Char_black.79': Mons$Char_black$79,\n        'Mons.Char_black.80': Mons$Char_black$80,\n        'Mons.Char_black.81': Mons$Char_black$81,\n        'Mons.Char_black.82': Mons$Char_black$82,\n        'Mons.Char_black.83': Mons$Char_black$83,\n        'Mons.Char_black.84': Mons$Char_black$84,\n        'Mons.Char_black.85': Mons$Char_black$85,\n        'Mons.Char_black.86': Mons$Char_black$86,\n        'Mons.Char_black.87': Mons$Char_black$87,\n        'Mons.Char_black.88': Mons$Char_black$88,\n        'Mons.Char_black.89': Mons$Char_black$89,\n        'Mons.Char_black.90': Mons$Char_black$90,\n        'Mons.Char_black.91': Mons$Char_black$91,\n        'Mons.Char_black.92': Mons$Char_black$92,\n        'Mons.Char_black.93': Mons$Char_black$93,\n        'Mons.Char_black.94': Mons$Char_black$94,\n        'Mons.Char_black.95': Mons$Char_black$95,\n        'Mons.Char_black.96': Mons$Char_black$96,\n        'Mons.Char_black.97': Mons$Char_black$97,\n        'Mons.Char_black.98': Mons$Char_black$98,\n        'Mons.Char_black.99': Mons$Char_black$99,\n        'Mons.Char_black.normal': Mons$Char_black$normal,\n        'Mons.Char_black.earth': Mons$Char_black$earth,\n        'Mons.Char_black.fire': Mons$Char_black$fire,\n        'Mons.Char_black.water': Mons$Char_black$water,\n        'Mons.Char_black.grass': Mons$Char_black$grass,\n        'Mons.Char_black.electric': Mons$Char_black$electric,\n        'Mons.Char_black.psychic': Mons$Char_black$psychic,\n        'Mons.Char_black.ice': Mons$Char_black$ice,\n        'Mons.Char_black.light': Mons$Char_black$light,\n        'Mons.Char_black.darkness': Mons$Char_black$darkness,\n        'Mons.Char_black.s_72': Mons$Char_black$s_72,\n        'Mons.Char_black.s_80': Mons$Char_black$s_80,\n        'Mons.Char_black.burn': Mons$Char_black$burn,\n        'Mons.Char_black.hit': Mons$Char_black$hit,\n        'Mons.Char_black.invulnerable': Mons$Char_black$invulnerable,\n        'Mons.Char_black.minimize': Mons$Char_black$minimize,\n        'Mons.Char_black.poison': Mons$Char_black$poison,\n        'Mons.Char_black.protect': Mons$Char_black$protect,\n        'Mons.Char_black.sleep': Mons$Char_black$sleep,\n        'Mons.Char_black.font': Mons$Char_black$font,\n        'Mons.draw.list_selector': Mons$draw$list_selector,\n        'Mons.Char_white.100': Mons$Char_white$100,\n        'Mons.Char_white.101': Mons$Char_white$101,\n        'Mons.Char_white.102': Mons$Char_white$102,\n        'Mons.Char_white.103': Mons$Char_white$103,\n        'Mons.Char_white.104': Mons$Char_white$104,\n        'Mons.Char_white.105': Mons$Char_white$105,\n        'Mons.Char_white.106': Mons$Char_white$106,\n        'Mons.Char_white.107': Mons$Char_white$107,\n        'Mons.Char_white.108': Mons$Char_white$108,\n        'Mons.Char_white.109': Mons$Char_white$109,\n        'Mons.Char_white.110': Mons$Char_white$110,\n        'Mons.Char_white.111': Mons$Char_white$111,\n        'Mons.Char_white.112': Mons$Char_white$112,\n        'Mons.Char_white.113': Mons$Char_white$113,\n        'Mons.Char_white.114': Mons$Char_white$114,\n        'Mons.Char_white.115': Mons$Char_white$115,\n        'Mons.Char_white.116': Mons$Char_white$116,\n        'Mons.Char_white.117': Mons$Char_white$117,\n        'Mons.Char_white.118': Mons$Char_white$118,\n        'Mons.Char_white.119': Mons$Char_white$119,\n        'Mons.Char_white.120': Mons$Char_white$120,\n        'Mons.Char_white.121': Mons$Char_white$121,\n        'Mons.Char_white.122': Mons$Char_white$122,\n        'Mons.Char_white.123': Mons$Char_white$123,\n        'Mons.Char_white.124': Mons$Char_white$124,\n        'Mons.Char_white.125': Mons$Char_white$125,\n        'Mons.Char_white.126': Mons$Char_white$126,\n        'Mons.Char_white.32': Mons$Char_white$32,\n        'Mons.Char_white.33': Mons$Char_white$33,\n        'Mons.Char_white.34': Mons$Char_white$34,\n        'Mons.Char_white.35': Mons$Char_white$35,\n        'Mons.Char_white.36': Mons$Char_white$36,\n        'Mons.Char_white.37': Mons$Char_white$37,\n        'Mons.Char_white.38': Mons$Char_white$38,\n        'Mons.Char_white.39': Mons$Char_white$39,\n        'Mons.Char_white.40': Mons$Char_white$40,\n        'Mons.Char_white.41': Mons$Char_white$41,\n        'Mons.Char_white.42': Mons$Char_white$42,\n        'Mons.Char_white.43': Mons$Char_white$43,\n        'Mons.Char_white.44': Mons$Char_white$44,\n        'Mons.Char_white.45': Mons$Char_white$45,\n        'Mons.Char_white.46': Mons$Char_white$46,\n        'Mons.Char_white.47': Mons$Char_white$47,\n        'Mons.Char_white.48': Mons$Char_white$48,\n        'Mons.Char_white.49': Mons$Char_white$49,\n        'Mons.Char_white.50': Mons$Char_white$50,\n        'Mons.Char_white.51': Mons$Char_white$51,\n        'Mons.Char_white.52': Mons$Char_white$52,\n        'Mons.Char_white.53': Mons$Char_white$53,\n        'Mons.Char_white.54': Mons$Char_white$54,\n        'Mons.Char_white.55': Mons$Char_white$55,\n        'Mons.Char_white.56': Mons$Char_white$56,\n        'Mons.Char_white.57': Mons$Char_white$57,\n        'Mons.Char_white.58': Mons$Char_white$58,\n        'Mons.Char_white.59': Mons$Char_white$59,\n        'Mons.Char_white.60': Mons$Char_white$60,\n        'Mons.Char_white.61': Mons$Char_white$61,\n        'Mons.Char_white.62': Mons$Char_white$62,\n        'Mons.Char_white.63': Mons$Char_white$63,\n        'Mons.Char_white.64': Mons$Char_white$64,\n        'Mons.Char_white.65': Mons$Char_white$65,\n        'Mons.Char_white.66': Mons$Char_white$66,\n        'Mons.Char_white.67': Mons$Char_white$67,\n        'Mons.Char_white.68': Mons$Char_white$68,\n        'Mons.Char_white.69': Mons$Char_white$69,\n        'Mons.Char_white.70': Mons$Char_white$70,\n        'Mons.Char_white.71': Mons$Char_white$71,\n        'Mons.Char_white.72': Mons$Char_white$72,\n        'Mons.Char_white.73': Mons$Char_white$73,\n        'Mons.Char_white.74': Mons$Char_white$74,\n        'Mons.Char_white.75': Mons$Char_white$75,\n        'Mons.Char_white.76': Mons$Char_white$76,\n        'Mons.Char_white.77': Mons$Char_white$77,\n        'Mons.Char_white.78': Mons$Char_white$78,\n        'Mons.Char_white.79': Mons$Char_white$79,\n        'Mons.Char_white.80': Mons$Char_white$80,\n        'Mons.Char_white.81': Mons$Char_white$81,\n        'Mons.Char_white.82': Mons$Char_white$82,\n        'Mons.Char_white.83': Mons$Char_white$83,\n        'Mons.Char_white.84': Mons$Char_white$84,\n        'Mons.Char_white.85': Mons$Char_white$85,\n        'Mons.Char_white.86': Mons$Char_white$86,\n        'Mons.Char_white.87': Mons$Char_white$87,\n        'Mons.Char_white.88': Mons$Char_white$88,\n        'Mons.Char_white.89': Mons$Char_white$89,\n        'Mons.Char_white.90': Mons$Char_white$90,\n        'Mons.Char_white.91': Mons$Char_white$91,\n        'Mons.Char_white.92': Mons$Char_white$92,\n        'Mons.Char_white.93': Mons$Char_white$93,\n        'Mons.Char_white.94': Mons$Char_white$94,\n        'Mons.Char_white.95': Mons$Char_white$95,\n        'Mons.Char_white.96': Mons$Char_white$96,\n        'Mons.Char_white.97': Mons$Char_white$97,\n        'Mons.Char_white.98': Mons$Char_white$98,\n        'Mons.Char_white.99': Mons$Char_white$99,\n        'Mons.Char_white.font': Mons$Char_white$font,\n        'List.reverse.go': List$reverse$go,\n        'List.reverse': List$reverse,\n        'Mons.Object.get_dir': Mons$Object$get_dir,\n        'Mons.draw.global_xy': Mons$draw$global_xy,\n        'Nat.mod.go': Nat$mod$go,\n        'Nat.mod': Nat$mod,\n        'Either': Either,\n        'Either.left': Either$left,\n        'Either.right': Either$right,\n        'Nat.sub_rem': Nat$sub_rem,\n        'Nat.div_mod.go': Nat$div_mod$go,\n        'Nat.div_mod': Nat$div_mod,\n        'Nat.div': Nat$div,\n        'Mons.draw.cur_sprite': Mons$draw$cur_sprite,\n        'Mons.Sprite.new': Mons$Sprite$new,\n        'Mons.game_sprites': Mons$game_sprites,\n        'Mons.scr_mid': Mons$scr_mid,\n        'Cmp.as_lte': Cmp$as_lte,\n        'Word.lte': Word$lte,\n        'U32.lte': U32$lte,\n        'Mons.Map.build_sprites': Mons$Map$build_sprites,\n        'Mons.draw.text_screen_bg': Mons$draw$text_screen_bg,\n        'Mons.draw.msg_screen.line_0': Mons$draw$msg_screen$line_0,\n        'Mons.draw.msg_screen.line_1': Mons$draw$msg_screen$line_1,\n        'Mons.draw.mage_talk': Mons$draw$mage_talk,\n        'Mons.Object.get_images': Mons$Object$get_images,\n        'Mons.Kind.get_name': Mons$Kind$get_name,\n        'Mons.Object.get_names': Mons$Object$get_names,\n        'Mons.draw.list_image.go': Mons$draw$list_image$go,\n        'Mons.draw.list_image': Mons$draw$list_image,\n        'Mons.draw.mon_img_selected': Mons$draw$mon_img_selected,\n        'Mons.draw.initial_mons': Mons$draw$initial_mons,\n        'String.concat': String$concat,\n        'String.flatten.go': String$flatten$go,\n        'String.flatten': String$flatten,\n        'Mons.draw.img_type': Mons$draw$img_type,\n        'Mons.draw.small_HP': Mons$draw$small_HP,\n        'List.fold': List$fold,\n        'Nat.to_base.go': Nat$to_base$go,\n        'Nat.to_base': Nat$to_base,\n        'Nat.gtn': Nat$gtn,\n        'Nat.lte': Nat$lte,\n        'Nat.show_digit': Nat$show_digit,\n        'Nat.to_string_base': Nat$to_string_base,\n        'U32.to_string': U32$to_string,\n        'Bool.not': Bool$not,\n        'Mons.Object.remaining_hp': Mons$Object$remaining_hp,\n        'Mons.Object.is_obj_defeated': Mons$Object$is_obj_defeated,\n        'Mons.Object.is_battling': Mons$Object$is_battling,\n        'Mons.draw.background': Mons$draw$background,\n        'Mons.draw.get_battle_bg': Mons$draw$get_battle_bg,\n        'Mons.draw.battle_bg': Mons$draw$battle_bg,\n        'Mons.draw.hero_hp': Mons$draw$hero_hp,\n        'Mons.draw.adve_hp': Mons$draw$adve_hp,\n        'Mons.draw.effect': Mons$draw$effect,\n        'Mons.draw.effects': Mons$draw$effects,\n        'Mons.Turn.is_active': Mons$Turn$is_active,\n        'Mons.Turn.hero_turn': Mons$Turn$hero_turn,\n        'Mons.Skill.get_name': Mons$Skill$get_name,\n        'Mons.Skill.short_description': Mons$Skill$short_description,\n        'Mons.draw.turn': Mons$draw$turn,\n        'Mons.Kind.get_skills': Mons$Kind$get_skills,\n        'Mons.Game.get_skills_at': Mons$Game$get_skills_at,\n        'Mons.draw.battle_skills': Mons$draw$battle_skills,\n        'Mons.draw.get_full_bg': Mons$draw$get_full_bg,\n        'Mons.draw.capture_bg': Mons$draw$capture_bg,\n        'Mons.draw.battle_win_bg': Mons$draw$battle_win_bg,\n        'Mons.Kind.is_portal': Mons$Kind$is_portal,\n        'Bool.or': Bool$or,\n        'Mons.Game.defeated_lvl_mons': Mons$Game$defeated_lvl_mons,\n        'Mons.Assets.void': Mons$Assets$void,\n        'Mons.Object.qtd_mons_defeated': Mons$Object$qtd_mons_defeated,\n        'Mons.draw.bag_select': Mons$draw$bag_select,\n        'Mons.draw.bag': Mons$draw$bag,\n        'Mons.draw.full_bag': Mons$draw$full_bag,\n        'Mons.draw': Mons$draw,\n        'App.Action': App$Action,\n        'App.Action.print': App$Action$print,\n        'App.Action.resize': App$Action$resize,\n        'Mons.scr_w': Mons$scr_w,\n        'Mons.scr_h': Mons$scr_h,\n        'App.Action.state': App$Action$state,\n        'Mons.Game.set_usr': Mons$Game$set_usr,\n        'App.Action.watch': App$Action$watch,\n        'Word.from_bits': Word$from_bits,\n        'Bits.concat': Bits$concat,\n        'String.to_bits': String$to_bits,\n        'Mons.App.room': Mons$App$room,\n        'Cmp.as_gte': Cmp$as_gte,\n        'Word.gte': Word$gte,\n        'U16.gte': U16$gte,\n        'U16.lte': U16$lte,\n        'U16.sub': U16$sub,\n        'Char.to_upper': Char$to_upper,\n        'U16.add': U16$add,\n        'Char.to_lower': Char$to_lower,\n        'Mons.Input.char': Mons$Input$char,\n        'Mons.Input.list': Mons$Input$list,\n        'Mons.Input.char_to_code_map': Mons$Input$char_to_code_map,\n        'Mons.Input.serialize': Mons$Input$serialize,\n        'App.Action.post': App$Action$post,\n        'Mons.Object.set_ani': Mons$Object$set_ani,\n        'Mons.Object.set_dir': Mons$Object$set_dir,\n        'Mons.Object.is_free_to_move': Mons$Object$is_free_to_move,\n        'Mons.Dir.up': Mons$Dir$up,\n        'Mons.Dir.left': Mons$Dir$left,\n        'Mons.Dir.right': Mons$Dir$right,\n        'Mons.Object.tick': Mons$Object$tick,\n        'Mons.Dir.move': Mons$Dir$move,\n        'Mons.Map.pop': Mons$Map$pop,\n        'Mons.Map.get_top': Mons$Map$get_top,\n        'Mons.Object.is_walking': Mons$Object$is_walking,\n        'Mons.Kind.get_blocks': Mons$Kind$get_blocks,\n        'Mons.Game.move_obj': Mons$Game$move_obj,\n        'Mons.Game.set_user_pos': Mons$Game$set_user_pos,\n        'Mons.Game.tick_user': Mons$Game$tick_user,\n        'Mons.Game.set_tik': Mons$Game$set_tik,\n        'Mons.Game.tick_game': Mons$Game$tick_game,\n        'Mons.Game.tick': Mons$Game$tick,\n        'Bits.slice': Bits$slice,\n        'Mons.Input.code_to_char_map': Mons$Input$code_to_char_map,\n        'Mons.Input.deserialize': Mons$Input$deserialize,\n        'Mons.Game.set_stt': Mons$Game$set_stt,\n        'Mons.Kind.mons.HERO': Mons$Kind$mons$HERO,\n        'Mons.Type.fire': Mons$Type$fire,\n        'Mons.Object.hero': Mons$Object$hero,\n        'Mons.Object.ended_battle': Mons$Object$ended_battle,\n        'Mons.Screen.introduction': Mons$Screen$introduction,\n        'Mons.Screen.credits': Mons$Screen$credits,\n        'Mons.Screen.welcome': Mons$Screen$welcome,\n        'List.elem': List$elem,\n        'Char.eql': Char$eql,\n        'Mons.is_walk_cmd': Mons$is_walk_cmd,\n        'Mons.key_to_dir': Mons$key_to_dir,\n        'Mons.Object.set_pad': Mons$Object$set_pad,\n        'Mons.Pad.set_r': Mons$Pad$set_r,\n        'Mons.Object.set_pad_r': Mons$Object$set_pad_r,\n        'Mons.Pad.set_u': Mons$Pad$set_u,\n        'Mons.Object.set_pad_u': Mons$Object$set_pad_u,\n        'Mons.Pad.set_l': Mons$Pad$set_l,\n        'Mons.Object.set_pad_l': Mons$Object$set_pad_l,\n        'Mons.Pad.set_d': Mons$Pad$set_d,\n        'Mons.Object.set_pad_d': Mons$Object$set_pad_d,\n        'Mons.dir_to_set_pad': Mons$dir_to_set_pad,\n        'Char.is_upper': Char$is_upper,\n        'Mons.Game.update': Mons$Game$update,\n        'Mons.Game.walk': Mons$Game$walk,\n        'Mons.Kind.is_mage': Mons$Kind$is_mage,\n        'Mons.Object.set_bag': Mons$Object$set_bag,\n        'Mons.Kind.mons.POISOLICK': Mons$Kind$mons$POISOLICK,\n        'Mons.Kind.mons.AZULA': Mons$Kind$mons$AZULA,\n        'Mons.Kind.mons.EMERELDER': Mons$Kind$mons$EMERELDER,\n        'Mons.Object.set_dmg': Mons$Object$set_dmg,\n        'Nat.ltn': Nat$ltn,\n        'List.pure': List$pure,\n        'List.append': List$append,\n        'Mons.Object.push_to_bag': Mons$Object$push_to_bag,\n        'Mons.initial_mons': Mons$initial_mons,\n        'Mons.Screen.intro_select': Mons$Screen$intro_select,\n        'Mons.Type.earth': Mons$Type$earth,\n        'Mons.Object.set_mon': Mons$Object$set_mon,\n        'Mons.Object.delete_init_mons': Mons$Object$delete_init_mons,\n        'U32.gte': U32$gte,\n        'Mons.Game.adve_turn': Mons$Game$adve_turn,\n        'Mons.Effect.upd_initial_eff': Mons$Effect$upd_initial_eff,\n        'Mons.Object.set_eff': Mons$Object$set_eff,\n        'Mons.Skill.update_mon_obj': Mons$Skill$update_mon_obj,\n        'Mons.Effect.has_invulnerable': Mons$Effect$has_invulnerable,\n        'Mons.Effect.has_burn': Mons$Effect$has_burn,\n        'Mons.Effect.has_hit': Mons$Effect$has_hit,\n        'Mons.Effect.has_poison': Mons$Effect$has_poison,\n        'Mons.Skill.apply_inital_eff_dmg': Mons$Skill$apply_inital_eff_dmg,\n        'Mons.Effect.has_protect': Mons$Effect$has_protect,\n        'Mons.Effect.has_minimize': Mons$Effect$has_minimize,\n        'Mons.Object.get_dmg': Mons$Object$get_dmg,\n        'Mons.Object.hit': Mons$Object$hit,\n        'Mons.Skill.damage_eff': Mons$Skill$damage_eff,\n        'Mons.Skill.apply_inital_eff': Mons$Skill$apply_inital_eff,\n        'Mons.Effect.has_sleep': Mons$Effect$has_sleep,\n        'Mons.Type.skill_n_type': Mons$Type$skill_n_type,\n        'Mons.Object.heal': Mons$Object$heal,\n        'Mons.Skill.heal_eff': Mons$Skill$heal_eff,\n        'Mons.Effect.set_invulnerable': Mons$Effect$set_invulnerable,\n        'Mons.Skill.invulnerable_eff': Mons$Skill$invulnerable_eff,\n        'Mons.Effect.set_hit': Mons$Effect$set_hit,\n        'Mons.Skill.hit_next_eff': Mons$Skill$hit_next_eff,\n        'Mons.Effect.set_burn': Mons$Effect$set_burn,\n        'Mons.Skill.burn_eff': Mons$Skill$burn_eff,\n        'Mons.Effect.set_protect': Mons$Effect$set_protect,\n        'Mons.Skill.protect_eff': Mons$Skill$protect_eff,\n        'Mons.Effect.set_poison': Mons$Effect$set_poison,\n        'Mons.Skill.poison_eff': Mons$Skill$poison_eff,\n        'Mons.Skill.critical_hit': Mons$Skill$critical_hit,\n        'Mons.Skill.is_critical': Mons$Skill$is_critical,\n        'Mons.Kind.get_agi': Mons$Kind$get_agi,\n        'Mons.Effect.set_minimize': Mons$Effect$set_minimize,\n        'Mons.Skill.minimize_eff': Mons$Skill$minimize_eff,\n        'Mons.Effect.set_sleep': Mons$Effect$set_sleep,\n        'Mons.Skill.sleep_eff': Mons$Skill$sleep_eff,\n        'Mons.Skill.cast': Mons$Skill$cast,\n        'Mons.Skill.run': Mons$Skill$run,\n        'Mons.Game.hero_start_attacking': Mons$Game$hero_start_attacking,\n        'Mons.Game.exec_turn': Mons$Game$exec_turn,\n        'Mons.Kind.is_mon_area': Mons$Kind$is_mon_area,\n        'Mons.Kind.area_mon_pos': Mons$Kind$area_mon_pos,\n        'Mons.Screen.inventory': Mons$Screen$inventory,\n        'Mons.Skill.clear_after_battle': Mons$Skill$clear_after_battle,\n        'Mons.Object.set_cap': Mons$Object$set_cap,\n        'Mons.Object.add_defeated_mon': Mons$Object$add_defeated_mon,\n        'Mons.Object.set_bos': Mons$Object$set_bos,\n        'Mons.Object.capture_boss': Mons$Object$capture_boss,\n        'Mons.Game.delete_adve_obj': Mons$Game$delete_adve_obj,\n        'Mons.Object.is_full_bag': Mons$Object$is_full_bag,\n        'Mons.Screen.capture_mon': Mons$Screen$capture_mon,\n        'Mons.Kind.get_pos': Mons$Kind$get_pos,\n        'Mons.Game.add_mon': Mons$Game$add_mon,\n        'List.delete_at': List$delete_at,\n        'Mons.Object.delete_from_bag': Mons$Object$delete_from_bag,\n        'Mons.Screen.game_over': Mons$Screen$game_over,\n        'Mons.Turn.is_last_player_move': Mons$Turn$is_last_player_move,\n        'Mons.Turn.hero_run': Mons$Turn$hero_run,\n        'Mons.Effect.upd_end_turn_eff': Mons$Effect$upd_end_turn_eff,\n        'Mons.Skill.apply_end_turn_eff': Mons$Skill$apply_end_turn_eff,\n        'Mons.Game.move_hero_down': Mons$Game$move_hero_down,\n        'Mons.Kind.mons.ZOIO': Mons$Kind$mons$ZOIO,\n        'Mons.Kind.mons.MIMIC': Mons$Kind$mons$MIMIC,\n        'Mons.Kind.mons.MIMIC2': Mons$Kind$mons$MIMIC2,\n        'Mons.Kind.mons.CYCLOPE': Mons$Kind$mons$CYCLOPE,\n        'Mons.Kind.mons.TROWL': Mons$Kind$mons$TROWL,\n        'Mons.Kind.mons.EMERELDER2': Mons$Kind$mons$EMERELDER2,\n        'Mons.Game.add_boss': Mons$Game$add_boss,\n        'Mons.Kind.mons.BEHOLDER': Mons$Kind$mons$BEHOLDER,\n        'Mons.Game.add_mons_to_map': Mons$Game$add_mons_to_map,\n        'Mons.Game.hero_inital_position': Mons$Game$hero_inital_position,\n        'Mons.Object.get_adjacent_obj': Mons$Object$get_adjacent_obj,\n        'Mons.Object.hero_can_push_obj': Mons$Object$hero_can_push_obj,\n        'Mons.Kind.exec_eff': Mons$Kind$exec_eff,\n        'Mons.Object.set_kin': Mons$Object$set_kin,\n        'Mons.Object.update_interactive': Mons$Object$update_interactive,\n        'Mons.Kind.set_on_interactive': Mons$Kind$set_on_interactive,\n        'Mons.Game.cmd': Mons$Game$cmd,\n        'App.new': App$new,\n        'Mons.start': Mons$start,\n        'Mons.off': Mons$off,\n        'Mons': Mons,\n    };\n})();"],"sourceRoot":""}