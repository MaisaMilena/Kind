// TODO: add screen to finish turn:
// Ex: hero used ... skill; adve used... skill; show hp lost or healed
// Draws the game to screen
Mons.draw(game: Mons.Game, scr: Image3D): Image3D
  open game
  let hero_pos = Mons.Game.get_hero_pos(game)
  let scr = Image3D.clear(scr)
  case hero_pos{
  none: scr
  some: let hero_pair = Mons.Map.get_hero(hero_pos.value, game.map)
    let hero_obj = Pair.fst<_,_>(hero_pair)
    let hero_idx = Pair.snd<_,_>(hero_pair)
    let adve_obj = Mons.Map.get(hero_pos.value, U32.add(hero_idx, 1u), game.map)
    let dim = Mons.Game.dim(game)
    open hero_obj
    open adve_obj
    let hero_mon_obj = Mons.Object.get_current_mon(hero_obj)
    open hero_mon_obj
    open Mons.Kind.attr(adve_obj.kin) as adve_attr
    let is_standing = Mons.Object.is_standing(hero_obj)
    // let game =  Mons.Map.build_sprites(game, scr, hero_pos.value, hero_obj)
    
    case game.stt as stt{
      welcome:
      let logo = Mons.Assets.char.boy_d_0 //Image3D.empty // TODO: add real image
      let scr = Mons.draw.image(logo, Pos32.new(120u,80u,0u), scr)
      let scr = Mons.draw.image(Mons.f_exe, Pos32.new(80u,80u,0u), scr)
      let scr = Mons.draw.list(["Play", "Credits"], Bool.false, 25u, Mons.Char_black.font, Pos32.new(40u,50u,0u), scr)
      let scr = Mons.draw.list_selector(stt.idx, Bool.false, 25u, Mons.Char_black.font, Pos32.new(30u,50u,0u), scr)
      let scr = Mons.draw.text("[c] Select", Mons.Char_black.font, Pos32.new(40u,128u,0u), scr)
      scr

      credits:
      let battle_normal_bg_full = Image3D.empty // TODO: add real image
      let scr = Mons.draw.image(battle_normal_bg_full, Pos32.new(120u,80u,0u), scr)
      let artists0 = ["Alexandre Avila", "Caio Carvalho", "Johnny Azevedo", "Lucca Tuelher", "Maisa Milena", "Marcio Maia", "Marcos Medeiros"]
      let artists1 = ["Marcos Motta", "Nathan Danjo", "Paulo Reis", "Pedro Taka", "Rodrigo Rodrigues", "Victor Maia", "Yuri Carvalho"]
      let scr = Mons.draw.text("[z] Back", Mons.Char_white.font, Pos32.new(20u,15u,0u), scr)
      let scr = Mons.draw.list(artists0, Bool.false, 15u, Mons.Char_white.font, Pos32.new(20u,20u,0u), scr)
      let scr = Mons.draw.list(artists1, Bool.false, 15u, Mons.Char_white.font, Pos32.new(125u,20u,0u), scr)
      scr

      introduction:
      if Bool.and(String.eql(adve_attr.name, "MAGE"), is_standing) then
        if U32.eql(stt.step, 0u) then
          let game =  Mons.Map.build_sprites(game, scr, hero_pos.value, hero_obj)
          Mons.draw.mage_talk(
            "Oh! So you really exist... the", "young man of the prophecy. [c]", scr)
        else if U32.eql(stt.step, 1u) then // Follow to the game
          let game =  Mons.Map.build_sprites(game, scr, hero_pos.value, hero_obj)
          Mons.draw.mage_talk(
            "I'm in a hurry and can't explain", "now, but... we depend on you. [c]", scr)
        else if U32.eql(stt.step, 2u) then
          let game =  Mons.Map.build_sprites(game, scr, hero_pos.value, hero_obj)
          Mons.draw.mage_talk(
            "Great choice! You can press", "[e] to check it on the bag. [c]", scr)
        else Mons.Map.build_sprites(game, scr, hero_pos.value, hero_obj)
      else Mons.Map.build_sprites(game, scr, hero_pos.value, hero_obj)

      intro_select:
      let game =  Mons.Map.build_sprites(game, scr, hero_pos.value, hero_obj)
      Mons.draw.initial_mons(hero_obj, scr)
  
      game:
      let hero_mon_attr = Mons.Kind.attr(hero_mon_obj.kin)
      open hero_mon_attr
      case adve_obj.kin as adve_kind{
        Mons: //scr
        let hero_chp = U32.sub(hero_mon_attr.mhp, hero_mon_obj.dmg)
        let hero_btl_img = hero_mon_attr.battle_spr(Bool.true);
        let hero_txt = String.flatten([hero_mon_attr.name, " ", Mons.draw.img_type(hero_mon_obj.kin)])
        let hero_hp = String.flatten([Mons.draw.small_HP, " ", U32.to_string(hero_chp),"/", U32.to_string(hero_mon_attr.mhp)])

        let adve_chp = U32.sub(adve_attr.mhp, adve_obj.dmg)
        let adve_btl_img = adve_attr.battle_spr(Bool.false);
        let adve_txt = String.flatten([adve_attr.name, " ", Mons.draw.img_type(adve_obj.kin)])
        let adve_hp = String.flatten([Mons.draw.small_HP, " ", U32.to_string(adve_chp),"/", U32.to_string(adve_attr.mhp)])
       
        if is_standing then
          if Mons.Object.is_battling(adve_obj, hero_mon_obj) then
            let scr = Mons.draw.battle_bg(adve_kind.ele, adve_kind.boss, dim, scr)
            let scr = Mons.draw.hero_hp(hero_chp, hero_mon_attr.mhp, hero_txt, hero_hp, scr)
            let scr = Mons.draw.adve_hp(adve_chp, adve_attr.mhp, adve_txt, adve_hp, scr)
            let scr = Mons.draw.image(hero_btl_img, Pos32.new(75u,80u,0u), scr) 
            let scr = Mons.draw.image(adve_btl_img, Pos32.new(180u,40u,0u), scr)
            open stt.turn as turn
            let scr = Mons.draw.effects(hero_mon_obj.eff, adve_obj.eff, scr)
            if Mons.Turn.is_active(stt.turn) then // Show end turn screen
              if Mons.Turn.hero_turn(stt.turn) 
              then Mons.draw.turn(hero_mon_attr.name, turn.hero_skill, scr)
              else Mons.draw.turn(adve_attr.name, turn.adve_skill, scr)
            else
              Mons.draw.battle_skills(hero_mon_obj, scr)
          else
            let scr = Mons.draw.capture_bg(adve_kind.ele, dim, scr)
            let scr = 
              if Mons.Object.is_obj_defeated(adve_obj) then
                if adve_kind.boss then
                  let scr = Mons.draw.battle_win_bg(adve_kind.ele, dim, scr)
                  let scr = Mons.draw.text("You unlocked the next level.", Mons.Char_black.font, Mons.draw.msg_screen.line_0, scr)
                  let scr = Mons.draw.text("[c] I'm ready!", Mons.Char_black.font, Mons.draw.msg_screen.line_1, scr)
                  Mons.draw.image(adve_btl_img, Pos32.new(180u,40u,0u), scr)
                else
                let scr = Mons.draw.battle_win_bg(adve_kind.ele, dim, scr)
                let scr = Mons.draw.text("[c] Capture", Mons.Char_black.font, Mons.draw.msg_screen.line_0, scr)
                let scr = Mons.draw.text("[z] Free", Mons.Char_black.font, Mons.draw.msg_screen.line_1, scr)
                Mons.draw.image(adve_btl_img, Pos32.new(180u,40u,0u), scr)
              else if Mons.Object.is_obj_defeated(hero_mon_obj) then
                // let scr = Mons.draw.text(hero_txt, Mons.Char_black.font, Pos32.new(130u,104u,0u), scr)
                let scr = Mons.draw.text("You lost the battle and your Mon.", Mons.Char_black.font, Mons.draw.msg_screen.line_0, scr)
                // let scr = Mons.draw.text("your current Mon.", Mons.Char_black.font, Pos32.new(16u,42u,0u), scr)
                let scr = Mons.draw.text("[c] I'll do better next time",Mons.Char_black.font, Mons.draw.msg_screen.line_1, scr)
                Mons.draw.image(hero_btl_img, Pos32.new(75u,80u,0u), scr)
              else scr
            scr
        else
          Mons.Map.build_sprites(game, scr, hero_pos.value, hero_obj)

        Const:
        if Bool.and(is_standing, Mons.Kind.is_portal(adve_obj.kin)) then
          let game = Mons.Map.build_sprites(game, scr, hero_pos.value, hero_obj)
          def captured = Pair.fst<_,_>(hero_obj.cap)
          def boss_def = Nat.to_u32(List.length<_>(hero_obj.bos))
          def defeated_lvl_boss = U32.eql(boss_def, U32.div(dim, 2u))
          // def a =  Mons.Game.defeated_lvl_mons(captured, dim)
          if Bool.or(Mons.Game.defeated_lvl_mons(captured, dim), defeated_lvl_boss)
          then
            let scr = Mons.draw.image(Mons.draw.text_screen_bg, Pos32.new(120u,80u,0u), scr)
            Mons.draw.text("Press [c] to access next level", Mons.Char_black.font, Pos32.new(30u,135u,0u), scr)
          else
            let scr = Mons.draw.image(Mons.draw.text_screen_bg, Pos32.new(120u,80u,0u), scr)
            let scr = Mons.draw.text("To access the next level you must", Mons.Char_black.font, Mons.draw.msg_screen.line_0, scr)
            Mons.draw.text("first defeat all enemies.", Mons.Char_black.font, Mons.draw.msg_screen.line_1, scr)
         
          // if U32.gtn(boss_def, hero_idx) then
          //   let scr = Mons.draw.image(Mons.draw.text_screen_bg, Pos32.new(120u,80u,0u), scr)
          //   Mons.draw.text("Press [c] to access next level", Mons.Char_black.font, Pos32.new(30u,135u,0u), scr)
          // else
          //   let scr = Mons.draw.image(Mons.draw.text_screen_bg, Pos32.new(120u,80u,0u), scr)
          //   let scr = Mons.draw.text("To access the next level you must", Mons.Char_black.font, Mons.draw.msg_screen.line_0, scr)
          //   Mons.draw.text("first defeat the boss.", Mons.Char_black.font, Mons.draw.msg_screen.line_1, scr)
        
        // else if Bool.and(is_standing, Mons.Kind.is_heal_area(adve_obj.kin)) then
        //   let scr = Mons.Map.build_sprites(game, scr, hero_pos.value, hero_obj)
        //   let scr = Mons.draw.image(Mons.draw.text_screen_bg, Pos32.new(120u,80u,0u), scr)
        //   let scr = Mons.draw.text("Press [c] to heal 5 on all of", Mons.Char_black.font, Mons.draw.msg_screen.line_0, scr)
        //   Mons.draw.text("your Mons", Mons.Char_black.font, Mons.draw.msg_screen.line_1, scr)
        else
          Mons.Map.build_sprites(game, scr, hero_pos.value, hero_obj)

        Terrain: Mons.Map.build_sprites(game, scr, hero_pos.value, hero_obj)

    //   // TODO: add message about interaction
        Interactive:
        case adve_kind.ele{
          LEVER: Mons.Map.build_sprites(game, scr, hero_pos.value, hero_obj)
          MOVE: Mons.Map.build_sprites(game, scr, hero_pos.value, hero_obj)
          HEAL: 
          if adve_kind.on then
            let scr = Mons.Map.build_sprites(game, scr, hero_pos.value, hero_obj)
            let scr = Mons.draw.image(Mons.draw.text_screen_bg, Pos32.new(120u,80u,0u), scr)
            Mons.draw.text("You already used the heal.", Mons.Char_black.font, Mons.draw.msg_screen.line_0, scr)
          else
            let scr = Mons.Map.build_sprites(game, scr, hero_pos.value, hero_obj)
            let scr = Mons.draw.image(Mons.draw.text_screen_bg, Pos32.new(120u,80u,0u), scr)
            let scr = Mons.draw.text("Press [c] to heal 15HP on all of", Mons.Char_black.font, Mons.draw.msg_screen.line_0, scr)
            Mons.draw.text("your Mons", Mons.Char_black.font, Mons.draw.msg_screen.line_1, scr)
        }
    } // end case stt.game

      inventory: Mons.draw.bag(hero_obj, dim, scr)

      capture_mon: // pressed to capture mon
      if stt.full_bag then Mons.draw.full_bag(hero_obj, adve_obj, dim, scr) 
      else Mons.Map.build_sprites(game, scr, hero_pos.value, hero_obj)

      game_over:
      Mons.draw.text("GAME OVER", Mons.Char_white.font, Pos32.new(90u,80u,0u), scr)
      // TODO:
      // Mons.draw.text("Press [c] to restart", Mons.Char_white.font, Mons.draw.msg_screen.line_0, scr)
    }
  }

Mons.draw.text_screen_bg: Image3D // TODO: add real image
  // Mons.Assets.screen.text_screen_bg
  Image3D.empty

// Given a tile (x, y) and an object, returns its global (x, y) positions
Mons.draw.global_xy(t_x: U32, t_y: U32, obj: Mons.Object): Pair(U32, U32)
  open obj
  let ani = Mons.Object.get_ani(obj)
  let dir = Mons.Object.get_dir(obj)
  let g_x = U32.mul(t_x, 16u)
  let g_y = U32.mul(t_y, 16u)
  let g_x = case dir{
      right: U32.sub(g_x, ani)
      up   : g_x
      left : U32.add(g_x, ani)
      down : g_x
    }
  let g_y = case dir{
      right: g_y
      up   : U32.add(g_y, ani)
      left : g_y
      down : U32.sub(g_y, ani)
    }
  {g_x, g_y}

// BAG
// --------

// Draw an inventory showing mons captured and their names
Mons.draw.bag(obj: Mons.Object, idx: U32, scr: Image3D): Image3D
  let inventory = Mons.Assets.void // TODO: add real image
  let scr = Mons.draw.image(inventory, Pos32.new(120u,80u,0u), scr)
  let scr = Mons.draw.image(Mons.draw.get_full_bg(idx), Pos32.new(120u,80u,0u), scr)
  open obj
  let boss_def = U32.to_string(Nat.to_u32(List.length<_>(obj.bos)))
  let qtd = Nat.to_u32(List.length<_>(obj.bag))
  let qtd_field = 
    if U32.eql(qtd, 0u) then "Nothing to show for now"
    else
      let qtd_mons_game = U32.to_string(Pair.fst<_,_>(obj.cap))
      let qtd_defeated = U32.to_string(Mons.Object.qtd_mons_defeated(obj))
      String.flatten(["Captured: ", qtd_defeated, "/", qtd_mons_game])
  let scr = Mons.draw.text(qtd_field, Mons.Char_black.font, Pos32.new(95u,25u,0u), scr)
  let scr = Mons.draw.bag_select(obj.mon, qtd, scr)
  let scr = Mons.draw.mon_img_selected(obj.mon, qtd, Bool.false, 34u, Pos32.new(40u,50u,0u), scr)
  let mons_names = List.reverse<_>(Mons.Object.get_names(obj.bag)) 
  let mons_images = List.reverse<_>(Mons.Object.get_images(obj.bag))
  let scr = Mons.draw.list_image(mons_images, Bool.false, 34u, Pos32.new(40u,50u,0u), scr)
  let scr = Mons.draw.list(mons_names, Bool.false, 14u, Mons.Char_black.font, Pos32.new(95u,29u,0u), scr)
  scr

// 0: neutral
// 1: left, up
// 2: right, down
// To highlight a Mon name on the inventory
Mons.draw.bag_select(mon_idx: U32, qtd: U32, scr: Image3D): Image3D
  let def_y = 42u
  let pos = 
    if U32.eql(mon_idx, 0u) then Pos32.new(160u,def_y,0u)
    else Pos32.new(160u, U32.add(def_y, U32.mul(16u, mon_idx)), 0u)
  if U32.eql(qtd, 0u) then scr
  else 
    let inventory_row_mon_selected = Image3D.empty // TODO: add real image
    Mons.draw.image(inventory_row_mon_selected, pos, scr)

// Draw an inventory showing mons captured, their names and options to
// replace or skip the "mon capture"
Mons.draw.full_bag(obj: Mons.Object, adve_obj: Mons.Object, idx: U32, scr: Image3D): Image3D
  let inventory_mon_selection = Image3D.empty // TODO: add real image
  let inventory_replace = Image3D.empty // TODO: add real image
  let scr = Mons.draw.image(Mons.draw.get_full_bg(idx), Pos32.new(120u,80u,0u), scr)
  let scr = Mons.draw.image(Mons.draw.text_screen_bg, Pos32.new(120u,80u,0u), scr)
  let scr = Mons.draw.image(inventory_replace, Pos32.new(65u,60u,0u), scr)
  open obj
  open adve_obj
  open Mons.Kind.attr(adve_obj.kin) as adve_attr
  let scr = Mons.draw.image(adve_attr.battle_spr(Bool.false), Pos32.new(180u,40u,0u), scr)
  let scr = Mons.draw.image(adve_attr.pic, Pos32.new(180u,90u,0u), scr)
  let scr = Mons.draw.image(inventory_mon_selection, Pos32.new(180u,90u,0u), scr)
  
  let qtd = Nat.to_u32(List.length<_>(obj.bag))
  let mons_images = List.reverse<_>(Mons.Object.get_images(obj.bag))
  let scr = Mons.draw.list_image(mons_images, Bool.true, 35u, Pos32.new(30u,90u,0u), scr)
  let scr = Mons.draw.mon_img_selected(obj.mon, qtd, Bool.true, 35u, Pos32.new(30u,90u,0u), scr)
  let scr = Mons.draw.text("Select a mon to replace or skip", Mons.Char_black.font, Mons.draw.msg_screen.line_0, scr)
  let scr = Mons.draw.text("[c] Replace  | [z] Skip     ", Mons.Char_black.font, Mons.draw.msg_screen.line_1, scr)
  scr

// 0: neutral
// 1: left, up
// 2: right, down
// To highlight a Mon image in a list of images
Mons.draw.mon_img_selected(mon_idx: U32, qtd: U32, horizontal: Bool, spacing: U32, pos: Pos32, scr: Image3D): Image3D
  let x_pos = Pos32.get_x(pos)
  let y_pos = Pos32.get_y(pos)
  let pos = 
    if U32.eql(mon_idx, 0u) then Pos32.new(x_pos,y_pos,0u)
    else 
      if horizontal then Pos32.new(U32.add(x_pos, U32.mul(spacing, mon_idx)),y_pos,0u)
      else Pos32.new(x_pos, U32.add(y_pos, U32.mul(spacing, mon_idx)), 0u)
  if U32.eql(qtd, 0u) then scr
  else let inventory_mon_selected = Image3D.empty // TODO: add real image
    Mons.draw.image(inventory_mon_selected, pos, scr)

// Draw auxiliars
// -------------
Mons.draw.msg_screen.line_0: Pos32
  Pos32.new(16u,128u,0u)

Mons.draw.msg_screen.line_1: Pos32
  Pos32.new(16u,144u,0u)

Mons.draw.list(texts: List(String), horizontal: Bool, spacing: U32, font_map: Mons.font, start_pos: Pos32, scr: Image3D): Image3D
   let qtd = Nat.to_u32(List.length<_>(texts))
   Mons.draw.list.go(texts, horizontal, spacing, font_map, start_pos, scr, 0u)

Mons.draw.list.go(texts: List(String),  horizontal: Bool, spacing: U32, font_map: Mons.font, pos: Pos32, scr: Image3D, idx: U32): Image3D
   let x = Pos32.get_x(pos)
   let y = Pos32.get_y(pos)
   let pos = 
      if horizontal then Pos32.new(U32.add(U32.add(spacing, idx), x),y,0u)
      else Pos32.new(x,U32.add(U32.add(spacing, idx), y),0u)
   case texts{
    nil: scr
    cons: let scr = Mons.draw.text(texts.head, font_map, pos, scr)
      Mons.draw.list.go(texts.tail, horizontal, spacing, font_map, pos, scr, U32.add(idx, 1u))
   }

Mons.draw.list_selector(
  idx: U32,
  horizontal: Bool, spacing: U32, font_map: Mons.font, start_pos: Pos32,
  scr: Image3D): Image3D
  let x = Pos32.get_x(start_pos)
  let y = Pos32.get_y(start_pos)
  let idx = U32.add(idx, 1u)
  let pos = 
    if horizontal then Pos32.new(U32.add(U32.mul(spacing, idx), x),y,0u)
    else  Pos32.new(x,U32.add(U32.mul(spacing, idx), y),0u)
  Mons.draw.text("> ", font_map, pos, scr)

// Draw images of Mons in the replace screen
Mons.draw.list_image(images: List(Image3D), horizontal: Bool, spacing: U32, start_pos: Pos32, scr: Image3D): Image3D
   let qtd = Nat.to_u32(List.length<_>(images))
   Mons.draw.list_image.go(images, horizontal, spacing, start_pos, scr, 0u)

Mons.draw.list_image.go(images: List(Image3D), horizontal: Bool, spacing: U32, pos: Pos32, scr: Image3D, idx: U32): Image3D
   let x = Pos32.get_x(pos)
   let y = Pos32.get_y(pos)
   case images{
   nil: scr
   cons:
     let inventory_mon_selection = Image3D.empty // TODO: add real image
     let scr = Mons.draw.image(inventory_mon_selection, pos, scr)
     let scr = Mons.draw.image(images.head, pos, scr)
     let pos = if horizontal then
        Pos32.new(U32.add(x, spacing),y,0u)
        // Mons.draw.list_image.go(images.tail, horizontal, spacing, pos, scr, U32.add(idx, 1u))
     else
        // let scr = Mons.draw.image(images.head, pos, scr)
        Pos32.new(x, U32.add(y, spacing),0u)
        Mons.draw.list_image.go(images.tail, horizontal, spacing, pos, scr, U32.add(idx, 1u))
   }

// Draws an ASCII char to a position using 
Mons.draw.char(chr: Char, font_map: Mons.font, chr_pos: Pos32, scr: Image3D): Image3D
  case Mons.font.get_img(chr, font_map) as got{
  none: scr
  some: let img = got.value
    let img_len = Image3D.get_length(img)
    let scr = for i : U32 = 0u .. img_len:
      let vox_pos = Image3D.get_pos(i, img)
      let pos = Pos32.sub(Pos32.add(chr_pos, vox_pos), Mons.vox_mid)
      let col = Image3D.get_col(i, img)
      Image3D.push(pos, col, scr)
    scr
  }

// Draws an ASCII text to a position
Mons.draw.text(txt: String, font_map: Mons.font, chr_pos: Pos32, scr: Image3D): Image3D
  for pair in List.indices.u32<_>(String.to_list(txt)) with scr:
    let {i, chr} = pair
    let add_pos = Pos32.new(U32.mul(i,6u), 0u, 0u)
    Mons.draw.char(chr, font_map, Pos32.add(chr_pos, add_pos), scr)

// Draws a sprite to a position
Mons.draw.image(img: Image3D, pos: Pos32, scr: Image3D): Image3D
  let len = Image3D.get_length(img)
  for i : U32 = 0u .. len with scr:
    let pix_pos = Image3D.get_pos(i, img)
    let pix_col = Image3D.get_col(i, img)
    let pix_pos = Pos32.sub(Pos32.add(pos, pix_pos), Mons.vox_mid)
    Image3D.push(pix_pos, pix_col, scr)

// Get the sprite at a given idx in a List of Sprites
Mons.draw.cur_sprite(idl: U32, sprites: List(Image3D)): Image3D
  let len_sprite = List.length<_>(sprites)
  let idl_nat = U32.to_nat(U32.sub(idl, 1u))
  let idx = Nat.mod(Nat.div(idl_nat, 4), len_sprite)
  case List.at<_>(idx, sprites) as spr{
    none: Image3D.empty // TODO: Mons.Assets.screen.void
    some: spr.value
  }

// SCREENS
// -------
// Draw the scene to select one of three Mons to start the game
Mons.draw.mage_talk(text_0: String, text_1: String, scr: Image3D): Image3D
  let battle_boy_u = Image3D.empty // TODO: add real image
  let battle_mage_d = Image3D.empty // TODO: add real image
  let scr = Mons.draw.image(Mons.draw.text_screen_bg, Pos32.new(120u,80u,0u), scr)
  let scr = Mons.draw.text(text_0, Mons.Char_black.font, Mons.draw.msg_screen.line_0, scr)
  let scr = Mons.draw.text(text_1, Mons.Char_black.font, Mons.draw.msg_screen.line_1, scr)
  let scr = Mons.draw.image(battle_boy_u, Pos32.new(75u,85u,0u), scr) 
  let scr = Mons.draw.image(battle_mage_d, Pos32.new(180u,80u,0u), scr)
  scr

Mons.draw.initial_mons(obj: Mons.Object, scr: Image3D): Image3D
  open obj
  let qtd = Nat.to_u32(List.length<_>(obj.bag))
  if U32.eql(qtd, 0u) then 
    Mons.draw.text("nothing to show", Mons.Char_white.font, Pos32.new(60u,50u,0u), scr)
  else
    let scr = Mons.draw.image(Mons.draw.text_screen_bg, Pos32.new(120u,90u,0u), scr)
    let mons_images = List.reverse<_>(Mons.Object.get_images(obj.bag))
    let mons_names = List.reverse<_>(Mons.Object.get_names(obj.bag)) 
    let scr = Mons.draw.list(mons_names, Bool.false, 34u, Mons.Char_white.font, Pos32.new(70u,0u,0u), scr)
    let scr = Mons.draw.list_image(mons_images, Bool.false, 34u, Pos32.new(40u,30u,0u), scr)
    let scr = Mons.draw.mon_img_selected(obj.mon, qtd, Bool.false, 34u, Pos32.new(40u,30u,0u), scr)
    let scr = Mons.draw.text("Choose a Mon to start with and ", Mons.Char_black.font, Pos32.new(16u,134u,0u), scr)
    let scr = Mons.draw.text("run to the tower. [c]", Mons.Char_black.font, Pos32.new(16u,148u,0u), scr)
    scr

Mons.draw.battle_bg(adve_kind: Mons.Kind.mons, is_boss: Bool, idx: U32, scr: Image3D): Image3D
  let screen.battle_default = Image3D.empty // TODO: add real image
  let screen.battle_boss = Image3D.empty // TODO: add real image
  let scr = Mons.draw.image(Mons.draw.get_battle_bg(idx), Pos32.new(120u,80u,0u), scr)
  let scr = 
    if is_boss then
      Mons.draw.image(screen.battle_boss, Pos32.new(120u,80u,0u), scr)
    else Mons.draw.image(screen.battle_default, Pos32.new(120u,80u,0u), scr)
  scr

Mons.draw.capture_bg(adve_kind: Mons.Kind.mons, idx: U32, scr: Image3D): Image3D
  let scr = Mons.draw.image(Mons.draw.get_full_bg(idx), Pos32.new(120u,80u,0u), scr)
  let sct = Mons.draw.image(Mons.draw.text_screen_bg, Pos32.new(120u,80u,0u), scr)
  scr

Mons.draw.adve_hp(chp: U32, mhp: U32, name: String, adve_hp: String, scr: Image3D): Image3D
  let battle_hp = Image3D.empty // TODO: add real image
  let p_hp = U32.div(U32.mul(chp, 70u), mhp) // x = 66u: full hp
  let pos_chp = Pos32.new(p_hp,21u,0u) 
  let pos_name = Pos32.new(38u,21u,0u)
  let scr = Mons.draw.image(battle_hp, pos_chp, scr)
  let scr = Mons.draw.text(name, Mons.Char_white.font, pos_name, scr)
  let scr = Mons.draw.text(adve_hp, Mons.Char_black.font, Pos32.new(38u,36u,0u), scr)
  scr

Mons.draw.hero_hp(chp: U32, mhp: U32, name: String, hero_hp: String, scr: Image3D): Image3D
  let battle_hp = Image3D.empty // TODO: add real image
  let p_hp = U32.div(U32.mul(chp, 70u), mhp) 
  let pos_chp = Pos32.new(U32.add(100u, p_hp),82u,0u) // x = 175u: full hp
  let pos_name = Pos32.new(139u,82u,0u)
  let scr = Mons.draw.image(battle_hp, pos_chp, scr)
  let scr = Mons.draw.text(name, Mons.Char_white.font, pos_name, scr)
  let scr = Mons.draw.text(hero_hp, Mons.Char_black.font, Pos32.new(139u,97u,0u), scr)
  scr

Mons.draw.battle_win_bg(adve_kind: Mons.Kind.mons, idx: U32, scr: Image3D): Image3D
  let battle_win = Image3D.empty // TODO: add real image
  let scr = Mons.draw.image(Mons.draw.get_full_bg(idx), Pos32.new(120u,80u,0u), scr)
  let scr = Mons.draw.image(battle_win, Pos32.new(70u,90u,0u), scr)
  let scr = Mons.draw.image(Mons.draw.text_screen_bg, Pos32.new(120u,80u,0u), scr)
  scr

// Each theme will have 2 levels: one of Mons and other for the boss.
// The boss will have a different background.
Mons.draw.background(idx: U32): Pair(Image3D, Image3D)
  if U32.eql(idx, 1u) then
    // {Mons.Assets.screen.battle_normal_bg, Mons.Assets.screen.battle_normal_bg_full}
    {Image3D.empty, Image3D.empty}
  else if U32.eql(idx, 2u) then // Normal type boss
    // {Mons.Assets.screen.battle_normal_boss_bg, Mons.Assets.screen.battle_normal_bg_full}
    {Image3D.empty, Image3D.empty}
  else
    // {Mons.Assets.screen.battle_normal_bg, Mons.Assets.screen.battle_normal_bg_full}
    {Image3D.empty, Image3D.empty}

Mons.draw.get_battle_bg(idx: U32): Image3D
  Pair.fst<_,_>(Mons.draw.background(idx))

Mons.draw.get_full_bg(idx: U32): Image3D
  Pair.snd<_,_>(Mons.draw.background(idx))

Mons.draw.img_type(kind: Mons.Kind): String
  case kind{
    Mons: 
    case kind.pri_type{
      normal  : "①"
      earth   : "②"
      fire    : "③"
      water   : "④"
      grass   : "⑤"
      electric: "⑥"
      psychic : "⑦"
      ice     : "⑧"
      light   : "⑨"
      darkness: "⑩"
    }
    Const: ""
    Terrain: ""
    Interactive: ""
  }

Mons.draw.small_HP: String
  "ƕƥ"

Mons.draw.turn(name: String, skill: Mons.Skill, scr: Image3D): Image3D
  let msg = String.flatten([name, " used ", Mons.Skill.get_name(skill), "."])
  let scr = Mons.draw.text(msg, Mons.Char_black.font, Mons.draw.msg_screen.line_0, scr)
  let desc = Mons.Skill.short_description(skill)
  Mons.draw.text(String.flatten([desc, "  [c]"]), Mons.Char_black.font, Mons.draw.msg_screen.line_1, scr)

Mons.draw.battle_skills(hero_obj: Mons.Object, scr: Image3D): Image3D
  let u = Mons.Skill.get_name(Mons.Game.get_skills_at(0, hero_obj))
  let i = Mons.Skill.get_name(Mons.Game.get_skills_at(1, hero_obj))
  let j = Mons.Skill.get_name(Mons.Game.get_skills_at(2, hero_obj))
  let k = Mons.Skill.get_name(Mons.Game.get_skills_at(3, hero_obj))
  // TODO: adjust skill len to be aligned
  let scr = Mons.draw.text(String.flatten(["[u] ", u, "   [i] ", i]), Mons.Char_black.font, Mons.draw.msg_screen.line_0, scr)
  Mons.draw.text(String.flatten(["[j] ", j, "   [k] ", k]), Mons.Char_black.font, Mons.draw.msg_screen.line_1, scr)

// TODO: add sprite and icon to represent the effects
Mons.draw.effects(hero_eff: Mons.Effect, adve_eff: Mons.Effect, scr: Image3D): Image3D
  let scr = Mons.draw.effect(hero_eff, Pos32.new(140u, 105u, 0u), scr)
  let scr = Mons.draw.effect(adve_eff, Pos32.new(38u, 45u, 0u), scr)
  scr

Mons.draw.effect(eff: Mons.Effect, pos: Pos32, scr: Image3D): Image3D
  // use skp = Debug.log<>("> Draw effects")
  scr
  // TODO: Uncomment code above
  // open eff
  // let burn = if Mons.Effect.has_burn(eff) then "Ⓐ " else "" 
  // let hit = if Mons.Effect.has_hit(eff) then "Ⓑ " else ""
  // let minimize = if Mons.Effect.has_minimize(eff) then "Ⓓ " else ""
  // let invulnerable = if Mons.Effect.has_invulnerable(eff) "Ⓒ " else ""
  // let poison = if Mons.Effect.has_poison(eff) "Ⓔ " else ""
  // let sleep = if Mons.Effect.has_sleep(eff) "Ⓖ " else ""
  // let protect = if Mons.Effect.has_protect(eff) "Ⓕ " else ""
  // let text = String.flatten([burn, hit, minimize, invulnerable, poison, sleep, protect])
  // let scr = Mons.draw.text(text, Mons.Char_black.font, pos, scr)
  // scr
